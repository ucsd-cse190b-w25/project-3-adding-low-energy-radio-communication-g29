
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  000071ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005068  08005068  00006068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005070  08005070  000071ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  08005078  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001ac  08005224  000071ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005224  000074bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa64  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002059  00000000  00000000  00011c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00013ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00014670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275b1  00000000  00000000  00014db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adf0  00000000  00000000  0003c367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0ec9  00000000  00000000  00047157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f64  00000000  00000000  00138064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0013afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c44 	.word	0x08004c44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	08004c44 	.word	0x08004c44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000286:	2006      	movs	r0, #6
 8000288:	f003 fb54 	bl	8003934 <malloc>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b70      	ldr	r3, [pc, #448]	@ (8000454 <ble_init+0x1d4>)
 8000292:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000294:	bf00      	nop
 8000296:	4b70      	ldr	r3, [pc, #448]	@ (8000458 <ble_init+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0fb      	beq.n	8000296 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800029e:	4b6d      	ldr	r3, [pc, #436]	@ (8000454 <ble_init+0x1d4>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2106      	movs	r1, #6
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f905 	bl	80004b4 <fetchBleEvent>
 80002aa:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d111      	bne.n	80002d6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002b2:	4b68      	ldr	r3, [pc, #416]	@ (8000454 <ble_init+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2206      	movs	r2, #6
 80002b8:	4968      	ldr	r1, [pc, #416]	@ (800045c <ble_init+0x1dc>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f984 	bl	80005c8 <checkEventResp>
 80002c0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d106      	bne.n	80002d6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002c8:	4b65      	ldr	r3, [pc, #404]	@ (8000460 <ble_init+0x1e0>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b63      	ldr	r3, [pc, #396]	@ (8000460 <ble_init+0x1e0>)
 80002d4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002d6:	200a      	movs	r0, #10
 80002d8:	f001 fc2e 	bl	8001b38 <HAL_Delay>
	 free(rxEvent);
 80002dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000454 <ble_init+0x1d4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fb2f 	bl	8003944 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2307      	movs	r3, #7
 80002ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000464 <ble_init+0x1e4>)
 80002ee:	2104      	movs	r1, #4
 80002f0:	485d      	ldr	r0, [pc, #372]	@ (8000468 <ble_init+0x1e8>)
 80002f2:	f000 fa5b 	bl	80007ac <BLE_command>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002fc:	4b58      	ldr	r3, [pc, #352]	@ (8000460 <ble_init+0x1e0>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b56      	ldr	r3, [pc, #344]	@ (8000460 <ble_init+0x1e0>)
 8000308:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800030a:	4b52      	ldr	r3, [pc, #328]	@ (8000454 <ble_init+0x1d4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f003 fb18 	bl	8003944 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000314:	2303      	movs	r3, #3
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2307      	movs	r3, #7
 800031a:	4a54      	ldr	r2, [pc, #336]	@ (800046c <ble_init+0x1ec>)
 800031c:	2107      	movs	r1, #7
 800031e:	4854      	ldr	r0, [pc, #336]	@ (8000470 <ble_init+0x1f0>)
 8000320:	f000 fa44 	bl	80007ac <BLE_command>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11b      	bne.n	8000362 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800032a:	4b4d      	ldr	r3, [pc, #308]	@ (8000460 <ble_init+0x1e0>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b4a      	ldr	r3, [pc, #296]	@ (8000460 <ble_init+0x1e0>)
 8000336:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000338:	4b46      	ldr	r3, [pc, #280]	@ (8000454 <ble_init+0x1d4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3307      	adds	r3, #7
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29a      	uxth	r2, r3
 8000342:	4b4c      	ldr	r3, [pc, #304]	@ (8000474 <ble_init+0x1f4>)
 8000344:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <ble_init+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3309      	adds	r3, #9
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b49      	ldr	r3, [pc, #292]	@ (8000478 <ble_init+0x1f8>)
 8000352:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <ble_init+0x1d4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	330b      	adds	r3, #11
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b47      	ldr	r3, [pc, #284]	@ (800047c <ble_init+0x1fc>)
 8000360:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <ble_init+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f003 faec 	bl	8003944 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800036c:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <ble_init+0x200>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2307      	movs	r3, #7
 8000372:	2200      	movs	r2, #0
 8000374:	4940      	ldr	r1, [pc, #256]	@ (8000478 <ble_init+0x1f8>)
 8000376:	483f      	ldr	r0, [pc, #252]	@ (8000474 <ble_init+0x1f4>)
 8000378:	f000 fade 	bl	8000938 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800037c:	4b38      	ldr	r3, [pc, #224]	@ (8000460 <ble_init+0x1e0>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	f043 0308 	orr.w	r3, r3, #8
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b36      	ldr	r3, [pc, #216]	@ (8000460 <ble_init+0x1e0>)
 8000388:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <ble_init+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fad8 	bl	8003944 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000394:	2300      	movs	r3, #0
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2307      	movs	r3, #7
 800039a:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <ble_init+0x204>)
 800039c:	2110      	movs	r1, #16
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <ble_init+0x208>)
 80003a0:	f000 fa04 	bl	80007ac <BLE_command>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d106      	bne.n	80003b8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80003aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000460 <ble_init+0x1e0>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000460 <ble_init+0x1e0>)
 80003b6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <ble_init+0x1d4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f003 fac1 	bl	8003944 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003c2:	2300      	movs	r3, #0
 80003c4:	9300      	str	r3, [sp, #0]
 80003c6:	2307      	movs	r3, #7
 80003c8:	4a30      	ldr	r2, [pc, #192]	@ (800048c <ble_init+0x20c>)
 80003ca:	2106      	movs	r1, #6
 80003cc:	4830      	ldr	r0, [pc, #192]	@ (8000490 <ble_init+0x210>)
 80003ce:	f000 f9ed 	bl	80007ac <BLE_command>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d106      	bne.n	80003e6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003d8:	4b21      	ldr	r3, [pc, #132]	@ (8000460 <ble_init+0x1e0>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000460 <ble_init+0x1e0>)
 80003e4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <ble_init+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 faaa 	bl	8003944 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003f0:	2300      	movs	r3, #0
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2307      	movs	r3, #7
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <ble_init+0x214>)
 80003f8:	2124      	movs	r1, #36	@ 0x24
 80003fa:	4827      	ldr	r0, [pc, #156]	@ (8000498 <ble_init+0x218>)
 80003fc:	f000 f9d6 	bl	80007ac <BLE_command>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d106      	bne.n	8000414 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <ble_init+0x1e0>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800040e:	b29a      	uxth	r2, r3
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <ble_init+0x1e0>)
 8000412:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <ble_init+0x1d4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fa93 	bl	8003944 <free>

	 //This will start the advertisment,
	 setConnectable();
 800041e:	f000 f945 	bl	80006ac <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000422:	2207      	movs	r2, #7
 8000424:	491d      	ldr	r1, [pc, #116]	@ (800049c <ble_init+0x21c>)
 8000426:	481e      	ldr	r0, [pc, #120]	@ (80004a0 <ble_init+0x220>)
 8000428:	f000 fa0c 	bl	8000844 <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800042c:	2310      	movs	r3, #16
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <ble_init+0x21c>)
 8000434:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <ble_init+0x224>)
 8000436:	481c      	ldr	r0, [pc, #112]	@ (80004a8 <ble_init+0x228>)
 8000438:	f000 fa3c 	bl	80008b4 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800043c:	2304      	movs	r3, #4
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2314      	movs	r3, #20
 8000442:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ble_init+0x21c>)
 8000444:	4919      	ldr	r1, [pc, #100]	@ (80004ac <ble_init+0x22c>)
 8000446:	481a      	ldr	r0, [pc, #104]	@ (80004b0 <ble_init+0x230>)
 8000448:	f000 fa34 	bl	80008b4 <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800044c:	bf00      	nop
 }
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200002e0 	.word	0x200002e0
 8000458:	20000348 	.word	0x20000348
 800045c:	20000000 	.word	0x20000000
 8000460:	200002de 	.word	0x200002de
 8000464:	2000000c 	.word	0x2000000c
 8000468:	20000008 	.word	0x20000008
 800046c:	2000001c 	.word	0x2000001c
 8000470:	20000014 	.word	0x20000014
 8000474:	200001c8 	.word	0x200001c8
 8000478:	200001cc 	.word	0x200001cc
 800047c:	200001d0 	.word	0x200001d0
 8000480:	20000108 	.word	0x20000108
 8000484:	20000034 	.word	0x20000034
 8000488:	20000024 	.word	0x20000024
 800048c:	20000044 	.word	0x20000044
 8000490:	2000003c 	.word	0x2000003c
 8000494:	20000070 	.word	0x20000070
 8000498:	2000004c 	.word	0x2000004c
 800049c:	200002d4 	.word	0x200002d4
 80004a0:	20000110 	.word	0x20000110
 80004a4:	200002dc 	.word	0x200002dc
 80004a8:	20000130 	.word	0x20000130
 80004ac:	200002d8 	.word	0x200002d8
 80004b0:	20000120 	.word	0x20000120

080004b4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004be:	4a3d      	ldr	r2, [pc, #244]	@ (80005b4 <fetchBleEvent+0x100>)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c8:	6018      	str	r0, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	4839      	ldr	r0, [pc, #228]	@ (80005b8 <fetchBleEvent+0x104>)
 80004d2:	f001 fe11 	bl	80020f8 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d065      	beq.n	80005a8 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f001 fb2b 	bl	8001b38 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e8:	4834      	ldr	r0, [pc, #208]	@ (80005bc <fetchBleEvent+0x108>)
 80004ea:	f001 fe1d 	bl	8002128 <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004ee:	f107 0210 	add.w	r2, r7, #16
 80004f2:	f107 0118 	add.w	r1, r7, #24
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2305      	movs	r3, #5
 80004fc:	4830      	ldr	r0, [pc, #192]	@ (80005c0 <fetchBleEvent+0x10c>)
 80004fe:	f002 fe93 	bl	8003228 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000508:	482c      	ldr	r0, [pc, #176]	@ (80005bc <fetchBleEvent+0x108>)
 800050a:	f001 fe0d 	bl	8002128 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fb12 	bl	8001b38 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051a:	4828      	ldr	r0, [pc, #160]	@ (80005bc <fetchBleEvent+0x108>)
 800051c:	f001 fe04 	bl	8002128 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000520:	f107 0210 	add.w	r2, r7, #16
 8000524:	f107 0118 	add.w	r1, r7, #24
 8000528:	2301      	movs	r3, #1
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2305      	movs	r3, #5
 800052e:	4824      	ldr	r0, [pc, #144]	@ (80005c0 <fetchBleEvent+0x10c>)
 8000530:	f002 fe7a 	bl	8003228 <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000534:	7cfb      	ldrb	r3, [r7, #19]
 8000536:	461a      	mov	r2, r3
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	4313      	orrs	r3, r2
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000540:	23ff      	movs	r3, #255	@ 0xff
 8000542:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd01      	ble.n	8000550 <fetchBleEvent+0x9c>
	   dataSize=size;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	2b00      	cmp	r3, #0
 8000554:	dd1f      	ble.n	8000596 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	e00d      	b.n	8000578 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	441a      	add	r2, r3
 8000562:	f107 010f 	add.w	r1, r7, #15
 8000566:	2301      	movs	r3, #1
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <fetchBleEvent+0x10c>)
 800056e:	f002 fe5b 	bl	8003228 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	3301      	adds	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
 8000578:	6a3a      	ldr	r2, [r7, #32]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	429a      	cmp	r2, r3
 800057e:	dbed      	blt.n	800055c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <fetchBleEvent+0x108>)
 8000588:	f001 fdce 	bl	8002128 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <fetchBleEvent+0x110>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e00a      	b.n	80005ac <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4807      	ldr	r0, [pc, #28]	@ (80005bc <fetchBleEvent+0x108>)
 800059e:	f001 fdc3 	bl	8002128 <HAL_GPIO_WritePin>
		 return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a6:	e001      	b.n	80005ac <fetchBleEvent+0xf8>
   }else{
   return -2;
 80005a8:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80005ac:	4618      	mov	r0, r3
 80005ae:	3728      	adds	r7, #40	@ 0x28
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	08004c5c 	.word	0x08004c5c
 80005b8:	48001000 	.word	0x48001000
 80005bc:	48000c00 	.word	0x48000c00
 80005c0:	200002e4 	.word	0x200002e4
 80005c4:	20000348 	.word	0x20000348

080005c8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e00f      	b.n	80005fe <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	440b      	add	r3, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d002      	beq.n	80005f8 <checkEventResp+0x30>
			 return -1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	e007      	b.n	8000608 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	dbeb      	blt.n	80005de <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 8000606:	2300      	movs	r3, #0
 }
 8000608:	4618      	mov	r0, r3
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800061e:	4a1f      	ldr	r2, [pc, #124]	@ (800069c <sendCommand+0x88>)
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	6018      	str	r0, [r3, #0]
 800062a:	3304      	adds	r3, #4
 800062c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendCommand+0x8c>)
 8000636:	f001 fd77 	bl	8002128 <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800063a:	f107 0208 	add.w	r2, r7, #8
 800063e:	f107 0110 	add.w	r1, r7, #16
 8000642:	2301      	movs	r3, #1
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2305      	movs	r3, #5
 8000648:	4816      	ldr	r0, [pc, #88]	@ (80006a4 <sendCommand+0x90>)
 800064a:	f002 fded 	bl	8003228 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800064e:	7abb      	ldrb	r3, [r7, #10]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	7a7a      	ldrb	r2, [r7, #9]
 8000654:	4313      	orrs	r3, r2
 8000656:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	db09      	blt.n	8000674 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	2301      	movs	r3, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <sendCommand+0x90>)
 800066a:	f002 fc68 	bl	8002f3e <HAL_SPI_Transmit>
		 result=0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e002      	b.n	800067a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000678:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <sendCommand+0x8c>)
 8000682:	f001 fd51 	bl	8002128 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <sendCommand+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1cd      	bne.n	800062e <sendCommand+0x1a>

 }
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08004c64 	.word	0x08004c64
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	200002e4 	.word	0x200002e4
 80006a8:	20000348 	.word	0x20000348

080006ac <setConnectable>:
	 }else{
		 //something bad is happening if I am here
	 }
 }

 void setConnectable(){
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 80006b2:	200c      	movs	r0, #12
 80006b4:	f003 f93e 	bl	8003934 <malloc>
 80006b8:	4603      	mov	r3, r0
 80006ba:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4a36      	ldr	r2, [pc, #216]	@ (8000798 <setConnectable+0xec>)
 80006c0:	6810      	ldr	r0, [r2, #0]
 80006c2:	6018      	str	r0, [r3, #0]
 80006c4:	8891      	ldrh	r1, [r2, #4]
 80006c6:	7992      	ldrb	r2, [r2, #6]
 80006c8:	8099      	strh	r1, [r3, #4]
 80006ca:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3308      	adds	r3, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3309      	adds	r3, #9
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	330a      	adds	r3, #10
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	330b      	adds	r3, #11
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3307      	adds	r3, #7
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]


		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80006f4:	4b29      	ldr	r3, [pc, #164]	@ (800079c <setConnectable+0xf0>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80006fa:	4b28      	ldr	r3, [pc, #160]	@ (800079c <setConnectable+0xf0>)
 80006fc:	2215      	movs	r2, #21
 80006fe:	70da      	strb	r2, [r3, #3]

		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000700:	2019      	movs	r0, #25
 8000702:	f003 f917 	bl	8003934 <malloc>
 8000706:	4603      	mov	r3, r0
 8000708:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	4a23      	ldr	r2, [pc, #140]	@ (800079c <setConnectable+0xf0>)
 800070e:	461c      	mov	r4, r3
 8000710:	4613      	mov	r3, r2
 8000712:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000714:	6020      	str	r0, [r4, #0]
 8000716:	6061      	str	r1, [r4, #4]
 8000718:	60a2      	str	r2, [r4, #8]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	330d      	adds	r3, #13
 8000722:	220c      	movs	r2, #12
 8000724:	68f9      	ldr	r1, [r7, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fb6d 	bl	8003e06 <memcpy>

		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 800072c:	2119      	movs	r1, #25
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	f7ff ff70 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 8000734:	2007      	movs	r0, #7
 8000736:	f003 f8fd 	bl	8003934 <malloc>
 800073a:	4603      	mov	r3, r0
 800073c:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 800073e:	bf00      	nop
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <setConnectable+0xf4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0fb      	beq.n	8000740 <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff feb2 	bl	80004b4 <fetchBleEvent>
 8000750:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10f      	bne.n	8000778 <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 8000758:	2207      	movs	r2, #7
 800075a:	4912      	ldr	r1, [pc, #72]	@ (80007a4 <setConnectable+0xf8>)
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff33 	bl	80005c8 <checkEventResp>
 8000762:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d106      	bne.n	8000778 <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <setConnectable+0xfc>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <setConnectable+0xfc>)
 8000776:	801a      	strh	r2, [r3, #0]
		}
		}

		free(rxEvent);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f003 f8e3 	bl	8003944 <free>
		free(discoverableCommand);
 800077e:	68b8      	ldr	r0, [r7, #8]
 8000780:	f003 f8e0 	bl	8003944 <free>
		free(localname);
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f003 f8dd 	bl	8003944 <free>
		HAL_Delay(10);
 800078a:	200a      	movs	r0, #10
 800078c:	f001 f9d4 	bl	8001b38 <HAL_Delay>
 }
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	20000108 	.word	0x20000108
 800079c:	20000078 	.word	0x20000078
 80007a0:	20000348 	.word	0x20000348
 80007a4:	20000088 	.word	0x20000088
 80007a8:	200002de 	.word	0x200002de

080007ac <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f7ff ff29 	bl	8000614 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	005a      	lsls	r2, r3, #1
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 f8b2 	bl	8003934 <malloc>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <BLE_command+0x90>)
 80007d6:	601a      	str	r2, [r3, #0]

		long contatore=0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007dc:	e007      	b.n	80007ee <BLE_command+0x42>
			contatore++;
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	3301      	adds	r3, #1
 80007e2:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007ea:	4293      	cmp	r3, r2
 80007ec:	dc07      	bgt.n	80007fe <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007ee:	2140      	movs	r1, #64	@ 0x40
 80007f0:	4813      	ldr	r0, [pc, #76]	@ (8000840 <BLE_command+0x94>)
 80007f2:	f001 fc81 	bl	80020f8 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0f0      	beq.n	80007de <BLE_command+0x32>
 80007fc:	e000      	b.n	8000800 <BLE_command+0x54>
				break;
 80007fe:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <BLE_command+0x90>)
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	005a      	lsls	r2, r3, #1
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4619      	mov	r1, r3
 800080e:	f7ff fe51 	bl	80004b4 <fetchBleEvent>
 8000812:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d107      	bne.n	800082a <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <BLE_command+0x90>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fed0 	bl	80005c8 <checkEventResp>
 8000828:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 800082a:	200a      	movs	r0, #10
 800082c:	f001 f984 	bl	8001b38 <HAL_Delay>


	 return response;
 8000830:	697b      	ldr	r3, [r7, #20]
 }
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200002e0 	.word	0x200002e0
 8000840:	48001000 	.word	0x48001000

08000844 <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <addService+0x60>)
 8000852:	2210      	movs	r2, #16
 8000854:	68f9      	ldr	r1, [r7, #12]
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fad5 	bl	8003e06 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <addService+0x64>)
 8000862:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000864:	2301      	movs	r3, #1
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2307      	movs	r3, #7
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <addService+0x68>)
 800086c:	2117      	movs	r1, #23
 800086e:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <addService+0x64>)
 8000870:	f7ff ff9c 	bl	80007ac <BLE_command>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10a      	bne.n	8000890 <addService+0x4c>
			handle[0]=rxEvent[7];
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <addService+0x6c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	79da      	ldrb	r2, [r3, #7]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <addService+0x6c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	3301      	adds	r3, #1
 800088c:	7a12      	ldrb	r2, [r2, #8]
 800088e:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <addService+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f855 	bl	8003944 <free>
 }
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000095 	.word	0x20000095
 80008a8:	20000090 	.word	0x20000090
 80008ac:	200000a8 	.word	0x200000a8
 80008b0:	200002e0 	.word	0x200002e0

080008b4 <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <addCharacteristic+0x74>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fa9c 	bl	8003e06 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <addCharacteristic+0x78>)
 80008d4:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	785a      	ldrb	r2, [r3, #1]
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <addCharacteristic+0x78>)
 80008dc:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 80008de:	4a13      	ldr	r2, [pc, #76]	@ (800092c <addCharacteristic+0x78>)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 80008e4:	4a11      	ldr	r2, [pc, #68]	@ (800092c <addCharacteristic+0x78>)
 80008e6:	7e3b      	ldrb	r3, [r7, #24]
 80008e8:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80008ea:	2301      	movs	r3, #1
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2307      	movs	r3, #7
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <addCharacteristic+0x7c>)
 80008f2:	211e      	movs	r1, #30
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <addCharacteristic+0x78>)
 80008f6:	f7ff ff59 	bl	80007ac <BLE_command>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10a      	bne.n	8000916 <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <addCharacteristic+0x80>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	79da      	ldrb	r2, [r3, #7]
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <addCharacteristic+0x80>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	7a12      	ldrb	r2, [r2, #8]
 8000914:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <addCharacteristic+0x80>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f003 f812 	bl	8003944 <free>
 }
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000b7 	.word	0x200000b7
 800092c:	200000b0 	.word	0x200000b0
 8000930:	200000d0 	.word	0x200000d0
 8000934:	200002e0 	.word	0x200002e0

08000938 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	3306      	adds	r3, #6
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <updateCharValue+0x9c>)
 8000950:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <updateCharValue+0x9c>)
 8000958:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <updateCharValue+0x9c>)
 8000960:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <updateCharValue+0x9c>)
 8000968:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	785a      	ldrb	r2, [r3, #1]
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <updateCharValue+0x9c>)
 8000970:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <updateCharValue+0x9c>)
 8000978:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <updateCharValue+0x9c>)
 8000980:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	330a      	adds	r3, #10
 8000986:	4618      	mov	r0, r3
 8000988:	f002 ffd4 	bl	8003934 <malloc>
 800098c:	4603      	mov	r3, r0
 800098e:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000990:	220a      	movs	r2, #10
 8000992:	4910      	ldr	r1, [pc, #64]	@ (80009d4 <updateCharValue+0x9c>)
 8000994:	6978      	ldr	r0, [r7, #20]
 8000996:	f003 fa36 	bl	8003e06 <memcpy>
	 memcpy(commandComplete+10,data,size);
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	330a      	adds	r3, #10
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	6a39      	ldr	r1, [r7, #32]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fa2f 	bl	8003e06 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f103 010a 	add.w	r1, r3, #10
 80009ae:	2300      	movs	r3, #0
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2307      	movs	r3, #7
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <updateCharValue+0xa0>)
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff fef8 	bl	80007ac <BLE_command>

	 free(commandComplete);
 80009bc:	6978      	ldr	r0, [r7, #20]
 80009be:	f002 ffc1 	bl	8003944 <free>
	 free(rxEvent);
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <updateCharValue+0xa4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 ffbc 	bl	8003944 <free>
 }
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000d8 	.word	0x200000d8
 80009d8:	200000d0 	.word	0x200000d0
 80009dc:	200002e0 	.word	0x200002e0

080009e0 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
     if (connectionHandler[0] == -1 && connectionHandler[1] == -1) {
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <disconnectBLE+0x98>)
 80009e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009f0:	d105      	bne.n	80009fe <disconnectBLE+0x1e>
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <disconnectBLE+0x98>)
 80009f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009fc:	d037      	beq.n	8000a6e <disconnectBLE+0x8e>
         return; // No active connection
     }

     uint8_t command[7];
     memcpy(command, DISCONNECT, 7);
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <disconnectBLE+0x9c>)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	0c0a      	lsrs	r2, r1, #16
 8000a10:	701a      	strb	r2, [r3, #0]
     command[4] = connectionHandler[0];  // Connection handle (Little Endian)
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <disconnectBLE+0x98>)
 8000a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	723b      	strb	r3, [r7, #8]
     command[5] = connectionHandler[1];
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <disconnectBLE+0x98>)
 8000a1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	727b      	strb	r3, [r7, #9]

     if (BLE_command(command, sizeof(command), EVENT_DISCONNECT_PENDING, 7, 0) == BLE_OK) {
 8000a26:	1d38      	adds	r0, r7, #4
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <disconnectBLE+0xa0>)
 8000a30:	2107      	movs	r1, #7
 8000a32:	f7ff febb 	bl	80007ac <BLE_command>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d119      	bne.n	8000a70 <disconnectBLE+0x90>
         int result = fetchBleEvent(buffer, 127);
 8000a3c:	217f      	movs	r1, #127	@ 0x7f
 8000a3e:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <disconnectBLE+0xa4>)
 8000a40:	f7ff fd38 	bl	80004b4 <fetchBleEvent>
 8000a44:	60f8      	str	r0, [r7, #12]
         if (result == BLE_OK && checkEventResp(buffer, EVENT_DISCONNECTED, 4) == BLE_OK) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <disconnectBLE+0x90>
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <disconnectBLE+0xa8>)
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <disconnectBLE+0xa4>)
 8000a52:	f7ff fdb9 	bl	80005c8 <checkEventResp>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <disconnectBLE+0x90>
             connectionHandler[0] = -1;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <disconnectBLE+0x98>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a62:	801a      	strh	r2, [r3, #0]
             connectionHandler[1] = -1;
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <disconnectBLE+0x98>)
 8000a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6a:	805a      	strh	r2, [r3, #2]
 8000a6c:	e000      	b.n	8000a70 <disconnectBLE+0x90>
         return; // No active connection
 8000a6e:	bf00      	nop
         }
     }
 }
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000140 	.word	0x20000140
 8000a7c:	200000e8 	.word	0x200000e8
 8000a80:	200000f4 	.word	0x200000f4
 8000a84:	200001d4 	.word	0x200001d4
 8000a88:	200000f0 	.word	0x200000f0

08000a8c <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
     if (mode == 1) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d102      	bne.n	8000aa2 <setDiscoverability+0x16>
         setConnectable();
 8000a9c:	f7ff fe06 	bl	80006ac <setConnectable>
         if (BLE_command(ACI_GAP_SET_NON_DISCOVERABLE, sizeof(ACI_GAP_SET_NON_DISCOVERABLE),
                         ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE, sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE), 0) == BLE_OK) {
             printf("[BLE] Device is now non-discoverable.\n");
         }
     }
 }
 8000aa0:	e010      	b.n	8000ac4 <setDiscoverability+0x38>
     else if (mode == 0) {
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10d      	bne.n	8000ac4 <setDiscoverability+0x38>
         if (BLE_command(ACI_GAP_SET_NON_DISCOVERABLE, sizeof(ACI_GAP_SET_NON_DISCOVERABLE),
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2307      	movs	r3, #7
 8000aae:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <setDiscoverability+0x40>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <setDiscoverability+0x44>)
 8000ab4:	f7ff fe7a 	bl	80007ac <BLE_command>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <setDiscoverability+0x38>
             printf("[BLE] Device is now non-discoverable.\n");
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <setDiscoverability+0x48>)
 8000ac0:	f003 f954 	bl	8003d6c <puts>
 }
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000100 	.word	0x20000100
 8000ad0:	200000fc 	.word	0x200000fc
 8000ad4:	08004c6c 	.word	0x08004c6c

08000ad8 <i2c_init>:
#include "i2c.h"
#include <stm32l475xx.h>

void i2c_init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOB and I2C2
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;     // Enable GPIOB clock (for STM32L4)
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <i2c_init+0xb0>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	4a29      	ldr	r2, [pc, #164]	@ (8000b88 <i2c_init+0xb0>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;     // Enable I2C2 clock (for STM32L4)
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <i2c_init+0xb0>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	4a26      	ldr	r2, [pc, #152]	@ (8000b88 <i2c_init+0xb0>)
 8000aee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
    // Clear mode bits for PB10 and PB11
    GPIOB->MODER &= ~((3U << (10 * 2)) | (3U << (11 * 2)));
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <i2c_init+0xb4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a24      	ldr	r2, [pc, #144]	@ (8000b8c <i2c_init+0xb4>)
 8000afa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000afe:	6013      	str	r3, [r2, #0]
    // Set mode to Alternate Function (10b)
    GPIOB->MODER |= ((2U << (10 * 2)) | (2U << (11 * 2)));
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <i2c_init+0xb4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <i2c_init+0xb4>)
 8000b06:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000b0a:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xFU << ((10 - 8) * 4)) | (0xFU << ((11 - 8) * 4)));
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <i2c_init+0xb4>)
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b10:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <i2c_init+0xb4>)
 8000b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b16:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4U << ((10 - 8) * 4)) | (4U << ((11 - 8) * 4)));
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <i2c_init+0xb4>)
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <i2c_init+0xb4>)
 8000b1e:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000b22:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= (1U << 10) | (1U << 11);
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <i2c_init+0xb4>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <i2c_init+0xb4>)
 8000b2a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000b2e:	6053      	str	r3, [r2, #4]

    GPIOB->OSPEEDR |= ((3U << (10 * 2)) | (3U << (11 * 2)));
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <i2c_init+0xb4>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <i2c_init+0xb4>)
 8000b36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3a:	6093      	str	r3, [r2, #8]

    // Enable internal pull-ups
    GPIOB->PUPDR &= ~((3U << (10 * 2)) | (3U << (11 * 2)));
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <i2c_init+0xb4>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <i2c_init+0xb4>)
 8000b42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b46:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1U << (10 * 2)) | (1U << (11 * 2)));
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <i2c_init+0xb4>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <i2c_init+0xb4>)
 8000b4e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000b52:	60d3      	str	r3, [r2, #12]

    // Reset I2C2
    I2C2->CR1 |= I2C_CR1_SWRST;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <i2c_init+0xb8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <i2c_init+0xb8>)
 8000b5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b5e:	6013      	str	r3, [r2, #0]
    I2C2->CR1 &= ~I2C_CR1_SWRST;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <i2c_init+0xb8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <i2c_init+0xb8>)
 8000b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000b6a:	6013      	str	r3, [r2, #0]

    // Configure the TIMINGR register.
    I2C2->TIMINGR = 0x10707DBC;  // Adjust this value based on your system clock and desired speed
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <i2c_init+0xb8>)
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <i2c_init+0xbc>)
 8000b70:	611a      	str	r2, [r3, #16]

    // Enable I2C2 peripheral
    I2C2->CR1 |= I2C_CR1_PE;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <i2c_init+0xb8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <i2c_init+0xb8>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	40005800 	.word	0x40005800
 8000b94:	10707dbc 	.word	0x10707dbc

08000b98 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	603a      	str	r2, [r7, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	717b      	strb	r3, [r7, #5]
    uint32_t timeout;

    // Wait until I2C bus is not busy
    timeout = 100000;
 8000bae:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce4 <i2c_transaction+0x14c>)
 8000bb0:	60fb      	str	r3, [r7, #12]
    while (I2C2->ISR & I2C_ISR_BUSY)
 8000bb2:	e007      	b.n	8000bc4 <i2c_transaction+0x2c>
    {
        if (--timeout == 0)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <i2c_transaction+0x2c>
            return 1;  // timeout error
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e088      	b.n	8000cd6 <i2c_transaction+0x13e>
    while (I2C2->ISR & I2C_ISR_BUSY)
 8000bc4:	4b48      	ldr	r3, [pc, #288]	@ (8000ce8 <i2c_transaction+0x150>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f1      	bne.n	8000bb4 <i2c_transaction+0x1c>
    }

    // Configure the transfer in the CR2 register.
    I2C2->CR2 = 0;  // Clear previous settings
 8000bd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <i2c_transaction+0x150>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
    I2C2->CR2 |= ((uint32_t)address << 1)              // 7-bit slave address
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <i2c_transaction+0x150>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	0059      	lsls	r1, r3, #1
                | ((uint32_t)len << I2C_CR2_NBYTES_Pos)  // Number of bytes
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	430b      	orrs	r3, r1
    I2C2->CR2 |= ((uint32_t)address << 1)              // 7-bit slave address
 8000be4:	4313      	orrs	r3, r2
 8000be6:	4a40      	ldr	r2, [pc, #256]	@ (8000ce8 <i2c_transaction+0x150>)
 8000be8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bec:	6053      	str	r3, [r2, #4]
                | I2C_CR2_AUTOEND;                       // Enable autoend

    if (dir == 0)   // Write operation
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d12d      	bne.n	8000c50 <i2c_transaction+0xb8>
    {
        // Write mode: ensure the transfer direction is write (RD_WRN = 0)
        // Initiate the transfer by setting the START bit
        I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce8 <i2c_transaction+0x150>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ce8 <i2c_transaction+0x150>)
 8000bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000bfe:	6053      	str	r3, [r2, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8000c00:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a38      	ldr	r2, [pc, #224]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c0a:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	72fb      	strb	r3, [r7, #11]
 8000c10:	e019      	b.n	8000c46 <i2c_transaction+0xae>
        {
            // Wait until TXDR is empty (TXIS flag set)
            timeout = 100000;
 8000c12:	4b34      	ldr	r3, [pc, #208]	@ (8000ce4 <i2c_transaction+0x14c>)
 8000c14:	60fb      	str	r3, [r7, #12]
            while (!(I2C2->ISR & I2C_ISR_TXIS))
 8000c16:	e007      	b.n	8000c28 <i2c_transaction+0x90>
            {
                if (--timeout == 0)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <i2c_transaction+0x90>
                    return 2;  // timeout error during TXIS wait
 8000c24:	2302      	movs	r3, #2
 8000c26:	e056      	b.n	8000cd6 <i2c_transaction+0x13e>
            while (!(I2C2->ISR & I2C_ISR_TXIS))
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f1      	beq.n	8000c18 <i2c_transaction+0x80>
            }
            I2C2->TXDR = data[i];
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
        for (uint8_t i = 0; i < len; i++)
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	3301      	adds	r3, #1
 8000c44:	72fb      	strb	r3, [r7, #11]
 8000c46:	7afa      	ldrb	r2, [r7, #11]
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3e1      	bcc.n	8000c12 <i2c_transaction+0x7a>
 8000c4e:	e02d      	b.n	8000cac <i2c_transaction+0x114>
        }
    }
    else    // Read operation
    {
        // Read mode: set the RD_WRN bit before starting the transfer.
        I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a24      	ldr	r2, [pc, #144]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5a:	6053      	str	r3, [r2, #4]
        I2C2->CR2 |= I2C_CR2_START;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c66:	6053      	str	r3, [r2, #4]

        for (uint8_t i = 0; i < len; i++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	72bb      	strb	r3, [r7, #10]
 8000c6c:	e01a      	b.n	8000ca4 <i2c_transaction+0x10c>
        {
            // Wait until a byte has been received (RXNE flag set)
            timeout = 100000;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <i2c_transaction+0x14c>)
 8000c70:	60fb      	str	r3, [r7, #12]
            while (!(I2C2->ISR & I2C_ISR_RXNE))
 8000c72:	e007      	b.n	8000c84 <i2c_transaction+0xec>
            {
                if (--timeout == 0)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <i2c_transaction+0xec>
                    return 3;  // timeout error during RXNE wait
 8000c80:	2303      	movs	r3, #3
 8000c82:	e028      	b.n	8000cd6 <i2c_transaction+0x13e>
            while (!(I2C2->ISR & I2C_ISR_RXNE))
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f1      	beq.n	8000c74 <i2c_transaction+0xdc>
            }
            data[i] = I2C2->RXDR;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <i2c_transaction+0x150>)
 8000c92:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000c94:	7abb      	ldrb	r3, [r7, #10]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < len; i++)
 8000c9e:	7abb      	ldrb	r3, [r7, #10]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	72bb      	strb	r3, [r7, #10]
 8000ca4:	7aba      	ldrb	r2, [r7, #10]
 8000ca6:	797b      	ldrb	r3, [r7, #5]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d3e0      	bcc.n	8000c6e <i2c_transaction+0xd6>
        }
    }

    // Wait for the transfer to complete (STOPF flag set)
    timeout = 100000;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <i2c_transaction+0x14c>)
 8000cae:	60fb      	str	r3, [r7, #12]
    while (!(I2C2->ISR & I2C_ISR_STOPF))
 8000cb0:	e007      	b.n	8000cc2 <i2c_transaction+0x12a>
    {
        if (--timeout == 0)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <i2c_transaction+0x12a>
            return 4;  // timeout waiting for STOPF
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e009      	b.n	8000cd6 <i2c_transaction+0x13e>
    while (!(I2C2->ISR & I2C_ISR_STOPF))
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <i2c_transaction+0x150>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f1      	beq.n	8000cb2 <i2c_transaction+0x11a>
    }
    // Clear the STOP flag by writing to ICR
    I2C2->ICR = I2C_ICR_STOPCF;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <i2c_transaction+0x150>)
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	61da      	str	r2, [r3, #28]

    return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	000186a0 	.word	0x000186a0
 8000ce8:	40005800 	.word	0x40005800

08000cec <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure PA5 as an output by clearing all bits and setting the mode */
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN);
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <leds_init+0xc4>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8000db0 <leds_init+0xc4>)
 8000cf6:	f043 0303 	orr.w	r3, r3, #3
 8000cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000cfc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d06:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d0a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d26:	f023 0320 	bic.w	r3, r3, #32
 8000d2a:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d3a:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use low speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000d3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d46:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d4a:	6093      	str	r3, [r2, #8]

  /* Turn off the LED 1 */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000d4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d56:	f023 0320 	bic.w	r3, r3, #32
 8000d5a:	6153      	str	r3, [r2, #20]
  //For led2
  // Clear the mode bits for PB14
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <leds_init+0xc8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <leds_init+0xc8>)
 8000d62:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d66:	6013      	str	r3, [r2, #0]

  // Set PB14 as output (01)
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <leds_init+0xc8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <leds_init+0xc8>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	6013      	str	r3, [r2, #0]

  // Set output type to push-pull
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <leds_init+0xc8>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <leds_init+0xc8>)
 8000d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6053      	str	r3, [r2, #4]

  // Disable internal pull-up/down resistors
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD14;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <leds_init+0xc8>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <leds_init+0xc8>)
 8000d86:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d8a:	60d3      	str	r3, [r2, #12]

  // Optionally set a speed (e.g., very fast)
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED14_Pos);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <leds_init+0xc8>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <leds_init+0xc8>)
 8000d92:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000d96:	6093      	str	r3, [r2, #8]

  // Turn off LED2 initially
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <leds_init+0xc8>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	@ (8000db4 <leds_init+0xc8>)
 8000d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000da2:	6153      	str	r3, [r2, #20]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000400 	.word	0x48000400

08000db8 <leds_set>:

void leds_set(uint8_t led)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
    // LED1: connected to PA5, controlled by bit 0
    if (led & 0x01)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <leds_set+0x26>
    {
        // If bit 0 is set, turn LED1 on
        GPIOA->ODR |= GPIO_ODR_OD5;
 8000dcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dd6:	f043 0320 	orr.w	r3, r3, #32
 8000dda:	6153      	str	r3, [r2, #20]
 8000ddc:	e007      	b.n	8000dee <leds_set+0x36>
    }
    else
    {
        // Otherwise, turn LED1 off
        GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000dde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000de8:	f023 0320 	bic.w	r3, r3, #32
 8000dec:	6153      	str	r3, [r2, #20]
    }

    // LED2: connected to PB14, controlled by bit 1
    if (led & 0x02)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <leds_set+0x4e>
    {
        // If bit 1 is set, turn LED2 on
        GPIOB->ODR |= GPIO_ODR_OD14;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <leds_set+0x68>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <leds_set+0x68>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e02:	6153      	str	r3, [r2, #20]
    else
    {
        // Otherwise, turn LED2 off
        GPIOB->ODR &= ~GPIO_ODR_OD14;
    }
}
 8000e04:	e005      	b.n	8000e12 <leds_set+0x5a>
        GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <leds_set+0x68>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <leds_set+0x68>)
 8000e0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e10:	6153      	str	r3, [r2, #20]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	48000400 	.word	0x48000400

08000e24 <lsm6dsl_write_reg>:
#define CTRL1_XL              0x10   // Accelerometer control register
#define CTRL3_C               0x12   // Control register 3 (contains IF_INC bit)
#define OUTX_L_XL             0x28   // Starting register for acceleration data

static uint8_t lsm6dsl_write_reg(uint8_t reg, uint8_t value)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = reg;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	737b      	strb	r3, [r7, #13]
    return i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	2302      	movs	r3, #2
 8000e42:	2100      	movs	r1, #0
 8000e44:	206a      	movs	r0, #106	@ 0x6a
 8000e46:	f7ff fea7 	bl	8000b98 <i2c_transaction>
 8000e4a:	4603      	mov	r3, r0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <lsm6dsl_read_reg>:


static uint8_t lsm6dsl_read_reg(uint8_t reg, uint8_t* value)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    // write the register address
    status = i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1);
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	2301      	movs	r3, #1
 8000e64:	2100      	movs	r1, #0
 8000e66:	206a      	movs	r0, #106	@ 0x6a
 8000e68:	f7ff fe96 	bl	8000b98 <i2c_transaction>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
    if (status != 0)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <lsm6dsl_read_reg+0x26>
        return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	e006      	b.n	8000e88 <lsm6dsl_read_reg+0x34>

    // read one byte from register
    return i2c_transaction(LSM6DSL_ADDR, 1, value, 1);
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	206a      	movs	r0, #106	@ 0x6a
 8000e82:	f7ff fe89 	bl	8000b98 <i2c_transaction>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <lsm6dsl_init>:
void lsm6dsl_init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
    uint8_t status;
    uint8_t who_am_i = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	71bb      	strb	r3, [r7, #6]

    // Verify sensor identity
    status = lsm6dsl_read_reg(WHO_AM_I_REG, &who_am_i);
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f7ff ffd8 	bl	8000e54 <lsm6dsl_read_reg>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
    if (status != 0)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <lsm6dsl_init+0x2a>
    {
        printf("LSM6DSL: Error reading WHO_AM_I register (err %d)\n", status);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481c      	ldr	r0, [pc, #112]	@ (8000f24 <lsm6dsl_init+0x94>)
 8000eb4:	f002 fef2 	bl	8003c9c <iprintf>
 8000eb8:	e031      	b.n	8000f1e <lsm6dsl_init+0x8e>
        return;
    }
    if (who_am_i != WHO_AM_I_EXPECTED)
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ebe:	d005      	beq.n	8000ecc <lsm6dsl_init+0x3c>
    {
        printf("LSM6DSL: Unexpected WHO_AM_I value: 0x%02X\n", who_am_i);
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <lsm6dsl_init+0x98>)
 8000ec6:	f002 fee9 	bl	8003c9c <iprintf>
 8000eca:	e004      	b.n	8000ed6 <lsm6dsl_init+0x46>
        // Depending on your application, you might want to halt further operation here
    }
    else
    {
        printf("LSM6DSL: WHO_AM_I = 0x%02X\n", who_am_i);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <lsm6dsl_init+0x9c>)
 8000ed2:	f002 fee3 	bl	8003c9c <iprintf>
    }

    // Enable register address auto-increment by setting IF_INC in CTRL3_C.
    status = lsm6dsl_write_reg(CTRL3_C, 0x04);
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	2012      	movs	r0, #18
 8000eda:	f7ff ffa3 	bl	8000e24 <lsm6dsl_write_reg>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
    if (status != 0)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <lsm6dsl_init+0x64>
    {
        printf("LSM6DSL: Error configuring CTRL3_C (err %d)\n", status);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <lsm6dsl_init+0xa0>)
 8000eee:	f002 fed5 	bl	8003c9c <iprintf>
 8000ef2:	e002      	b.n	8000efa <lsm6dsl_init+0x6a>
    }
    else
    {
        printf("LSM6DSL: CTRL3_C configured (auto-increment enabled)\n");
 8000ef4:	480f      	ldr	r0, [pc, #60]	@ (8000f34 <lsm6dsl_init+0xa4>)
 8000ef6:	f002 ff39 	bl	8003d6c <puts>
    }

    //Configure the accelerometer.
    status = lsm6dsl_write_reg(CTRL1_XL, 0x50);
 8000efa:	2150      	movs	r1, #80	@ 0x50
 8000efc:	2010      	movs	r0, #16
 8000efe:	f7ff ff91 	bl	8000e24 <lsm6dsl_write_reg>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    if (status != 0)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <lsm6dsl_init+0x88>
    {
        printf("LSM6DSL: Error writing CTRL1_XL (err %d)\n", status);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <lsm6dsl_init+0xa8>)
 8000f12:	f002 fec3 	bl	8003c9c <iprintf>
 8000f16:	e002      	b.n	8000f1e <lsm6dsl_init+0x8e>
    }
    else
    {
        printf("LSM6DSL: CTRL1_XL configured (0x50)\n");
 8000f18:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <lsm6dsl_init+0xac>)
 8000f1a:	f002 ff27 	bl	8003d6c <puts>
    }
}
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08004c94 	.word	0x08004c94
 8000f28:	08004cc8 	.word	0x08004cc8
 8000f2c:	08004cf4 	.word	0x08004cf4
 8000f30:	08004d10 	.word	0x08004d10
 8000f34:	08004d40 	.word	0x08004d40
 8000f38:	08004d78 	.word	0x08004d78
 8000f3c:	08004da4 	.word	0x08004da4

08000f40 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    /* Use the base register address.
       With auto-increment enabled (via CTRL3_C), the sensor will automatically
       increment the register pointer after each byte.
    */
    uint8_t reg = OUTX_L_XL; 
 8000f4c:	2328      	movs	r3, #40	@ 0x28
 8000f4e:	75fb      	strb	r3, [r7, #23]

    //register address
    status = i2c_transaction(LSM6DSL_ADDR, 0, &reg, 1);
 8000f50:	f107 0217 	add.w	r2, r7, #23
 8000f54:	2301      	movs	r3, #1
 8000f56:	2100      	movs	r1, #0
 8000f58:	206a      	movs	r0, #106	@ 0x6a
 8000f5a:	f7ff fe1d 	bl	8000b98 <i2c_transaction>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	77fb      	strb	r3, [r7, #31]
    if (status != 0)
 8000f62:	7ffb      	ldrb	r3, [r7, #31]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <lsm6dsl_read_xyz+0x34>
    {
        printf("LSM6DSL: Error setting up read address (err %d)\n", status);
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4819      	ldr	r0, [pc, #100]	@ (8000fd4 <lsm6dsl_read_xyz+0x94>)
 8000f6e:	f002 fe95 	bl	8003c9c <iprintf>
        return;
 8000f72:	e02c      	b.n	8000fce <lsm6dsl_read_xyz+0x8e>
    }

    // Read 6 consecutive bytes: X_L, X_H, Y_L, Y_H, Z_L, Z_H
    status = i2c_transaction(LSM6DSL_ADDR, 1, data, 6);
 8000f74:	f107 0218 	add.w	r2, r7, #24
 8000f78:	2306      	movs	r3, #6
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	206a      	movs	r0, #106	@ 0x6a
 8000f7e:	f7ff fe0b 	bl	8000b98 <i2c_transaction>
 8000f82:	4603      	mov	r3, r0
 8000f84:	77fb      	strb	r3, [r7, #31]
    if (status != 0)
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <lsm6dsl_read_xyz+0x58>
    {
        printf("LSM6DSL: Error reading acceleration data (err %d)\n", status);
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	@ (8000fd8 <lsm6dsl_read_xyz+0x98>)
 8000f92:	f002 fe83 	bl	8003c9c <iprintf>
        return;
 8000f96:	e01a      	b.n	8000fce <lsm6dsl_read_xyz+0x8e>
    }

    // Combine low and high bytes for each axis (little-endian format)
    *x = (int16_t)((data[1] << 8) | data[0]);
 8000f98:	7e7b      	ldrb	r3, [r7, #25]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	7e3b      	ldrb	r3, [r7, #24]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((data[3] << 8) | data[2]);
 8000faa:	7efb      	ldrb	r3, [r7, #27]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7ebb      	ldrb	r3, [r7, #26]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((data[5] << 8) | data[4]);
 8000fbc:	7f7b      	ldrb	r3, [r7, #29]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	7f3b      	ldrb	r3, [r7, #28]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	801a      	strh	r2, [r3, #0]
}
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08004dc8 	.word	0x08004dc8
 8000fd8:	08004dfc 	.word	0x08004dfc

08000fdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ffc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001004:	e000      	b.n	8001008 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001006:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001008:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001012:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <TIM2_IRQHandler>:
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

/* ---------------- Timer Interrupt Handler ---------------- */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8001030:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d012      	beq.n	8001064 <TIM2_IRQHandler+0x38>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 800103e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6113      	str	r3, [r2, #16]
        leds_set(lost_mode ? 1 : 0);
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <TIM2_IRQHandler+0x3c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff feaa 	bl	8000db8 <leds_set>
    }
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000350 	.word	0x20000350

0800106c <_write>:

/* ---------------- Redirect printf to ITM ---------------- */
int _write(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e009      	b.n	8001092 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffa8 	bl	8000fdc <ITM_SendChar>
    for (int i = 0; i < len; i++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf1      	blt.n	800107e <_write+0x12>
    }
    return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <sendBleMessage>:

/* ---------------- BLE Message Function ---------------- */
void sendBleMessage(uint32_t secondsMissing) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b098      	sub	sp, #96	@ 0x60
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
    char fullMessage[64];
    snprintf(fullMessage, sizeof(fullMessage), "PrivTag DS12345 lost for %lu sec", secondsMissing);
 80010ac:	f107 000c 	add.w	r0, r7, #12
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001130 <sendBleMessage+0x8c>)
 80010b4:	2140      	movs	r1, #64	@ 0x40
 80010b6:	f002 fcef 	bl	8003a98 <sniprintf>

    int messageLength = strlen(fullMessage);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f886 	bl	80001d0 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	653b      	str	r3, [r7, #80]	@ 0x50
    int bytesSent = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	657b      	str	r3, [r7, #84]	@ 0x54

    printf("[BLE] Sending message: %s\n", fullMessage);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <sendBleMessage+0x90>)
 80010d4:	f002 fde2 	bl	8003c9c <iprintf>

    while (bytesSent < messageLength) {
 80010d8:	e021      	b.n	800111e <sendBleMessage+0x7a>
        int chunkSize = (messageLength - bytesSent) > BLE_MAX_PACKET_SIZE ? BLE_MAX_PACKET_SIZE : (messageLength - bytesSent);
 80010da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80010dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b14      	cmp	r3, #20
 80010e2:	bfa8      	it	ge
 80010e4:	2314      	movge	r3, #20
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        printf("[BLE] Sending chunk: %.*s\n", chunkSize, &fullMessage[bytesSent]);
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010ee:	4413      	add	r3, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <sendBleMessage+0x94>)
 80010f6:	f002 fdd1 	bl	8003c9c <iprintf>

        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, chunkSize, (uint8_t *)&fullMessage[bytesSent]);
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001100:	4413      	add	r3, r2
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001106:	2200      	movs	r2, #0
 8001108:	490c      	ldr	r1, [pc, #48]	@ (800113c <sendBleMessage+0x98>)
 800110a:	480d      	ldr	r0, [pc, #52]	@ (8001140 <sendBleMessage+0x9c>)
 800110c:	f7ff fc14 	bl	8000938 <updateCharValue>

        bytesSent += chunkSize;
 8001110:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001114:	4413      	add	r3, r2
 8001116:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_Delay(50);  // Prevent BLE flooding
 8001118:	2032      	movs	r0, #50	@ 0x32
 800111a:	f000 fd0d 	bl	8001b38 <HAL_Delay>
    while (bytesSent < messageLength) {
 800111e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001122:	429a      	cmp	r2, r3
 8001124:	dbd9      	blt.n	80010da <sendBleMessage+0x36>
    }
}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3758      	adds	r7, #88	@ 0x58
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	08004e30 	.word	0x08004e30
 8001134:	08004e54 	.word	0x08004e54
 8001138:	08004e70 	.word	0x08004e70
 800113c:	200002dc 	.word	0x200002dc
 8001140:	200002d4 	.word	0x200002d4

08001144 <main>:

/* ---------------- Main Function ---------------- */
int main(void)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
    /* HAL initialization and system clock configuration */
    HAL_Init();
 800114a:	f000 fc80 	bl	8001a4e <HAL_Init>
    SystemClock_Config();
 800114e:	f000 f937 	bl	80013c0 <SystemClock_Config>
    MX_GPIO_Init();
 8001152:	f000 f9b9 	bl	80014c8 <MX_GPIO_Init>
    MX_SPI3_Init();
 8001156:	f000 f979 	bl	800144c <MX_SPI3_Init>

    /* Initialize peripherals */
    leds_init();
 800115a:	f7ff fdc7 	bl	8000cec <leds_init>
    timer_init(TIM2);
 800115e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001162:	f000 fbe9 	bl	8001938 <timer_init>
    timer_set_ms(TIM2, 50);
 8001166:	2132      	movs	r1, #50	@ 0x32
 8001168:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800116c:	f000 fc1a 	bl	80019a4 <timer_set_ms>
    i2c_init();
 8001170:	f7ff fcb2 	bl	8000ad8 <i2c_init>
    lsm6dsl_init();
 8001174:	f7ff fe8c 	bl	8000e90 <lsm6dsl_init>

    /* Get initial accelerometer reading */
    lsm6dsl_read_xyz(&prev_ax, &prev_ay, &prev_az);
 8001178:	4a80      	ldr	r2, [pc, #512]	@ (800137c <main+0x238>)
 800117a:	4981      	ldr	r1, [pc, #516]	@ (8001380 <main+0x23c>)
 800117c:	4881      	ldr	r0, [pc, #516]	@ (8001384 <main+0x240>)
 800117e:	f7ff fedf 	bl	8000f40 <lsm6dsl_read_xyz>

    printf("DS12345 PrivTag started. Monitoring movement...\n");
 8001182:	4881      	ldr	r0, [pc, #516]	@ (8001388 <main+0x244>)
 8001184:	f002 fdf2 	bl	8003d6c <puts>

    /* Main loop */
    while (1)
    {
        /* Read accelerometer data */
        lsm6dsl_read_xyz(&ax, &ay, &az);
 8001188:	4a80      	ldr	r2, [pc, #512]	@ (800138c <main+0x248>)
 800118a:	4981      	ldr	r1, [pc, #516]	@ (8001390 <main+0x24c>)
 800118c:	4881      	ldr	r0, [pc, #516]	@ (8001394 <main+0x250>)
 800118e:	f7ff fed7 	bl	8000f40 <lsm6dsl_read_xyz>

        int diff_x = abs(ax - prev_ax);
 8001192:	4b80      	ldr	r3, [pc, #512]	@ (8001394 <main+0x250>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	461a      	mov	r2, r3
 800119a:	4b7a      	ldr	r3, [pc, #488]	@ (8001384 <main+0x240>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfb8      	it	lt
 80011a6:	425b      	neglt	r3, r3
 80011a8:	60fb      	str	r3, [r7, #12]
        int diff_y = abs(ay - prev_ay);
 80011aa:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <main+0x24c>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b73      	ldr	r3, [pc, #460]	@ (8001380 <main+0x23c>)
 80011b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfb8      	it	lt
 80011be:	425b      	neglt	r3, r3
 80011c0:	60bb      	str	r3, [r7, #8]
        int diff_z = abs(az - prev_az);
 80011c2:	4b72      	ldr	r3, [pc, #456]	@ (800138c <main+0x248>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b6c      	ldr	r3, [pc, #432]	@ (800137c <main+0x238>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	425b      	neglt	r3, r3
 80011d8:	607b      	str	r3, [r7, #4]

        /* Static detection */
        if (diff_x < MOVEMENT_THRESHOLD && diff_y < MOVEMENT_THRESHOLD && diff_z < MOVEMENT_THRESHOLD)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80011e0:	da0d      	bge.n	80011fe <main+0xba>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80011e8:	da09      	bge.n	80011fe <main+0xba>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80011f0:	da05      	bge.n	80011fe <main+0xba>
        {
            static_count++;
 80011f2:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <main+0x254>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a67      	ldr	r2, [pc, #412]	@ (8001398 <main+0x254>)
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e03d      	b.n	800127a <main+0x136>
        }
        else
        {
            /* 🔹 Movement detected: Exit lost mode & Destroy BLE */
            if (lost_mode)
 80011fe:	4b67      	ldr	r3, [pc, #412]	@ (800139c <main+0x258>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d038      	beq.n	800127a <main+0x136>
            {
                printf("[LOST MODE] Movement detected: Exiting lost mode.\n");
 8001208:	4865      	ldr	r0, [pc, #404]	@ (80013a0 <main+0x25c>)
 800120a:	f002 fdaf 	bl	8003d6c <puts>

                lost_mode = 0;
 800120e:	4b63      	ldr	r3, [pc, #396]	@ (800139c <main+0x258>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
                static_count = 0;
 8001214:	4b60      	ldr	r3, [pc, #384]	@ (8001398 <main+0x254>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
                message_timer = 0;
 800121a:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <main+0x260>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
                lost_seconds = 0;
 8001220:	4b61      	ldr	r3, [pc, #388]	@ (80013a8 <main+0x264>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

                /* 🔹 Force BLE to Disconnect & Destroy */
                printf("[BLE] Disconnecting and making non-discoverable...\n");
 8001226:	4861      	ldr	r0, [pc, #388]	@ (80013ac <main+0x268>)
 8001228:	f002 fda0 	bl	8003d6c <puts>
                disconnectBLE();
 800122c:	f7ff fbd8 	bl	80009e0 <disconnectBLE>
                HAL_Delay(100);
 8001230:	2064      	movs	r0, #100	@ 0x64
 8001232:	f000 fc81 	bl	8001b38 <HAL_Delay>
                setDiscoverability(0);  // Stop BLE advertisements
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fc28 	bl	8000a8c <setDiscoverability>
                HAL_Delay(100);
 800123c:	2064      	movs	r0, #100	@ 0x64
 800123e:	f000 fc7b 	bl	8001b38 <HAL_Delay>

                /* 🔥 Destroy BLE completely */
                HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f000 ff6c 	bl	8002128 <HAL_GPIO_WritePin>
                HAL_Delay(500);
 8001250:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001254:	f000 fc70 	bl	8001b38 <HAL_Delay>
                HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800125e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001262:	f000 ff61 	bl	8002128 <HAL_GPIO_WritePin>
                HAL_Delay(500);
 8001266:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800126a:	f000 fc65 	bl	8001b38 <HAL_Delay>

                printf("[BLE] BLE module completely shut down.\n");
 800126e:	4850      	ldr	r0, [pc, #320]	@ (80013b0 <main+0x26c>)
 8001270:	f002 fd7c 	bl	8003d6c <puts>

                leds_set(0);  // Turn off LED when exiting lost mode
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fd9f 	bl	8000db8 <leds_set>
            }
        }

        /* Enter Lost Mode */
        if (static_count >= LOST_MODE_THRESHOLD)
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <main+0x254>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001282:	d330      	bcc.n	80012e6 <main+0x1a2>
        {
            if (!lost_mode)
 8001284:	4b45      	ldr	r3, [pc, #276]	@ (800139c <main+0x258>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d12b      	bne.n	80012e6 <main+0x1a2>
            {
                lost_mode = 1;
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <main+0x258>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]

                /* 🔹 Initialize BLE in Lost Mode */
                printf("[BLE] Initializing BLE (Entering Lost Mode)...\n");
 8001294:	4847      	ldr	r0, [pc, #284]	@ (80013b4 <main+0x270>)
 8001296:	f002 fd69 	bl	8003d6c <puts>

                /* Reset BLE before enabling it */
                HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f000 ff40 	bl	8002128 <HAL_GPIO_WritePin>
                HAL_Delay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ac:	f000 fc44 	bl	8001b38 <HAL_Delay>
                HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f000 ff35 	bl	8002128 <HAL_GPIO_WritePin>
                HAL_Delay(500);
 80012be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012c2:	f000 fc39 	bl	8001b38 <HAL_Delay>

                ble_init();
 80012c6:	f7fe ffdb 	bl	8000280 <ble_init>
                HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	@ 0x64
 80012cc:	f000 fc34 	bl	8001b38 <HAL_Delay>
                setDiscoverability(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fbdb 	bl	8000a8c <setDiscoverability>
                HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	@ 0x64
 80012d8:	f000 fc2e 	bl	8001b38 <HAL_Delay>
                setConnectable();
 80012dc:	f7ff f9e6 	bl	80006ac <setConnectable>

                printf("[LOST MODE] BLE is now connectable.\n");
 80012e0:	4835      	ldr	r0, [pc, #212]	@ (80013b8 <main+0x274>)
 80012e2:	f002 fd43 	bl	8003d6c <puts>
            }
        }

        /* Send BLE message every 10 seconds */
        if (lost_mode)
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <main+0x258>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <main+0x1d8>
        {
            message_timer++;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <main+0x260>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a2b      	ldr	r2, [pc, #172]	@ (80013a4 <main+0x260>)
 80012f8:	6013      	str	r3, [r2, #0]
            if (message_timer >= MESSAGE_INTERVAL_COUNT)
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <main+0x260>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b63      	cmp	r3, #99	@ 0x63
 8001300:	d90c      	bls.n	800131c <main+0x1d8>
            {
                lost_seconds += 10;
 8001302:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <main+0x264>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	330a      	adds	r3, #10
 8001308:	4a27      	ldr	r2, [pc, #156]	@ (80013a8 <main+0x264>)
 800130a:	6013      	str	r3, [r2, #0]
                sendBleMessage(lost_seconds);
 800130c:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <main+0x264>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fec7 	bl	80010a4 <sendBleMessage>
                message_timer = 0;
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <main+0x260>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Store previous accelerometer values */
        prev_ax = ax;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <main+0x250>)
 800131e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <main+0x240>)
 8001324:	801a      	strh	r2, [r3, #0]
        prev_ay = ay;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <main+0x24c>)
 8001328:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <main+0x23c>)
 800132e:	801a      	strh	r2, [r3, #0]
        prev_az = az;
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <main+0x248>)
 8001332:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <main+0x238>)
 8001338:	801a      	strh	r2, [r3, #0]

        /* Debug output */
        printf("[STATUS] Accel: X=%d, Y=%d, Z=%d, static_count=%lu, lost_mode=%d, lost_seconds=%lu\n",
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <main+0x250>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	4618      	mov	r0, r3
 8001342:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <main+0x24c>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	461c      	mov	r4, r3
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <main+0x248>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	461d      	mov	r5, r3
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <main+0x254>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a11      	ldr	r2, [pc, #68]	@ (800139c <main+0x258>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <main+0x264>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	9202      	str	r2, [sp, #8]
 8001364:	9101      	str	r1, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	462b      	mov	r3, r5
 800136a:	4622      	mov	r2, r4
 800136c:	4601      	mov	r1, r0
 800136e:	4813      	ldr	r0, [pc, #76]	@ (80013bc <main+0x278>)
 8001370:	f002 fc94 	bl	8003c9c <iprintf>
               ax, ay, az, static_count, lost_mode, lost_seconds);

        HAL_Delay(50);  // Reduced delay for responsiveness
 8001374:	2032      	movs	r0, #50	@ 0x32
 8001376:	f000 fbdf 	bl	8001b38 <HAL_Delay>
    {
 800137a:	e705      	b.n	8001188 <main+0x44>
 800137c:	20000366 	.word	0x20000366
 8001380:	20000364 	.word	0x20000364
 8001384:	20000362 	.word	0x20000362
 8001388:	08004e8c 	.word	0x08004e8c
 800138c:	20000360 	.word	0x20000360
 8001390:	2000035e 	.word	0x2000035e
 8001394:	2000035c 	.word	0x2000035c
 8001398:	2000034c 	.word	0x2000034c
 800139c:	20000350 	.word	0x20000350
 80013a0:	08004ebc 	.word	0x08004ebc
 80013a4:	20000354 	.word	0x20000354
 80013a8:	20000358 	.word	0x20000358
 80013ac:	08004ef0 	.word	0x08004ef0
 80013b0:	08004f24 	.word	0x08004f24
 80013b4:	08004f4c 	.word	0x08004f4c
 80013b8:	08004f7c 	.word	0x08004f7c
 80013bc:	08004fa0 	.word	0x08004fa0

080013c0 <SystemClock_Config>:
}


/* ---------------- System Clock Configuration ---------------- */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	@ 0x58
 80013c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2244      	movs	r2, #68	@ 0x44
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fcd4 	bl	8003d7c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013e6:	f000 fee9 	bl	80021bc <HAL_PWREx_ControlVoltageScaling>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x34>
    {
        Error_Handler();
 80013f0:	f000 f8fc 	bl	80015ec <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013f4:	2310      	movs	r3, #16
 80013f6:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001400:	2370      	movs	r3, #112	@ 0x70
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f000 ff2b 	bl	8002268 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x5c>
    {
        Error_Handler();
 8001418:	f000 f8e8 	bl	80015ec <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800141c:	230f      	movs	r3, #15
 800141e:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f001 faf3 	bl	8002a20 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x84>
    {
        Error_Handler();
 8001440:	f000 f8d4 	bl	80015ec <Error_Handler>
    }
}
 8001444:	bf00      	nop
 8001446:	3758      	adds	r7, #88	@ 0x58
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <MX_SPI3_Init>:

/* ---------------- SPI3 Initialization ------------------ */
static void MX_SPI3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    hspi3.Instance = SPI3;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MX_SPI3_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800145c:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001466:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800146a:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_SPI3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_SPI3_Init+0x74>)
 800147a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147e:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_SPI3_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_SPI3_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_SPI3_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_SPI3_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_SPI3_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_SPI3_Init+0x74>)
 80014ac:	f001 fca4 	bl	8002df8 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI3_Init+0x6e>
    {
        Error_Handler();
 80014b6:	f000 f899 	bl	80015ec <Error_Handler>
    }
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200002e4 	.word	0x200002e4
 80014c4:	40003c00 	.word	0x40003c00

080014c8 <MX_GPIO_Init>:

/* ---------------- GPIO Initialization ------------------ */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

    /* Enable GPIO Ports Clock */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <MX_GPIO_Init+0x118>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	4a3f      	ldr	r2, [pc, #252]	@ (80015e0 <MX_GPIO_Init+0x118>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ea:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <MX_GPIO_Init+0x118>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <MX_GPIO_Init+0x118>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	4a39      	ldr	r2, [pc, #228]	@ (80015e0 <MX_GPIO_Init+0x118>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <MX_GPIO_Init+0x118>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a2d      	ldr	r2, [pc, #180]	@ (80015e0 <MX_GPIO_Init+0x118>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a27      	ldr	r2, [pc, #156]	@ (80015e0 <MX_GPIO_Init+0x118>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_GPIO_Init+0x118>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

    /* Configure BLE_INT_Pin (for BLE interrupt) */
    GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001556:	2340      	movs	r3, #64	@ 0x40
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	481e      	ldr	r0, [pc, #120]	@ (80015e4 <MX_GPIO_Init+0x11c>)
 800156c:	f000 fc1a 	bl	8001da4 <HAL_GPIO_Init>

    /* Configure GPIO_LED1_Pin and BLE_RESET_Pin as outputs */
    GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
 8001570:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158c:	f000 fc0a 	bl	8001da4 <HAL_GPIO_Init>

    /* Configure BLE_CS_Pin as output */
    GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	@ (80015e8 <MX_GPIO_Init+0x120>)
 80015aa:	f000 fbfb 	bl	8001da4 <HAL_GPIO_Init>

    /* Set initial levels for BLE_CS and BLE_RESET */
    HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <MX_GPIO_Init+0x120>)
 80015b6:	f000 fdb7 	bl	8002128 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c4:	f000 fdb0 	bl	8002128 <HAL_GPIO_WritePin>

    /* Configure and enable EXTI interrupt for BLE_INT */
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2017      	movs	r0, #23
 80015ce:	f000 fbb2 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015d2:	2017      	movs	r0, #23
 80015d4:	f000 fbcb 	bl	8001d6e <HAL_NVIC_EnableIRQ>
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48001000 	.word	0x48001000
 80015e8:	48000c00 	.word	0x48000c00

080015ec <Error_Handler>:

/* ---------------- Error Handler ------------------ */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
    __disable_irq();
    while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <Error_Handler+0x8>

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <HAL_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	@ 0x60
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a08      	ldr	r2, [pc, #32]	@ (800163c <HAL_MspInit+0x44>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_SPI_MspInit+0x7c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d128      	bne.n	80016b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	4a16      	ldr	r2, [pc, #88]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 8001668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800166c:	6593      	str	r3, [r2, #88]	@ 0x58
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_SPI_MspInit+0x80>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001692:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a4:	2306      	movs	r3, #6
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_SPI_MspInit+0x84>)
 80016b0:	f000 fb78 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40003c00 	.word	0x40003c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000800 	.word	0x48000800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171e:	f000 f9eb 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <EXTI9_5_IRQHandler+0x14>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001732:	2040      	movs	r0, #64	@ 0x40
 8001734:	f000 fd10 	bl	8002158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000348 	.word	0x20000348

08001740 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x50>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x16>
		heap_end = &end;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <_sbrk+0x50>)
 800178e:	4a10      	ldr	r2, [pc, #64]	@ (80017d0 <_sbrk+0x54>)
 8001790:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <_sbrk+0x50>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <_sbrk+0x50>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	466a      	mov	r2, sp
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d907      	bls.n	80017b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80017a6:	f002 fb01 	bl	8003dac <__errno>
 80017aa:	4603      	mov	r3, r0
 80017ac:	220c      	movs	r2, #12
 80017ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b4:	e006      	b.n	80017c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <_sbrk+0x50>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a03      	ldr	r2, [pc, #12]	@ (80017cc <_sbrk+0x50>)
 80017c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000368 	.word	0x20000368
 80017d0:	200004c0 	.word	0x200004c0

080017d4 <_close>:

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
	return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_isatty>:

int _isatty(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
	return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <SystemInit+0x64>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001846:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <SystemInit+0x64>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <SystemInit+0x68>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a13      	ldr	r2, [pc, #76]	@ (80018a4 <SystemInit+0x68>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <SystemInit+0x68>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <SystemInit+0x68>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <SystemInit+0x68>)
 8001868:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800186c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001870:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <SystemInit+0x68>)
 8001874:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001878:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <SystemInit+0x68>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <SystemInit+0x68>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001884:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <SystemInit+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <SystemInit+0x64>)
 800188e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001892:	609a      	str	r2, [r3, #8]
#endif
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	40021000 	.word	0x40021000

080018a8 <__NVIC_EnableIRQ>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  // TODO implement this
  //Enable the clock for TIM2
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <timer_init+0x68>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <timer_init+0x68>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
  //Disable the timer while configuring
  timer->CR1 &= ~TIM_CR1_CEN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0201 	bic.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]
  //Reset the counter and interrupt flags.
  timer->CNT = 0;    // Current timer count
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  timer->SR  = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  //Set up timer to auto-reload. By default, ARR is used as the reload.
  timer->ARR = 0xFFFF;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196a:	62da      	str	r2, [r3, #44]	@ 0x2c
  timer->DIER |= TIM_DIER_UIE; // Update interrupt enable
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]

  //Configure the NVIC to enable the TIM2 global interrupt.
  NVIC_SetPriority(TIM2_IRQn, 2);  // Priority level can be changed as needed
 8001978:	2102      	movs	r1, #2
 800197a:	201c      	movs	r0, #28
 800197c:	f7ff ffb2 	bl	80018e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001980:	201c      	movs	r0, #28
 8001982:	f7ff ff91 	bl	80018a8 <__NVIC_EnableIRQ>

  //Set the prescaler to divide the timer clock.
  // The default system clock after reset is ~4 MHz on STM32L475.
  //set PSC = 3, the timer clock becomes 4 MHz / (3+1) = 1 MHz,
  //so each timer tick is 1 microsecond.
  timer->PSC = 3;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28

     // enable the timer
  timer->CR1 |= TIM_CR1_CEN;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	601a      	str	r2, [r3, #0]

}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000

080019a4 <timer_set_ms>:
  // TODO implement this
  timer->CNT = 0;
}

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
  // TODO implement this
	//Disable the timer while updating the ARR register to avoid mid-update issues.
	timer->CR1 &= ~TIM_CR1_CEN;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 0201 	bic.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]

	    // Compute the auto-reload value for the desired period.
	    //    With PSC = 3, the timer ticks at 1 MHz (1 tick = 1 microsecond).
	    //    So for 'period_ms' milliseconds, the total ticks = period_ms * 1000.
	    //    The timer counts from 0 up to ARR. set ARR = (ticks - 1).
	uint32_t ticks = period_ms * 1000UL; // Convert ms to microseconds
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	60fb      	str	r3, [r7, #12]
	if (ticks > 0xFFFF)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ce:	d302      	bcc.n	80019d6 <timer_set_ms+0x32>
		{
	        ticks = 0xFFFF; // clamp to max if needed
 80019d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d4:	60fb      	str	r3, [r7, #12]
	    }

	timer->ARR = ticks - 1; // Because counting starts at 0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Reset the counter to ensure a fresh start for the new period
	timer->CNT = 0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	@ 0x24

	//Re-enable the timer now that ARR is updated
	timer->CR1 |= TIM_CR1_CEN;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff ff1c 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f002 f9c5 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2e:	f7ff fb89 	bl	8001144 <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001a40:	08005078 	.word	0x08005078
  ldr r2, =_sbss
 8001a44:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001a48:	200004bc 	.word	0x200004bc

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>

08001a4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f961 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f80e 	bl	8001a80 <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e001      	b.n	8001a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a70:	f7ff fdc2 	bl	80015f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_InitTick+0x6c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_InitTick+0x70>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_InitTick+0x6c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f96d 	bl	8001d8a <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d809      	bhi.n	8001ad0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ac4:	f000 f937 	bl	8001d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_InitTick+0x74>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e007      	b.n	8001ae0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e004      	b.n	8001ae0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e001      	b.n	8001ae0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000014c 	.word	0x2000014c
 8001af0:	20000144 	.word	0x20000144
 8001af4:	20000148 	.word	0x20000148

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	2000014c 	.word	0x2000014c
 8001b1c:	2000036c 	.word	0x2000036c

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000036c 	.word	0x2000036c

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000014c 	.word	0x2000014c

08001b80 <__NVIC_SetPriorityGrouping>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	@ (8001c1c <__NVIC_EnableIRQ+0x38>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	@ (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	@ 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff29 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff3e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff31 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e17f      	b.n	80020b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8171 	beq.w	80020ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x40>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0201 	and.w	r2, r3, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d118      	bne.n	8001e84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0201 	and.w	r2, r3, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d017      	beq.n	8001ec0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d123      	bne.n	8001f14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	6939      	ldr	r1, [r7, #16]
 8001f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80ac 	beq.w	80020ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	4b5f      	ldr	r3, [pc, #380]	@ (80020d4 <HAL_GPIO_Init+0x330>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80020d4 <HAL_GPIO_Init+0x330>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f62:	4b5c      	ldr	r3, [pc, #368]	@ (80020d4 <HAL_GPIO_Init+0x330>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_GPIO_Init+0x334>)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x242>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80020dc <HAL_GPIO_Init+0x338>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x23e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80020e0 <HAL_GPIO_Init+0x33c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x23a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4d      	ldr	r2, [pc, #308]	@ (80020e4 <HAL_GPIO_Init+0x340>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x236>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80020e8 <HAL_GPIO_Init+0x344>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x232>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80020ec <HAL_GPIO_Init+0x348>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x22e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80020f0 <HAL_GPIO_Init+0x34c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x22a>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e00c      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x244>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ff8:	4937      	ldr	r1, [pc, #220]	@ (80020d8 <HAL_GPIO_Init+0x334>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002006:	4b3b      	ldr	r3, [pc, #236]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800202a:	4a32      	ldr	r2, [pc, #200]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002054:	4a27      	ldr	r2, [pc, #156]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800207e:	4a1d      	ldr	r2, [pc, #116]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020a8:	4a12      	ldr	r2, [pc, #72]	@ (80020f4 <HAL_GPIO_Init+0x350>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f47f ae78 	bne.w	8001db4 <HAL_GPIO_Init+0x10>
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000800 	.word	0x48000800
 80020e4:	48000c00 	.word	0x48000c00
 80020e8:	48001000 	.word	0x48001000
 80020ec:	48001400 	.word	0x48001400
 80020f0:	48001800 	.word	0x48001800
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002144:	e002      	b.n	800214c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f806 	bl	8002188 <HAL_GPIO_EXTI_Callback>
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ca:	d130      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d8:	d038      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	4b20      	ldr	r3, [pc, #128]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e2:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2232      	movs	r2, #50	@ 0x32
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	3301      	adds	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002200:	e002      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002214:	d102      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f2      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002228:	d110      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223a:	d007      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002244:	4a05      	ldr	r2, [pc, #20]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000
 8002260:	20000144 	.word	0x20000144
 8002264:	431bde83 	.word	0x431bde83

08002268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e3ca      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80e4 	beq.w	8002464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4a>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f040 808b 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8087 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3a2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_RCC_OscConfig+0x7c>
 80022da:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_OscConfig+0x88>
 80022e4:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d223      	bcs.n	800233c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fd1d 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e383      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b73      	ldr	r3, [pc, #460]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a72      	ldr	r2, [pc, #456]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	496d      	ldr	r1, [pc, #436]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b6c      	ldr	r3, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	4968      	ldr	r1, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e025      	b.n	8002388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4960      	ldr	r1, [pc, #384]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	495b      	ldr	r1, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fcdd 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e343      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002388:	f000 fc4a 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4950      	ldr	r1, [pc, #320]	@ (80024dc <HAL_RCC_OscConfig+0x274>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a4e      	ldr	r2, [pc, #312]	@ (80024e0 <HAL_RCC_OscConfig+0x278>)
 80023a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a8:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb67 	bl	8001a80 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d052      	beq.n	8002462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	e327      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c8:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a42      	ldr	r2, [pc, #264]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fba4 	bl	8001b20 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023dc:	f7ff fba0 	bl	8001b20 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e310      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ee:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b37      	ldr	r3, [pc, #220]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a36      	ldr	r2, [pc, #216]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4931      	ldr	r1, [pc, #196]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	492c      	ldr	r1, [pc, #176]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e01a      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242e:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a29      	ldr	r2, [pc, #164]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243a:	f7ff fb71 	bl	8001b20 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002442:	f7ff fb6d 	bl	8001b20 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e2dd      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x1da>
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d074      	beq.n	800255a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x21a>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d10e      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d064      	beq.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d160      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e2ba      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x24a>
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ba:	d115      	bne.n	80024e8 <HAL_RCC_OscConfig+0x280>
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a02      	ldr	r2, [pc, #8]	@ (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08004ff4 	.word	0x08004ff4
 80024e0:	20000144 	.word	0x20000144
 80024e4:	20000148 	.word	0x20000148
 80024e8:	4ba0      	ldr	r3, [pc, #640]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a9f      	ldr	r2, [pc, #636]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b9d      	ldr	r3, [pc, #628]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9c      	ldr	r2, [pc, #624]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fb0a 	bl	8001b20 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fb06 	bl	8001b20 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e276      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b92      	ldr	r3, [pc, #584]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2a8>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff faf6 	bl	8001b20 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff faf2 	bl	8001b20 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e262      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254a:	4b88      	ldr	r3, [pc, #544]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x2d0>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d060      	beq.n	8002628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x310>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d116      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	4b7c      	ldr	r3, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x328>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e23f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b76      	ldr	r3, [pc, #472]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4973      	ldr	r1, [pc, #460]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e040      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d023      	beq.n	80025f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ae:	4b6f      	ldr	r3, [pc, #444]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6e      	ldr	r2, [pc, #440]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff fab1 	bl	8001b20 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7ff faad 	bl	8001b20 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e21d      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	4b65      	ldr	r3, [pc, #404]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b62      	ldr	r3, [pc, #392]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	495f      	ldr	r1, [pc, #380]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b5d      	ldr	r3, [pc, #372]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5c      	ldr	r2, [pc, #368]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80025fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7ff fa8d 	bl	8001b20 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7ff fa89 	bl	8001b20 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1f9      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	4b53      	ldr	r3, [pc, #332]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03c      	beq.n	80026ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263c:	4b4b      	ldr	r3, [pc, #300]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	4a4a      	ldr	r2, [pc, #296]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7ff fa68 	bl	8001b20 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7ff fa64 	bl	8001b20 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1d4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002666:	4b41      	ldr	r3, [pc, #260]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCC_OscConfig+0x3ec>
 8002674:	e01b      	b.n	80026ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267c:	4a3b      	ldr	r2, [pc, #236]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7ff fa4b 	bl	8001b20 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268e:	f7ff fa47 	bl	8001b20 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1b7      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a0:	4b32      	ldr	r3, [pc, #200]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a6 	beq.w	8002808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026c0:	4b2a      	ldr	r3, [pc, #168]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	4a26      	ldr	r2, [pc, #152]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d8:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d118      	bne.n	8002726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002700:	f7ff fa0e 	bl	8001b20 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7ff fa0a 	bl	8001b20 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e17a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x508>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x4d8>
 800272e:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	4a0d      	ldr	r2, [pc, #52]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800273e:	e029      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x50c>
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	4a07      	ldr	r2, [pc, #28]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a03      	ldr	r2, [pc, #12]	@ (800276c <HAL_RCC_OscConfig+0x504>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	4b9c      	ldr	r3, [pc, #624]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	4a9b      	ldr	r2, [pc, #620]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002784:	4b98      	ldr	r3, [pc, #608]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	4a97      	ldr	r2, [pc, #604]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7ff f9c0 	bl	8001b20 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7ff f9bc 	bl	8001b20 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e12a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ed      	beq.n	80027a4 <HAL_RCC_OscConfig+0x53c>
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7ff f9a9 	bl	8001b20 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7ff f9a5 	bl	8001b20 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e113      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e8:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ed      	bne.n	80027d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b7a      	ldr	r3, [pc, #488]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	4a79      	ldr	r2, [pc, #484]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002806:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80fe 	beq.w	8002a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	2b02      	cmp	r3, #2
 8002818:	f040 80d0 	bne.w	80029bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800281c:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	429a      	cmp	r2, r3
 800282e:	d130      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d127      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11f      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800285c:	2a07      	cmp	r2, #7
 800285e:	bf14      	ite	ne
 8002860:	2201      	movne	r2, #1
 8002862:	2200      	moveq	r2, #0
 8002864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	4293      	cmp	r3, r2
 8002868:	d113      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d109      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d06e      	beq.n	8002970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d069      	beq.n	800296c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a4:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ad      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b4:	4b4c      	ldr	r3, [pc, #304]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7ff f92e 	bl	8001b20 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff f92a 	bl	8001b20 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e09a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e6:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b40      	ldr	r3, [pc, #256]	@ (80029ec <HAL_RCC_OscConfig+0x784>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0652      	lsls	r2, r2, #25
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002920:	0912      	lsrs	r2, r2, #4
 8002922:	0452      	lsls	r2, r2, #17
 8002924:	430a      	orrs	r2, r1
 8002926:	4930      	ldr	r1, [pc, #192]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800292c:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2d      	ldr	r2, [pc, #180]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2a      	ldr	r2, [pc, #168]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7ff f8ec 	bl	8001b20 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff f8e8 	bl	8001b20 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e058      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296a:	e050      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d148      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800297c:	4b1a      	ldr	r3, [pc, #104]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a16      	ldr	r2, [pc, #88]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002994:	f7ff f8c4 	bl	8001b20 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7ff f8c0 	bl	8001b20 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e030      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x734>
 80029ba:	e028      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d023      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff f8a7 	bl	8001b20 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	e00c      	b.n	80029f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7ff f8a3 	bl	8001b20 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d905      	bls.n	80029f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e013      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ec      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_RCC_OscConfig+0x7b4>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	feeefffc 	.word	0xfeeefffc

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0e7      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b75      	ldr	r3, [pc, #468]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b72      	ldr	r3, [pc, #456]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4970      	ldr	r1, [pc, #448]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b6e      	ldr	r3, [pc, #440]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cf      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b66      	ldr	r3, [pc, #408]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b63      	ldr	r3, [pc, #396]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4960      	ldr	r1, [pc, #384]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04c      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0a6      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4b54      	ldr	r3, [pc, #336]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e086      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4943      	ldr	r1, [pc, #268]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7ff f80a 	bl	8001b20 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7ff f806 	bl	8001b20 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b3a      	ldr	r3, [pc, #232]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d208      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b2e      	ldr	r3, [pc, #184]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	492b      	ldr	r1, [pc, #172]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b29      	ldr	r3, [pc, #164]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d210      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	4923      	ldr	r1, [pc, #140]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e036      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4918      	ldr	r1, [pc, #96]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4910      	ldr	r1, [pc, #64]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd4:	f000 f824 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_ClockConfig+0x1fc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ff41 	bl	8001a80 <HAL_InitTick>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08004ff4 	.word	0x08004ff4
 8002c18:	20000144 	.word	0x20000144
 8002c1c:	20000148 	.word	0x20000148

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08005004 	.word	0x08005004
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff fa26 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
 8002d56:	e014      	b.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	4a24      	ldr	r2, [pc, #144]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff fa16 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d88:	d10b      	bne.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d919      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d94:	d902      	bls.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d96:	2302      	movs	r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e013      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e010      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	@ 0x80
 8002da6:	d902      	bls.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da8:	2303      	movs	r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e00a      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	@ 0x80
 8002db2:	d102      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e004      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d101      	bne.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0207 	bic.w	r2, r3, #7
 8002dcc:	4909      	ldr	r1, [pc, #36]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd4:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e095      	b.n	8002f36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e1a:	d009      	beq.n	8002e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
 8002e22:	e005      	b.n	8002e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fbf8 	bl	8001640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e70:	d902      	bls.n	8002e78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e002      	b.n	8002e7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e86:	d007      	beq.n	8002e98 <HAL_SPI_Init+0xa0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eda:	ea42 0103 	orr.w	r1, r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 0204 	and.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_SPI_Transmit+0x22>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e15f      	b.n	8003220 <HAL_SPI_Transmit+0x2e2>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f68:	f7fe fdda 	bl	8001b20 <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f82:	e148      	b.n	8003216 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0x52>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f94:	e13f      	b.n	8003216 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe0:	d10f      	bne.n	8003002 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b40      	cmp	r3, #64	@ 0x40
 800300e:	d007      	beq.n	8003020 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003028:	d94f      	bls.n	80030ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Transmit+0xfa>
 8003032:	8afb      	ldrh	r3, [r7, #22]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d142      	bne.n	80030be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800305c:	e02f      	b.n	80030be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d112      	bne.n	8003092 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003090:	e015      	b.n	80030be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe fd45 	bl	8001b20 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Transmit+0x16c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Transmit+0x172>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80030bc:	e0ab      	b.n	8003216 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ca      	bne.n	800305e <HAL_SPI_Transmit+0x120>
 80030c8:	e080      	b.n	80031cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0x19a>
 80030d2:	8afb      	ldrh	r3, [r7, #22]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d174      	bne.n	80031c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d912      	bls.n	8003108 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b02      	subs	r3, #2
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003106:	e05c      	b.n	80031c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800312e:	e048      	b.n	80031c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d12b      	bne.n	8003196 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d912      	bls.n	800316e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b02      	subs	r3, #2
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800316c:	e029      	b.n	80031c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003194:	e015      	b.n	80031c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003196:	f7fe fcc3 	bl	8001b20 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d803      	bhi.n	80031ae <HAL_SPI_Transmit+0x270>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031ac:	d102      	bne.n	80031b4 <HAL_SPI_Transmit+0x276>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80031c0:	e029      	b.n	8003216 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1b1      	bne.n	8003130 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fb69 	bl	80038a8 <SPI_EndRxTxTransaction>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e003      	b.n	8003216 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800321e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_SPI_TransmitReceive+0x26>
 800324a:	2302      	movs	r3, #2
 800324c:	e20a      	b.n	8003664 <HAL_SPI_TransmitReceive+0x43c>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003256:	f7fe fc63 	bl	8001b20 <HAL_GetTick>
 800325a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003262:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003272:	7efb      	ldrb	r3, [r7, #27]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d00e      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x6e>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800327e:	d106      	bne.n	800328e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_SPI_TransmitReceive+0x66>
 8003288:	7efb      	ldrb	r3, [r7, #27]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d003      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003294:	e1e0      	b.n	8003658 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x80>
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032ae:	e1d3      	b.n	8003658 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d003      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2205      	movs	r2, #5
 80032c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	887a      	ldrh	r2, [r7, #2]
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003306:	d802      	bhi.n	800330e <HAL_SPI_TransmitReceive+0xe6>
 8003308:	8a3b      	ldrh	r3, [r7, #16]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d908      	bls.n	8003320 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	e007      	b.n	8003330 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b40      	cmp	r3, #64	@ 0x40
 800333c:	d007      	beq.n	800334e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003356:	f240 8081 	bls.w	800345c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x140>
 8003362:	8a7b      	ldrh	r3, [r7, #18]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d16d      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338c:	e05a      	b.n	8003444 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d11b      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x1ac>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x1ac>
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d113      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d11c      	bne.n	800341c <HAL_SPI_TransmitReceive+0x1f4>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	b292      	uxth	r2, r2
 80033fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003418:	2301      	movs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800341c:	f7fe fb80 	bl	8001b20 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003428:	429a      	cmp	r2, r3
 800342a:	d80b      	bhi.n	8003444 <HAL_SPI_TransmitReceive+0x21c>
 800342c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003432:	d007      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003442:	e109      	b.n	8003658 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d19f      	bne.n	800338e <HAL_SPI_TransmitReceive+0x166>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d199      	bne.n	800338e <HAL_SPI_TransmitReceive+0x166>
 800345a:	e0e3      	b.n	8003624 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_SPI_TransmitReceive+0x244>
 8003464:	8a7b      	ldrh	r3, [r7, #18]
 8003466:	2b01      	cmp	r3, #1
 8003468:	f040 80cf 	bne.w	800360a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d912      	bls.n	800349c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347a:	881a      	ldrh	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b02      	subs	r3, #2
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800349a:	e0b6      	b.n	800360a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c2:	e0a2      	b.n	800360a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d134      	bne.n	800353c <HAL_SPI_TransmitReceive+0x314>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02f      	beq.n	800353c <HAL_SPI_TransmitReceive+0x314>
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d12c      	bne.n	800353c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d912      	bls.n	8003512 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	881a      	ldrh	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b02      	subs	r3, #2
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003510:	e012      	b.n	8003538 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d148      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x3b4>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d042      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d923      	bls.n	80035aa <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	b292      	uxth	r2, r2
 800356e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b02      	subs	r3, #2
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d81f      	bhi.n	80035d8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	e016      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f103 020c 	add.w	r2, r3, #12
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d8:	2301      	movs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035dc:	f7fe faa0 	bl	8001b20 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d803      	bhi.n	80035f4 <HAL_SPI_TransmitReceive+0x3cc>
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f2:	d102      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x3d2>
 80035f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003608:	e026      	b.n	8003658 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f af57 	bne.w	80034c4 <HAL_SPI_TransmitReceive+0x29c>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f af50 	bne.w	80034c4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f93d 	bl	80038a8 <SPI_EndRxTxTransaction>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364e:	e003      	b.n	8003658 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	@ 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800367c:	f7fe fa50 	bl	8001b20 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800368c:	f7fe fa48 	bl	8001b20 <HAL_GetTick>
 8003690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003692:	4b39      	ldr	r3, [pc, #228]	@ (8003778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	0d1b      	lsrs	r3, r3, #20
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a2:	e054      	b.n	800374e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036aa:	d050      	beq.n	800374e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ac:	f7fe fa38 	bl	8001b20 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d902      	bls.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13d      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036da:	d111      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e4:	d004      	beq.n	80036f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ee:	d107      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003708:	d10f      	bne.n	800372a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e017      	b.n	800376e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3b01      	subs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	429a      	cmp	r2, r3
 800376a:	d19b      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000144 	.word	0x20000144

0800377c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	@ 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800378e:	f7fe f9c7 	bl	8001b20 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4413      	add	r3, r2
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800379e:	f7fe f9bf 	bl	8001b20 <HAL_GetTick>
 80037a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037ac:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	00da      	lsls	r2, r3, #3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	0d1b      	lsrs	r3, r3, #20
 80037bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037c4:	e060      	b.n	8003888 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80037cc:	d107      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037e4:	d050      	beq.n	8003888 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037e6:	f7fe f99b 	bl	8001b20 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d902      	bls.n	80037fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d13d      	bne.n	8003878 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800380a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003814:	d111      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381e:	d004      	beq.n	800382a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003828:	d107      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003838:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003842:	d10f      	bne.n	8003864 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e010      	b.n	800389a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	3b01      	subs	r3, #1
 8003886:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d196      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3728      	adds	r7, #40	@ 0x28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000144 	.word	0x20000144

080038a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff ff5b 	bl	800377c <SPI_WaitFifoStateUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e027      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff fec0 	bl	800366c <SPI_WaitFlagStateUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f6:	f043 0220 	orr.w	r2, r3, #32
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e014      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff34 	bl	800377c <SPI_WaitFifoStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e000      	b.n	800392c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <malloc>:
 8003934:	4b02      	ldr	r3, [pc, #8]	@ (8003940 <malloc+0xc>)
 8003936:	4601      	mov	r1, r0
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	f000 b82d 	b.w	8003998 <_malloc_r>
 800393e:	bf00      	nop
 8003940:	2000015c 	.word	0x2000015c

08003944 <free>:
 8003944:	4b02      	ldr	r3, [pc, #8]	@ (8003950 <free+0xc>)
 8003946:	4601      	mov	r1, r0
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	f000 ba6b 	b.w	8003e24 <_free_r>
 800394e:	bf00      	nop
 8003950:	2000015c 	.word	0x2000015c

08003954 <sbrk_aligned>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4e0f      	ldr	r6, [pc, #60]	@ (8003994 <sbrk_aligned+0x40>)
 8003958:	460c      	mov	r4, r1
 800395a:	6831      	ldr	r1, [r6, #0]
 800395c:	4605      	mov	r5, r0
 800395e:	b911      	cbnz	r1, 8003966 <sbrk_aligned+0x12>
 8003960:	f000 fa14 	bl	8003d8c <_sbrk_r>
 8003964:	6030      	str	r0, [r6, #0]
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 fa0f 	bl	8003d8c <_sbrk_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d103      	bne.n	800397a <sbrk_aligned+0x26>
 8003972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003976:	4620      	mov	r0, r4
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	1cc4      	adds	r4, r0, #3
 800397c:	f024 0403 	bic.w	r4, r4, #3
 8003980:	42a0      	cmp	r0, r4
 8003982:	d0f8      	beq.n	8003976 <sbrk_aligned+0x22>
 8003984:	1a21      	subs	r1, r4, r0
 8003986:	4628      	mov	r0, r5
 8003988:	f000 fa00 	bl	8003d8c <_sbrk_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d1f2      	bne.n	8003976 <sbrk_aligned+0x22>
 8003990:	e7ef      	b.n	8003972 <sbrk_aligned+0x1e>
 8003992:	bf00      	nop
 8003994:	20000370 	.word	0x20000370

08003998 <_malloc_r>:
 8003998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399c:	1ccd      	adds	r5, r1, #3
 800399e:	f025 0503 	bic.w	r5, r5, #3
 80039a2:	3508      	adds	r5, #8
 80039a4:	2d0c      	cmp	r5, #12
 80039a6:	bf38      	it	cc
 80039a8:	250c      	movcc	r5, #12
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	4606      	mov	r6, r0
 80039ae:	db01      	blt.n	80039b4 <_malloc_r+0x1c>
 80039b0:	42a9      	cmp	r1, r5
 80039b2:	d904      	bls.n	80039be <_malloc_r+0x26>
 80039b4:	230c      	movs	r3, #12
 80039b6:	6033      	str	r3, [r6, #0]
 80039b8:	2000      	movs	r0, #0
 80039ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a94 <_malloc_r+0xfc>
 80039c2:	f000 f89d 	bl	8003b00 <__malloc_lock>
 80039c6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ca:	461c      	mov	r4, r3
 80039cc:	bb44      	cbnz	r4, 8003a20 <_malloc_r+0x88>
 80039ce:	4629      	mov	r1, r5
 80039d0:	4630      	mov	r0, r6
 80039d2:	f7ff ffbf 	bl	8003954 <sbrk_aligned>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	4604      	mov	r4, r0
 80039da:	d158      	bne.n	8003a8e <_malloc_r+0xf6>
 80039dc:	f8d8 4000 	ldr.w	r4, [r8]
 80039e0:	4627      	mov	r7, r4
 80039e2:	2f00      	cmp	r7, #0
 80039e4:	d143      	bne.n	8003a6e <_malloc_r+0xd6>
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	d04b      	beq.n	8003a82 <_malloc_r+0xea>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	4639      	mov	r1, r7
 80039ee:	4630      	mov	r0, r6
 80039f0:	eb04 0903 	add.w	r9, r4, r3
 80039f4:	f000 f9ca 	bl	8003d8c <_sbrk_r>
 80039f8:	4581      	cmp	r9, r0
 80039fa:	d142      	bne.n	8003a82 <_malloc_r+0xea>
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	1a6d      	subs	r5, r5, r1
 8003a00:	4629      	mov	r1, r5
 8003a02:	4630      	mov	r0, r6
 8003a04:	f7ff ffa6 	bl	8003954 <sbrk_aligned>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d03a      	beq.n	8003a82 <_malloc_r+0xea>
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	442b      	add	r3, r5
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	f8d8 3000 	ldr.w	r3, [r8]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	bb62      	cbnz	r2, 8003a74 <_malloc_r+0xdc>
 8003a1a:	f8c8 7000 	str.w	r7, [r8]
 8003a1e:	e00f      	b.n	8003a40 <_malloc_r+0xa8>
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	1b52      	subs	r2, r2, r5
 8003a24:	d420      	bmi.n	8003a68 <_malloc_r+0xd0>
 8003a26:	2a0b      	cmp	r2, #11
 8003a28:	d917      	bls.n	8003a5a <_malloc_r+0xc2>
 8003a2a:	1961      	adds	r1, r4, r5
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	6025      	str	r5, [r4, #0]
 8003a30:	bf18      	it	ne
 8003a32:	6059      	strne	r1, [r3, #4]
 8003a34:	6863      	ldr	r3, [r4, #4]
 8003a36:	bf08      	it	eq
 8003a38:	f8c8 1000 	streq.w	r1, [r8]
 8003a3c:	5162      	str	r2, [r4, r5]
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 f863 	bl	8003b0c <__malloc_unlock>
 8003a46:	f104 000b 	add.w	r0, r4, #11
 8003a4a:	1d23      	adds	r3, r4, #4
 8003a4c:	f020 0007 	bic.w	r0, r0, #7
 8003a50:	1ac2      	subs	r2, r0, r3
 8003a52:	bf1c      	itt	ne
 8003a54:	1a1b      	subne	r3, r3, r0
 8003a56:	50a3      	strne	r3, [r4, r2]
 8003a58:	e7af      	b.n	80039ba <_malloc_r+0x22>
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	bf0c      	ite	eq
 8003a60:	f8c8 2000 	streq.w	r2, [r8]
 8003a64:	605a      	strne	r2, [r3, #4]
 8003a66:	e7eb      	b.n	8003a40 <_malloc_r+0xa8>
 8003a68:	4623      	mov	r3, r4
 8003a6a:	6864      	ldr	r4, [r4, #4]
 8003a6c:	e7ae      	b.n	80039cc <_malloc_r+0x34>
 8003a6e:	463c      	mov	r4, r7
 8003a70:	687f      	ldr	r7, [r7, #4]
 8003a72:	e7b6      	b.n	80039e2 <_malloc_r+0x4a>
 8003a74:	461a      	mov	r2, r3
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d1fb      	bne.n	8003a74 <_malloc_r+0xdc>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	6053      	str	r3, [r2, #4]
 8003a80:	e7de      	b.n	8003a40 <_malloc_r+0xa8>
 8003a82:	230c      	movs	r3, #12
 8003a84:	6033      	str	r3, [r6, #0]
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f840 	bl	8003b0c <__malloc_unlock>
 8003a8c:	e794      	b.n	80039b8 <_malloc_r+0x20>
 8003a8e:	6005      	str	r5, [r0, #0]
 8003a90:	e7d6      	b.n	8003a40 <_malloc_r+0xa8>
 8003a92:	bf00      	nop
 8003a94:	20000374 	.word	0x20000374

08003a98 <sniprintf>:
 8003a98:	b40c      	push	{r2, r3}
 8003a9a:	b530      	push	{r4, r5, lr}
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <sniprintf+0x64>)
 8003a9e:	1e0c      	subs	r4, r1, #0
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	b09d      	sub	sp, #116	@ 0x74
 8003aa4:	da08      	bge.n	8003ab8 <sniprintf+0x20>
 8003aa6:	238b      	movs	r3, #139	@ 0x8b
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aae:	b01d      	add	sp, #116	@ 0x74
 8003ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ab4:	b002      	add	sp, #8
 8003ab6:	4770      	bx	lr
 8003ab8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ac0:	bf14      	ite	ne
 8003ac2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003ac6:	4623      	moveq	r3, r4
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	9307      	str	r3, [sp, #28]
 8003acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	9006      	str	r0, [sp, #24]
 8003ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ad8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ada:	ab21      	add	r3, sp, #132	@ 0x84
 8003adc:	a902      	add	r1, sp, #8
 8003ade:	4628      	mov	r0, r5
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	f000 fa45 	bl	8003f70 <_svfiprintf_r>
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	bfbc      	itt	lt
 8003aea:	238b      	movlt	r3, #139	@ 0x8b
 8003aec:	602b      	strlt	r3, [r5, #0]
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	d0dd      	beq.n	8003aae <sniprintf+0x16>
 8003af2:	9b02      	ldr	r3, [sp, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e7d9      	b.n	8003aae <sniprintf+0x16>
 8003afa:	bf00      	nop
 8003afc:	2000015c 	.word	0x2000015c

08003b00 <__malloc_lock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	@ (8003b08 <__malloc_lock+0x8>)
 8003b02:	f000 b97e 	b.w	8003e02 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	200004b4 	.word	0x200004b4

08003b0c <__malloc_unlock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	@ (8003b14 <__malloc_unlock+0x8>)
 8003b0e:	f000 b979 	b.w	8003e04 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	200004b4 	.word	0x200004b4

08003b18 <std>:
 8003b18:	2300      	movs	r3, #0
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b26:	6083      	str	r3, [r0, #8]
 8003b28:	8181      	strh	r1, [r0, #12]
 8003b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b2c:	81c2      	strh	r2, [r0, #14]
 8003b2e:	6183      	str	r3, [r0, #24]
 8003b30:	4619      	mov	r1, r3
 8003b32:	2208      	movs	r2, #8
 8003b34:	305c      	adds	r0, #92	@ 0x5c
 8003b36:	f000 f921 	bl	8003d7c <memset>
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <std+0x58>)
 8003b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <std+0x5c>)
 8003b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <std+0x60>)
 8003b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b46:	4b0d      	ldr	r3, [pc, #52]	@ (8003b7c <std+0x64>)
 8003b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <std+0x68>)
 8003b4c:	6224      	str	r4, [r4, #32]
 8003b4e:	429c      	cmp	r4, r3
 8003b50:	d006      	beq.n	8003b60 <std+0x48>
 8003b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b56:	4294      	cmp	r4, r2
 8003b58:	d002      	beq.n	8003b60 <std+0x48>
 8003b5a:	33d0      	adds	r3, #208	@ 0xd0
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	d105      	bne.n	8003b6c <std+0x54>
 8003b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b68:	f000 b94a 	b.w	8003e00 <__retarget_lock_init_recursive>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	bf00      	nop
 8003b70:	08004861 	.word	0x08004861
 8003b74:	08004883 	.word	0x08004883
 8003b78:	080048bb 	.word	0x080048bb
 8003b7c:	080048df 	.word	0x080048df
 8003b80:	20000378 	.word	0x20000378

08003b84 <stdio_exit_handler>:
 8003b84:	4a02      	ldr	r2, [pc, #8]	@ (8003b90 <stdio_exit_handler+0xc>)
 8003b86:	4903      	ldr	r1, [pc, #12]	@ (8003b94 <stdio_exit_handler+0x10>)
 8003b88:	4803      	ldr	r0, [pc, #12]	@ (8003b98 <stdio_exit_handler+0x14>)
 8003b8a:	f000 b869 	b.w	8003c60 <_fwalk_sglue>
 8003b8e:	bf00      	nop
 8003b90:	20000150 	.word	0x20000150
 8003b94:	08004811 	.word	0x08004811
 8003b98:	20000160 	.word	0x20000160

08003b9c <cleanup_stdio>:
 8003b9c:	6841      	ldr	r1, [r0, #4]
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <cleanup_stdio+0x34>)
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	d001      	beq.n	8003bac <cleanup_stdio+0x10>
 8003ba8:	f000 fe32 	bl	8004810 <_fflush_r>
 8003bac:	68a1      	ldr	r1, [r4, #8]
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <cleanup_stdio+0x38>)
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	d002      	beq.n	8003bba <cleanup_stdio+0x1e>
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f000 fe2b 	bl	8004810 <_fflush_r>
 8003bba:	68e1      	ldr	r1, [r4, #12]
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <cleanup_stdio+0x3c>)
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	d004      	beq.n	8003bcc <cleanup_stdio+0x30>
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc8:	f000 be22 	b.w	8004810 <_fflush_r>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000378 	.word	0x20000378
 8003bd4:	200003e0 	.word	0x200003e0
 8003bd8:	20000448 	.word	0x20000448

08003bdc <global_stdio_init.part.0>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <global_stdio_init.part.0+0x30>)
 8003be0:	4c0b      	ldr	r4, [pc, #44]	@ (8003c10 <global_stdio_init.part.0+0x34>)
 8003be2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c14 <global_stdio_init.part.0+0x38>)
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	4620      	mov	r0, r4
 8003be8:	2200      	movs	r2, #0
 8003bea:	2104      	movs	r1, #4
 8003bec:	f7ff ff94 	bl	8003b18 <std>
 8003bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2109      	movs	r1, #9
 8003bf8:	f7ff ff8e 	bl	8003b18 <std>
 8003bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c00:	2202      	movs	r2, #2
 8003c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c06:	2112      	movs	r1, #18
 8003c08:	f7ff bf86 	b.w	8003b18 <std>
 8003c0c:	200004b0 	.word	0x200004b0
 8003c10:	20000378 	.word	0x20000378
 8003c14:	08003b85 	.word	0x08003b85

08003c18 <__sfp_lock_acquire>:
 8003c18:	4801      	ldr	r0, [pc, #4]	@ (8003c20 <__sfp_lock_acquire+0x8>)
 8003c1a:	f000 b8f2 	b.w	8003e02 <__retarget_lock_acquire_recursive>
 8003c1e:	bf00      	nop
 8003c20:	200004b5 	.word	0x200004b5

08003c24 <__sfp_lock_release>:
 8003c24:	4801      	ldr	r0, [pc, #4]	@ (8003c2c <__sfp_lock_release+0x8>)
 8003c26:	f000 b8ed 	b.w	8003e04 <__retarget_lock_release_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	200004b5 	.word	0x200004b5

08003c30 <__sinit>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	4604      	mov	r4, r0
 8003c34:	f7ff fff0 	bl	8003c18 <__sfp_lock_acquire>
 8003c38:	6a23      	ldr	r3, [r4, #32]
 8003c3a:	b11b      	cbz	r3, 8003c44 <__sinit+0x14>
 8003c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c40:	f7ff bff0 	b.w	8003c24 <__sfp_lock_release>
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <__sinit+0x28>)
 8003c46:	6223      	str	r3, [r4, #32]
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <__sinit+0x2c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f5      	bne.n	8003c3c <__sinit+0xc>
 8003c50:	f7ff ffc4 	bl	8003bdc <global_stdio_init.part.0>
 8003c54:	e7f2      	b.n	8003c3c <__sinit+0xc>
 8003c56:	bf00      	nop
 8003c58:	08003b9d 	.word	0x08003b9d
 8003c5c:	200004b0 	.word	0x200004b0

08003c60 <_fwalk_sglue>:
 8003c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c64:	4607      	mov	r7, r0
 8003c66:	4688      	mov	r8, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c70:	f1b9 0901 	subs.w	r9, r9, #1
 8003c74:	d505      	bpl.n	8003c82 <_fwalk_sglue+0x22>
 8003c76:	6824      	ldr	r4, [r4, #0]
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d1f7      	bne.n	8003c6c <_fwalk_sglue+0xc>
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c82:	89ab      	ldrh	r3, [r5, #12]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d907      	bls.n	8003c98 <_fwalk_sglue+0x38>
 8003c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	d003      	beq.n	8003c98 <_fwalk_sglue+0x38>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c0      	blx	r8
 8003c96:	4306      	orrs	r6, r0
 8003c98:	3568      	adds	r5, #104	@ 0x68
 8003c9a:	e7e9      	b.n	8003c70 <_fwalk_sglue+0x10>

08003c9c <iprintf>:
 8003c9c:	b40f      	push	{r0, r1, r2, r3}
 8003c9e:	b507      	push	{r0, r1, r2, lr}
 8003ca0:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <iprintf+0x20>)
 8003ca2:	ab04      	add	r3, sp, #16
 8003ca4:	6808      	ldr	r0, [r1, #0]
 8003ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003caa:	6881      	ldr	r1, [r0, #8]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f000 fa85 	bl	80041bc <_vfiprintf_r>
 8003cb2:	b003      	add	sp, #12
 8003cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cb8:	b004      	add	sp, #16
 8003cba:	4770      	bx	lr
 8003cbc:	2000015c 	.word	0x2000015c

08003cc0 <_puts_r>:
 8003cc0:	6a03      	ldr	r3, [r0, #32]
 8003cc2:	b570      	push	{r4, r5, r6, lr}
 8003cc4:	6884      	ldr	r4, [r0, #8]
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	460e      	mov	r6, r1
 8003cca:	b90b      	cbnz	r3, 8003cd0 <_puts_r+0x10>
 8003ccc:	f7ff ffb0 	bl	8003c30 <__sinit>
 8003cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cd2:	07db      	lsls	r3, r3, #31
 8003cd4:	d405      	bmi.n	8003ce2 <_puts_r+0x22>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	0598      	lsls	r0, r3, #22
 8003cda:	d402      	bmi.n	8003ce2 <_puts_r+0x22>
 8003cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cde:	f000 f890 	bl	8003e02 <__retarget_lock_acquire_recursive>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	0719      	lsls	r1, r3, #28
 8003ce6:	d502      	bpl.n	8003cee <_puts_r+0x2e>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d135      	bne.n	8003d5a <_puts_r+0x9a>
 8003cee:	4621      	mov	r1, r4
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f000 fe65 	bl	80049c0 <__swsetup_r>
 8003cf6:	b380      	cbz	r0, 8003d5a <_puts_r+0x9a>
 8003cf8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003cfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cfe:	07da      	lsls	r2, r3, #31
 8003d00:	d405      	bmi.n	8003d0e <_puts_r+0x4e>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	059b      	lsls	r3, r3, #22
 8003d06:	d402      	bmi.n	8003d0e <_puts_r+0x4e>
 8003d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d0a:	f000 f87b 	bl	8003e04 <__retarget_lock_release_recursive>
 8003d0e:	4628      	mov	r0, r5
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da04      	bge.n	8003d20 <_puts_r+0x60>
 8003d16:	69a2      	ldr	r2, [r4, #24]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	dc17      	bgt.n	8003d4c <_puts_r+0x8c>
 8003d1c:	290a      	cmp	r1, #10
 8003d1e:	d015      	beq.n	8003d4c <_puts_r+0x8c>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	6022      	str	r2, [r4, #0]
 8003d26:	7019      	strb	r1, [r3, #0]
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	2900      	cmp	r1, #0
 8003d34:	d1ed      	bne.n	8003d12 <_puts_r+0x52>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da11      	bge.n	8003d5e <_puts_r+0x9e>
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	210a      	movs	r1, #10
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fdff 	bl	8004942 <__swbuf_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0d7      	beq.n	8003cf8 <_puts_r+0x38>
 8003d48:	250a      	movs	r5, #10
 8003d4a:	e7d7      	b.n	8003cfc <_puts_r+0x3c>
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 fdf7 	bl	8004942 <__swbuf_r>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d1e7      	bne.n	8003d28 <_puts_r+0x68>
 8003d58:	e7ce      	b.n	8003cf8 <_puts_r+0x38>
 8003d5a:	3e01      	subs	r6, #1
 8003d5c:	e7e4      	b.n	8003d28 <_puts_r+0x68>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	220a      	movs	r2, #10
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e7ee      	b.n	8003d48 <_puts_r+0x88>
	...

08003d6c <puts>:
 8003d6c:	4b02      	ldr	r3, [pc, #8]	@ (8003d78 <puts+0xc>)
 8003d6e:	4601      	mov	r1, r0
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f7ff bfa5 	b.w	8003cc0 <_puts_r>
 8003d76:	bf00      	nop
 8003d78:	2000015c 	.word	0x2000015c

08003d7c <memset>:
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_sbrk_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d06      	ldr	r5, [pc, #24]	@ (8003da8 <_sbrk_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fd fcf0 	bl	800177c <_sbrk>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_sbrk_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_sbrk_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	200004b8 	.word	0x200004b8

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	@ (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	2000015c 	.word	0x2000015c

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	@ (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	@ (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 ff3a 	bl	8004c44 <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08005070 	.word	0x08005070
 8003df4:	08005070 	.word	0x08005070
 8003df8:	08005070 	.word	0x08005070
 8003dfc:	08005074 	.word	0x08005074

08003e00 <__retarget_lock_init_recursive>:
 8003e00:	4770      	bx	lr

08003e02 <__retarget_lock_acquire_recursive>:
 8003e02:	4770      	bx	lr

08003e04 <__retarget_lock_release_recursive>:
 8003e04:	4770      	bx	lr

08003e06 <memcpy>:
 8003e06:	440a      	add	r2, r1
 8003e08:	4291      	cmp	r1, r2
 8003e0a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003e0e:	d100      	bne.n	8003e12 <memcpy+0xc>
 8003e10:	4770      	bx	lr
 8003e12:	b510      	push	{r4, lr}
 8003e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e1c:	4291      	cmp	r1, r2
 8003e1e:	d1f9      	bne.n	8003e14 <memcpy+0xe>
 8003e20:	bd10      	pop	{r4, pc}
	...

08003e24 <_free_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4605      	mov	r5, r0
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d041      	beq.n	8003eb0 <_free_r+0x8c>
 8003e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e30:	1f0c      	subs	r4, r1, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bfb8      	it	lt
 8003e36:	18e4      	addlt	r4, r4, r3
 8003e38:	f7ff fe62 	bl	8003b00 <__malloc_lock>
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <_free_r+0x90>)
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	b933      	cbnz	r3, 8003e50 <_free_r+0x2c>
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	6014      	str	r4, [r2, #0]
 8003e46:	4628      	mov	r0, r5
 8003e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e4c:	f7ff be5e 	b.w	8003b0c <__malloc_unlock>
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d908      	bls.n	8003e66 <_free_r+0x42>
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	1821      	adds	r1, r4, r0
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	bf01      	itttt	eq
 8003e5c:	6819      	ldreq	r1, [r3, #0]
 8003e5e:	685b      	ldreq	r3, [r3, #4]
 8003e60:	1809      	addeq	r1, r1, r0
 8003e62:	6021      	streq	r1, [r4, #0]
 8003e64:	e7ed      	b.n	8003e42 <_free_r+0x1e>
 8003e66:	461a      	mov	r2, r3
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	b10b      	cbz	r3, 8003e70 <_free_r+0x4c>
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	d9fa      	bls.n	8003e66 <_free_r+0x42>
 8003e70:	6811      	ldr	r1, [r2, #0]
 8003e72:	1850      	adds	r0, r2, r1
 8003e74:	42a0      	cmp	r0, r4
 8003e76:	d10b      	bne.n	8003e90 <_free_r+0x6c>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	4401      	add	r1, r0
 8003e7c:	1850      	adds	r0, r2, r1
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	d1e0      	bne.n	8003e46 <_free_r+0x22>
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	4408      	add	r0, r1
 8003e8c:	6010      	str	r0, [r2, #0]
 8003e8e:	e7da      	b.n	8003e46 <_free_r+0x22>
 8003e90:	d902      	bls.n	8003e98 <_free_r+0x74>
 8003e92:	230c      	movs	r3, #12
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	e7d6      	b.n	8003e46 <_free_r+0x22>
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	1821      	adds	r1, r4, r0
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	bf04      	itt	eq
 8003ea0:	6819      	ldreq	r1, [r3, #0]
 8003ea2:	685b      	ldreq	r3, [r3, #4]
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	bf04      	itt	eq
 8003ea8:	1809      	addeq	r1, r1, r0
 8003eaa:	6021      	streq	r1, [r4, #0]
 8003eac:	6054      	str	r4, [r2, #4]
 8003eae:	e7ca      	b.n	8003e46 <_free_r+0x22>
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000374 	.word	0x20000374

08003eb8 <__ssputs_r>:
 8003eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	688e      	ldr	r6, [r1, #8]
 8003ebe:	461f      	mov	r7, r3
 8003ec0:	42be      	cmp	r6, r7
 8003ec2:	680b      	ldr	r3, [r1, #0]
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	4690      	mov	r8, r2
 8003eca:	d82d      	bhi.n	8003f28 <__ssputs_r+0x70>
 8003ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ed0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ed4:	d026      	beq.n	8003f24 <__ssputs_r+0x6c>
 8003ed6:	6965      	ldr	r5, [r4, #20]
 8003ed8:	6909      	ldr	r1, [r1, #16]
 8003eda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ede:	eba3 0901 	sub.w	r9, r3, r1
 8003ee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ee6:	1c7b      	adds	r3, r7, #1
 8003ee8:	444b      	add	r3, r9
 8003eea:	106d      	asrs	r5, r5, #1
 8003eec:	429d      	cmp	r5, r3
 8003eee:	bf38      	it	cc
 8003ef0:	461d      	movcc	r5, r3
 8003ef2:	0553      	lsls	r3, r2, #21
 8003ef4:	d527      	bpl.n	8003f46 <__ssputs_r+0x8e>
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7ff fd4e 	bl	8003998 <_malloc_r>
 8003efc:	4606      	mov	r6, r0
 8003efe:	b360      	cbz	r0, 8003f5a <__ssputs_r+0xa2>
 8003f00:	6921      	ldr	r1, [r4, #16]
 8003f02:	464a      	mov	r2, r9
 8003f04:	f7ff ff7f 	bl	8003e06 <memcpy>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	6126      	str	r6, [r4, #16]
 8003f16:	6165      	str	r5, [r4, #20]
 8003f18:	444e      	add	r6, r9
 8003f1a:	eba5 0509 	sub.w	r5, r5, r9
 8003f1e:	6026      	str	r6, [r4, #0]
 8003f20:	60a5      	str	r5, [r4, #8]
 8003f22:	463e      	mov	r6, r7
 8003f24:	42be      	cmp	r6, r7
 8003f26:	d900      	bls.n	8003f2a <__ssputs_r+0x72>
 8003f28:	463e      	mov	r6, r7
 8003f2a:	6820      	ldr	r0, [r4, #0]
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	4641      	mov	r1, r8
 8003f30:	f000 fdfe 	bl	8004b30 <memmove>
 8003f34:	68a3      	ldr	r3, [r4, #8]
 8003f36:	1b9b      	subs	r3, r3, r6
 8003f38:	60a3      	str	r3, [r4, #8]
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	4433      	add	r3, r6
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	2000      	movs	r0, #0
 8003f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f46:	462a      	mov	r2, r5
 8003f48:	f000 fccd 	bl	80048e6 <_realloc_r>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d1e0      	bne.n	8003f14 <__ssputs_r+0x5c>
 8003f52:	6921      	ldr	r1, [r4, #16]
 8003f54:	4650      	mov	r0, sl
 8003f56:	f7ff ff65 	bl	8003e24 <_free_r>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	f8ca 3000 	str.w	r3, [sl]
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f6c:	e7e9      	b.n	8003f42 <__ssputs_r+0x8a>
	...

08003f70 <_svfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	4698      	mov	r8, r3
 8003f76:	898b      	ldrh	r3, [r1, #12]
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	b09d      	sub	sp, #116	@ 0x74
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	460d      	mov	r5, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	d510      	bpl.n	8003fa6 <_svfiprintf_r+0x36>
 8003f84:	690b      	ldr	r3, [r1, #16]
 8003f86:	b973      	cbnz	r3, 8003fa6 <_svfiprintf_r+0x36>
 8003f88:	2140      	movs	r1, #64	@ 0x40
 8003f8a:	f7ff fd05 	bl	8003998 <_malloc_r>
 8003f8e:	6028      	str	r0, [r5, #0]
 8003f90:	6128      	str	r0, [r5, #16]
 8003f92:	b930      	cbnz	r0, 8003fa2 <_svfiprintf_r+0x32>
 8003f94:	230c      	movs	r3, #12
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f9c:	b01d      	add	sp, #116	@ 0x74
 8003f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa2:	2340      	movs	r3, #64	@ 0x40
 8003fa4:	616b      	str	r3, [r5, #20]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003faa:	2320      	movs	r3, #32
 8003fac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fb4:	2330      	movs	r3, #48	@ 0x30
 8003fb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004154 <_svfiprintf_r+0x1e4>
 8003fba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fbe:	f04f 0901 	mov.w	r9, #1
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fca:	b10a      	cbz	r2, 8003fd0 <_svfiprintf_r+0x60>
 8003fcc:	2a25      	cmp	r2, #37	@ 0x25
 8003fce:	d1f9      	bne.n	8003fc4 <_svfiprintf_r+0x54>
 8003fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fd4:	d00b      	beq.n	8003fee <_svfiprintf_r+0x7e>
 8003fd6:	465b      	mov	r3, fp
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f7ff ff6b 	bl	8003eb8 <__ssputs_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f000 80a7 	beq.w	8004136 <_svfiprintf_r+0x1c6>
 8003fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fea:	445a      	add	r2, fp
 8003fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fee:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 809f 	beq.w	8004136 <_svfiprintf_r+0x1c6>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004002:	f10a 0a01 	add.w	sl, sl, #1
 8004006:	9304      	str	r3, [sp, #16]
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800400e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004010:	4654      	mov	r4, sl
 8004012:	2205      	movs	r2, #5
 8004014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004018:	484e      	ldr	r0, [pc, #312]	@ (8004154 <_svfiprintf_r+0x1e4>)
 800401a:	f7fc f8e1 	bl	80001e0 <memchr>
 800401e:	9a04      	ldr	r2, [sp, #16]
 8004020:	b9d8      	cbnz	r0, 800405a <_svfiprintf_r+0xea>
 8004022:	06d0      	lsls	r0, r2, #27
 8004024:	bf44      	itt	mi
 8004026:	2320      	movmi	r3, #32
 8004028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800402c:	0711      	lsls	r1, r2, #28
 800402e:	bf44      	itt	mi
 8004030:	232b      	movmi	r3, #43	@ 0x2b
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004036:	f89a 3000 	ldrb.w	r3, [sl]
 800403a:	2b2a      	cmp	r3, #42	@ 0x2a
 800403c:	d015      	beq.n	800406a <_svfiprintf_r+0xfa>
 800403e:	9a07      	ldr	r2, [sp, #28]
 8004040:	4654      	mov	r4, sl
 8004042:	2000      	movs	r0, #0
 8004044:	f04f 0c0a 	mov.w	ip, #10
 8004048:	4621      	mov	r1, r4
 800404a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404e:	3b30      	subs	r3, #48	@ 0x30
 8004050:	2b09      	cmp	r3, #9
 8004052:	d94b      	bls.n	80040ec <_svfiprintf_r+0x17c>
 8004054:	b1b0      	cbz	r0, 8004084 <_svfiprintf_r+0x114>
 8004056:	9207      	str	r2, [sp, #28]
 8004058:	e014      	b.n	8004084 <_svfiprintf_r+0x114>
 800405a:	eba0 0308 	sub.w	r3, r0, r8
 800405e:	fa09 f303 	lsl.w	r3, r9, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	46a2      	mov	sl, r4
 8004068:	e7d2      	b.n	8004010 <_svfiprintf_r+0xa0>
 800406a:	9b03      	ldr	r3, [sp, #12]
 800406c:	1d19      	adds	r1, r3, #4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	9103      	str	r1, [sp, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfbb      	ittet	lt
 8004076:	425b      	neglt	r3, r3
 8004078:	f042 0202 	orrlt.w	r2, r2, #2
 800407c:	9307      	strge	r3, [sp, #28]
 800407e:	9307      	strlt	r3, [sp, #28]
 8004080:	bfb8      	it	lt
 8004082:	9204      	strlt	r2, [sp, #16]
 8004084:	7823      	ldrb	r3, [r4, #0]
 8004086:	2b2e      	cmp	r3, #46	@ 0x2e
 8004088:	d10a      	bne.n	80040a0 <_svfiprintf_r+0x130>
 800408a:	7863      	ldrb	r3, [r4, #1]
 800408c:	2b2a      	cmp	r3, #42	@ 0x2a
 800408e:	d132      	bne.n	80040f6 <_svfiprintf_r+0x186>
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	9203      	str	r2, [sp, #12]
 8004098:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800409c:	3402      	adds	r4, #2
 800409e:	9305      	str	r3, [sp, #20]
 80040a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004164 <_svfiprintf_r+0x1f4>
 80040a4:	7821      	ldrb	r1, [r4, #0]
 80040a6:	2203      	movs	r2, #3
 80040a8:	4650      	mov	r0, sl
 80040aa:	f7fc f899 	bl	80001e0 <memchr>
 80040ae:	b138      	cbz	r0, 80040c0 <_svfiprintf_r+0x150>
 80040b0:	9b04      	ldr	r3, [sp, #16]
 80040b2:	eba0 000a 	sub.w	r0, r0, sl
 80040b6:	2240      	movs	r2, #64	@ 0x40
 80040b8:	4082      	lsls	r2, r0
 80040ba:	4313      	orrs	r3, r2
 80040bc:	3401      	adds	r4, #1
 80040be:	9304      	str	r3, [sp, #16]
 80040c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c4:	4824      	ldr	r0, [pc, #144]	@ (8004158 <_svfiprintf_r+0x1e8>)
 80040c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040ca:	2206      	movs	r2, #6
 80040cc:	f7fc f888 	bl	80001e0 <memchr>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d036      	beq.n	8004142 <_svfiprintf_r+0x1d2>
 80040d4:	4b21      	ldr	r3, [pc, #132]	@ (800415c <_svfiprintf_r+0x1ec>)
 80040d6:	bb1b      	cbnz	r3, 8004120 <_svfiprintf_r+0x1b0>
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	3307      	adds	r3, #7
 80040dc:	f023 0307 	bic.w	r3, r3, #7
 80040e0:	3308      	adds	r3, #8
 80040e2:	9303      	str	r3, [sp, #12]
 80040e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040e6:	4433      	add	r3, r6
 80040e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ea:	e76a      	b.n	8003fc2 <_svfiprintf_r+0x52>
 80040ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80040f0:	460c      	mov	r4, r1
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7a8      	b.n	8004048 <_svfiprintf_r+0xd8>
 80040f6:	2300      	movs	r3, #0
 80040f8:	3401      	adds	r4, #1
 80040fa:	9305      	str	r3, [sp, #20]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f04f 0c0a 	mov.w	ip, #10
 8004102:	4620      	mov	r0, r4
 8004104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004108:	3a30      	subs	r2, #48	@ 0x30
 800410a:	2a09      	cmp	r2, #9
 800410c:	d903      	bls.n	8004116 <_svfiprintf_r+0x1a6>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0c6      	beq.n	80040a0 <_svfiprintf_r+0x130>
 8004112:	9105      	str	r1, [sp, #20]
 8004114:	e7c4      	b.n	80040a0 <_svfiprintf_r+0x130>
 8004116:	fb0c 2101 	mla	r1, ip, r1, r2
 800411a:	4604      	mov	r4, r0
 800411c:	2301      	movs	r3, #1
 800411e:	e7f0      	b.n	8004102 <_svfiprintf_r+0x192>
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	462a      	mov	r2, r5
 8004126:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <_svfiprintf_r+0x1f0>)
 8004128:	a904      	add	r1, sp, #16
 800412a:	4638      	mov	r0, r7
 800412c:	f3af 8000 	nop.w
 8004130:	1c42      	adds	r2, r0, #1
 8004132:	4606      	mov	r6, r0
 8004134:	d1d6      	bne.n	80040e4 <_svfiprintf_r+0x174>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	065b      	lsls	r3, r3, #25
 800413a:	f53f af2d 	bmi.w	8003f98 <_svfiprintf_r+0x28>
 800413e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004140:	e72c      	b.n	8003f9c <_svfiprintf_r+0x2c>
 8004142:	ab03      	add	r3, sp, #12
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	462a      	mov	r2, r5
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <_svfiprintf_r+0x1f0>)
 800414a:	a904      	add	r1, sp, #16
 800414c:	4638      	mov	r0, r7
 800414e:	f000 f9bb 	bl	80044c8 <_printf_i>
 8004152:	e7ed      	b.n	8004130 <_svfiprintf_r+0x1c0>
 8004154:	08005034 	.word	0x08005034
 8004158:	0800503e 	.word	0x0800503e
 800415c:	00000000 	.word	0x00000000
 8004160:	08003eb9 	.word	0x08003eb9
 8004164:	0800503a 	.word	0x0800503a

08004168 <__sfputc_r>:
 8004168:	6893      	ldr	r3, [r2, #8]
 800416a:	3b01      	subs	r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	b410      	push	{r4}
 8004170:	6093      	str	r3, [r2, #8]
 8004172:	da08      	bge.n	8004186 <__sfputc_r+0x1e>
 8004174:	6994      	ldr	r4, [r2, #24]
 8004176:	42a3      	cmp	r3, r4
 8004178:	db01      	blt.n	800417e <__sfputc_r+0x16>
 800417a:	290a      	cmp	r1, #10
 800417c:	d103      	bne.n	8004186 <__sfputc_r+0x1e>
 800417e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004182:	f000 bbde 	b.w	8004942 <__swbuf_r>
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	1c58      	adds	r0, r3, #1
 800418a:	6010      	str	r0, [r2, #0]
 800418c:	7019      	strb	r1, [r3, #0]
 800418e:	4608      	mov	r0, r1
 8004190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004194:	4770      	bx	lr

08004196 <__sfputs_r>:
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	4606      	mov	r6, r0
 800419a:	460f      	mov	r7, r1
 800419c:	4614      	mov	r4, r2
 800419e:	18d5      	adds	r5, r2, r3
 80041a0:	42ac      	cmp	r4, r5
 80041a2:	d101      	bne.n	80041a8 <__sfputs_r+0x12>
 80041a4:	2000      	movs	r0, #0
 80041a6:	e007      	b.n	80041b8 <__sfputs_r+0x22>
 80041a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ac:	463a      	mov	r2, r7
 80041ae:	4630      	mov	r0, r6
 80041b0:	f7ff ffda 	bl	8004168 <__sfputc_r>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d1f3      	bne.n	80041a0 <__sfputs_r+0xa>
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041bc <_vfiprintf_r>:
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	460d      	mov	r5, r1
 80041c2:	b09d      	sub	sp, #116	@ 0x74
 80041c4:	4614      	mov	r4, r2
 80041c6:	4698      	mov	r8, r3
 80041c8:	4606      	mov	r6, r0
 80041ca:	b118      	cbz	r0, 80041d4 <_vfiprintf_r+0x18>
 80041cc:	6a03      	ldr	r3, [r0, #32]
 80041ce:	b90b      	cbnz	r3, 80041d4 <_vfiprintf_r+0x18>
 80041d0:	f7ff fd2e 	bl	8003c30 <__sinit>
 80041d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041d6:	07d9      	lsls	r1, r3, #31
 80041d8:	d405      	bmi.n	80041e6 <_vfiprintf_r+0x2a>
 80041da:	89ab      	ldrh	r3, [r5, #12]
 80041dc:	059a      	lsls	r2, r3, #22
 80041de:	d402      	bmi.n	80041e6 <_vfiprintf_r+0x2a>
 80041e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041e2:	f7ff fe0e 	bl	8003e02 <__retarget_lock_acquire_recursive>
 80041e6:	89ab      	ldrh	r3, [r5, #12]
 80041e8:	071b      	lsls	r3, r3, #28
 80041ea:	d501      	bpl.n	80041f0 <_vfiprintf_r+0x34>
 80041ec:	692b      	ldr	r3, [r5, #16]
 80041ee:	b99b      	cbnz	r3, 8004218 <_vfiprintf_r+0x5c>
 80041f0:	4629      	mov	r1, r5
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 fbe4 	bl	80049c0 <__swsetup_r>
 80041f8:	b170      	cbz	r0, 8004218 <_vfiprintf_r+0x5c>
 80041fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041fc:	07dc      	lsls	r4, r3, #31
 80041fe:	d504      	bpl.n	800420a <_vfiprintf_r+0x4e>
 8004200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004204:	b01d      	add	sp, #116	@ 0x74
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	89ab      	ldrh	r3, [r5, #12]
 800420c:	0598      	lsls	r0, r3, #22
 800420e:	d4f7      	bmi.n	8004200 <_vfiprintf_r+0x44>
 8004210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004212:	f7ff fdf7 	bl	8003e04 <__retarget_lock_release_recursive>
 8004216:	e7f3      	b.n	8004200 <_vfiprintf_r+0x44>
 8004218:	2300      	movs	r3, #0
 800421a:	9309      	str	r3, [sp, #36]	@ 0x24
 800421c:	2320      	movs	r3, #32
 800421e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004222:	f8cd 800c 	str.w	r8, [sp, #12]
 8004226:	2330      	movs	r3, #48	@ 0x30
 8004228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043d8 <_vfiprintf_r+0x21c>
 800422c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004230:	f04f 0901 	mov.w	r9, #1
 8004234:	4623      	mov	r3, r4
 8004236:	469a      	mov	sl, r3
 8004238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423c:	b10a      	cbz	r2, 8004242 <_vfiprintf_r+0x86>
 800423e:	2a25      	cmp	r2, #37	@ 0x25
 8004240:	d1f9      	bne.n	8004236 <_vfiprintf_r+0x7a>
 8004242:	ebba 0b04 	subs.w	fp, sl, r4
 8004246:	d00b      	beq.n	8004260 <_vfiprintf_r+0xa4>
 8004248:	465b      	mov	r3, fp
 800424a:	4622      	mov	r2, r4
 800424c:	4629      	mov	r1, r5
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff ffa1 	bl	8004196 <__sfputs_r>
 8004254:	3001      	adds	r0, #1
 8004256:	f000 80a7 	beq.w	80043a8 <_vfiprintf_r+0x1ec>
 800425a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800425c:	445a      	add	r2, fp
 800425e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004260:	f89a 3000 	ldrb.w	r3, [sl]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 809f 	beq.w	80043a8 <_vfiprintf_r+0x1ec>
 800426a:	2300      	movs	r3, #0
 800426c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004274:	f10a 0a01 	add.w	sl, sl, #1
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	9307      	str	r3, [sp, #28]
 800427c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004280:	931a      	str	r3, [sp, #104]	@ 0x68
 8004282:	4654      	mov	r4, sl
 8004284:	2205      	movs	r2, #5
 8004286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800428a:	4853      	ldr	r0, [pc, #332]	@ (80043d8 <_vfiprintf_r+0x21c>)
 800428c:	f7fb ffa8 	bl	80001e0 <memchr>
 8004290:	9a04      	ldr	r2, [sp, #16]
 8004292:	b9d8      	cbnz	r0, 80042cc <_vfiprintf_r+0x110>
 8004294:	06d1      	lsls	r1, r2, #27
 8004296:	bf44      	itt	mi
 8004298:	2320      	movmi	r3, #32
 800429a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800429e:	0713      	lsls	r3, r2, #28
 80042a0:	bf44      	itt	mi
 80042a2:	232b      	movmi	r3, #43	@ 0x2b
 80042a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042a8:	f89a 3000 	ldrb.w	r3, [sl]
 80042ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ae:	d015      	beq.n	80042dc <_vfiprintf_r+0x120>
 80042b0:	9a07      	ldr	r2, [sp, #28]
 80042b2:	4654      	mov	r4, sl
 80042b4:	2000      	movs	r0, #0
 80042b6:	f04f 0c0a 	mov.w	ip, #10
 80042ba:	4621      	mov	r1, r4
 80042bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c0:	3b30      	subs	r3, #48	@ 0x30
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d94b      	bls.n	800435e <_vfiprintf_r+0x1a2>
 80042c6:	b1b0      	cbz	r0, 80042f6 <_vfiprintf_r+0x13a>
 80042c8:	9207      	str	r2, [sp, #28]
 80042ca:	e014      	b.n	80042f6 <_vfiprintf_r+0x13a>
 80042cc:	eba0 0308 	sub.w	r3, r0, r8
 80042d0:	fa09 f303 	lsl.w	r3, r9, r3
 80042d4:	4313      	orrs	r3, r2
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	46a2      	mov	sl, r4
 80042da:	e7d2      	b.n	8004282 <_vfiprintf_r+0xc6>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	1d19      	adds	r1, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	9103      	str	r1, [sp, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfbb      	ittet	lt
 80042e8:	425b      	neglt	r3, r3
 80042ea:	f042 0202 	orrlt.w	r2, r2, #2
 80042ee:	9307      	strge	r3, [sp, #28]
 80042f0:	9307      	strlt	r3, [sp, #28]
 80042f2:	bfb8      	it	lt
 80042f4:	9204      	strlt	r2, [sp, #16]
 80042f6:	7823      	ldrb	r3, [r4, #0]
 80042f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80042fa:	d10a      	bne.n	8004312 <_vfiprintf_r+0x156>
 80042fc:	7863      	ldrb	r3, [r4, #1]
 80042fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004300:	d132      	bne.n	8004368 <_vfiprintf_r+0x1ac>
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	9203      	str	r2, [sp, #12]
 800430a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800430e:	3402      	adds	r4, #2
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043e8 <_vfiprintf_r+0x22c>
 8004316:	7821      	ldrb	r1, [r4, #0]
 8004318:	2203      	movs	r2, #3
 800431a:	4650      	mov	r0, sl
 800431c:	f7fb ff60 	bl	80001e0 <memchr>
 8004320:	b138      	cbz	r0, 8004332 <_vfiprintf_r+0x176>
 8004322:	9b04      	ldr	r3, [sp, #16]
 8004324:	eba0 000a 	sub.w	r0, r0, sl
 8004328:	2240      	movs	r2, #64	@ 0x40
 800432a:	4082      	lsls	r2, r0
 800432c:	4313      	orrs	r3, r2
 800432e:	3401      	adds	r4, #1
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004336:	4829      	ldr	r0, [pc, #164]	@ (80043dc <_vfiprintf_r+0x220>)
 8004338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800433c:	2206      	movs	r2, #6
 800433e:	f7fb ff4f 	bl	80001e0 <memchr>
 8004342:	2800      	cmp	r0, #0
 8004344:	d03f      	beq.n	80043c6 <_vfiprintf_r+0x20a>
 8004346:	4b26      	ldr	r3, [pc, #152]	@ (80043e0 <_vfiprintf_r+0x224>)
 8004348:	bb1b      	cbnz	r3, 8004392 <_vfiprintf_r+0x1d6>
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	3307      	adds	r3, #7
 800434e:	f023 0307 	bic.w	r3, r3, #7
 8004352:	3308      	adds	r3, #8
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004358:	443b      	add	r3, r7
 800435a:	9309      	str	r3, [sp, #36]	@ 0x24
 800435c:	e76a      	b.n	8004234 <_vfiprintf_r+0x78>
 800435e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004362:	460c      	mov	r4, r1
 8004364:	2001      	movs	r0, #1
 8004366:	e7a8      	b.n	80042ba <_vfiprintf_r+0xfe>
 8004368:	2300      	movs	r3, #0
 800436a:	3401      	adds	r4, #1
 800436c:	9305      	str	r3, [sp, #20]
 800436e:	4619      	mov	r1, r3
 8004370:	f04f 0c0a 	mov.w	ip, #10
 8004374:	4620      	mov	r0, r4
 8004376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437a:	3a30      	subs	r2, #48	@ 0x30
 800437c:	2a09      	cmp	r2, #9
 800437e:	d903      	bls.n	8004388 <_vfiprintf_r+0x1cc>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0c6      	beq.n	8004312 <_vfiprintf_r+0x156>
 8004384:	9105      	str	r1, [sp, #20]
 8004386:	e7c4      	b.n	8004312 <_vfiprintf_r+0x156>
 8004388:	fb0c 2101 	mla	r1, ip, r1, r2
 800438c:	4604      	mov	r4, r0
 800438e:	2301      	movs	r3, #1
 8004390:	e7f0      	b.n	8004374 <_vfiprintf_r+0x1b8>
 8004392:	ab03      	add	r3, sp, #12
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	462a      	mov	r2, r5
 8004398:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <_vfiprintf_r+0x228>)
 800439a:	a904      	add	r1, sp, #16
 800439c:	4630      	mov	r0, r6
 800439e:	f3af 8000 	nop.w
 80043a2:	4607      	mov	r7, r0
 80043a4:	1c78      	adds	r0, r7, #1
 80043a6:	d1d6      	bne.n	8004356 <_vfiprintf_r+0x19a>
 80043a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043aa:	07d9      	lsls	r1, r3, #31
 80043ac:	d405      	bmi.n	80043ba <_vfiprintf_r+0x1fe>
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	059a      	lsls	r2, r3, #22
 80043b2:	d402      	bmi.n	80043ba <_vfiprintf_r+0x1fe>
 80043b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043b6:	f7ff fd25 	bl	8003e04 <__retarget_lock_release_recursive>
 80043ba:	89ab      	ldrh	r3, [r5, #12]
 80043bc:	065b      	lsls	r3, r3, #25
 80043be:	f53f af1f 	bmi.w	8004200 <_vfiprintf_r+0x44>
 80043c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043c4:	e71e      	b.n	8004204 <_vfiprintf_r+0x48>
 80043c6:	ab03      	add	r3, sp, #12
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	462a      	mov	r2, r5
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <_vfiprintf_r+0x228>)
 80043ce:	a904      	add	r1, sp, #16
 80043d0:	4630      	mov	r0, r6
 80043d2:	f000 f879 	bl	80044c8 <_printf_i>
 80043d6:	e7e4      	b.n	80043a2 <_vfiprintf_r+0x1e6>
 80043d8:	08005034 	.word	0x08005034
 80043dc:	0800503e 	.word	0x0800503e
 80043e0:	00000000 	.word	0x00000000
 80043e4:	08004197 	.word	0x08004197
 80043e8:	0800503a 	.word	0x0800503a

080043ec <_printf_common>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	4616      	mov	r6, r2
 80043f2:	4698      	mov	r8, r3
 80043f4:	688a      	ldr	r2, [r1, #8]
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bfb8      	it	lt
 8004400:	4613      	movlt	r3, r2
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004408:	4607      	mov	r7, r0
 800440a:	460c      	mov	r4, r1
 800440c:	b10a      	cbz	r2, 8004412 <_printf_common+0x26>
 800440e:	3301      	adds	r3, #1
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	0699      	lsls	r1, r3, #26
 8004416:	bf42      	ittt	mi
 8004418:	6833      	ldrmi	r3, [r6, #0]
 800441a:	3302      	addmi	r3, #2
 800441c:	6033      	strmi	r3, [r6, #0]
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	f015 0506 	ands.w	r5, r5, #6
 8004424:	d106      	bne.n	8004434 <_printf_common+0x48>
 8004426:	f104 0a19 	add.w	sl, r4, #25
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	6832      	ldr	r2, [r6, #0]
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	42ab      	cmp	r3, r5
 8004432:	dc26      	bgt.n	8004482 <_printf_common+0x96>
 8004434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	3b00      	subs	r3, #0
 800443c:	bf18      	it	ne
 800443e:	2301      	movne	r3, #1
 8004440:	0692      	lsls	r2, r2, #26
 8004442:	d42b      	bmi.n	800449c <_printf_common+0xb0>
 8004444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004448:	4641      	mov	r1, r8
 800444a:	4638      	mov	r0, r7
 800444c:	47c8      	blx	r9
 800444e:	3001      	adds	r0, #1
 8004450:	d01e      	beq.n	8004490 <_printf_common+0xa4>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	6922      	ldr	r2, [r4, #16]
 8004456:	f003 0306 	and.w	r3, r3, #6
 800445a:	2b04      	cmp	r3, #4
 800445c:	bf02      	ittt	eq
 800445e:	68e5      	ldreq	r5, [r4, #12]
 8004460:	6833      	ldreq	r3, [r6, #0]
 8004462:	1aed      	subeq	r5, r5, r3
 8004464:	68a3      	ldr	r3, [r4, #8]
 8004466:	bf0c      	ite	eq
 8004468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800446c:	2500      	movne	r5, #0
 800446e:	4293      	cmp	r3, r2
 8004470:	bfc4      	itt	gt
 8004472:	1a9b      	subgt	r3, r3, r2
 8004474:	18ed      	addgt	r5, r5, r3
 8004476:	2600      	movs	r6, #0
 8004478:	341a      	adds	r4, #26
 800447a:	42b5      	cmp	r5, r6
 800447c:	d11a      	bne.n	80044b4 <_printf_common+0xc8>
 800447e:	2000      	movs	r0, #0
 8004480:	e008      	b.n	8004494 <_printf_common+0xa8>
 8004482:	2301      	movs	r3, #1
 8004484:	4652      	mov	r2, sl
 8004486:	4641      	mov	r1, r8
 8004488:	4638      	mov	r0, r7
 800448a:	47c8      	blx	r9
 800448c:	3001      	adds	r0, #1
 800448e:	d103      	bne.n	8004498 <_printf_common+0xac>
 8004490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	3501      	adds	r5, #1
 800449a:	e7c6      	b.n	800442a <_printf_common+0x3e>
 800449c:	18e1      	adds	r1, r4, r3
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	2030      	movs	r0, #48	@ 0x30
 80044a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044a6:	4422      	add	r2, r4
 80044a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044b0:	3302      	adds	r3, #2
 80044b2:	e7c7      	b.n	8004444 <_printf_common+0x58>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4622      	mov	r2, r4
 80044b8:	4641      	mov	r1, r8
 80044ba:	4638      	mov	r0, r7
 80044bc:	47c8      	blx	r9
 80044be:	3001      	adds	r0, #1
 80044c0:	d0e6      	beq.n	8004490 <_printf_common+0xa4>
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7d9      	b.n	800447a <_printf_common+0x8e>
	...

080044c8 <_printf_i>:
 80044c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	7e0f      	ldrb	r7, [r1, #24]
 80044ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044d0:	2f78      	cmp	r7, #120	@ 0x78
 80044d2:	4691      	mov	r9, r2
 80044d4:	4680      	mov	r8, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	469a      	mov	sl, r3
 80044da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044de:	d807      	bhi.n	80044f0 <_printf_i+0x28>
 80044e0:	2f62      	cmp	r7, #98	@ 0x62
 80044e2:	d80a      	bhi.n	80044fa <_printf_i+0x32>
 80044e4:	2f00      	cmp	r7, #0
 80044e6:	f000 80d2 	beq.w	800468e <_printf_i+0x1c6>
 80044ea:	2f58      	cmp	r7, #88	@ 0x58
 80044ec:	f000 80b9 	beq.w	8004662 <_printf_i+0x19a>
 80044f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044f8:	e03a      	b.n	8004570 <_printf_i+0xa8>
 80044fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044fe:	2b15      	cmp	r3, #21
 8004500:	d8f6      	bhi.n	80044f0 <_printf_i+0x28>
 8004502:	a101      	add	r1, pc, #4	@ (adr r1, 8004508 <_printf_i+0x40>)
 8004504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004508:	08004561 	.word	0x08004561
 800450c:	08004575 	.word	0x08004575
 8004510:	080044f1 	.word	0x080044f1
 8004514:	080044f1 	.word	0x080044f1
 8004518:	080044f1 	.word	0x080044f1
 800451c:	080044f1 	.word	0x080044f1
 8004520:	08004575 	.word	0x08004575
 8004524:	080044f1 	.word	0x080044f1
 8004528:	080044f1 	.word	0x080044f1
 800452c:	080044f1 	.word	0x080044f1
 8004530:	080044f1 	.word	0x080044f1
 8004534:	08004675 	.word	0x08004675
 8004538:	0800459f 	.word	0x0800459f
 800453c:	0800462f 	.word	0x0800462f
 8004540:	080044f1 	.word	0x080044f1
 8004544:	080044f1 	.word	0x080044f1
 8004548:	08004697 	.word	0x08004697
 800454c:	080044f1 	.word	0x080044f1
 8004550:	0800459f 	.word	0x0800459f
 8004554:	080044f1 	.word	0x080044f1
 8004558:	080044f1 	.word	0x080044f1
 800455c:	08004637 	.word	0x08004637
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6032      	str	r2, [r6, #0]
 8004568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800456c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004570:	2301      	movs	r3, #1
 8004572:	e09d      	b.n	80046b0 <_printf_i+0x1e8>
 8004574:	6833      	ldr	r3, [r6, #0]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	1d19      	adds	r1, r3, #4
 800457a:	6031      	str	r1, [r6, #0]
 800457c:	0606      	lsls	r6, r0, #24
 800457e:	d501      	bpl.n	8004584 <_printf_i+0xbc>
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	e003      	b.n	800458c <_printf_i+0xc4>
 8004584:	0645      	lsls	r5, r0, #25
 8004586:	d5fb      	bpl.n	8004580 <_printf_i+0xb8>
 8004588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800458c:	2d00      	cmp	r5, #0
 800458e:	da03      	bge.n	8004598 <_printf_i+0xd0>
 8004590:	232d      	movs	r3, #45	@ 0x2d
 8004592:	426d      	negs	r5, r5
 8004594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004598:	4859      	ldr	r0, [pc, #356]	@ (8004700 <_printf_i+0x238>)
 800459a:	230a      	movs	r3, #10
 800459c:	e011      	b.n	80045c2 <_printf_i+0xfa>
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	6833      	ldr	r3, [r6, #0]
 80045a2:	0608      	lsls	r0, r1, #24
 80045a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80045a8:	d402      	bmi.n	80045b0 <_printf_i+0xe8>
 80045aa:	0649      	lsls	r1, r1, #25
 80045ac:	bf48      	it	mi
 80045ae:	b2ad      	uxthmi	r5, r5
 80045b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80045b2:	4853      	ldr	r0, [pc, #332]	@ (8004700 <_printf_i+0x238>)
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	bf14      	ite	ne
 80045b8:	230a      	movne	r3, #10
 80045ba:	2308      	moveq	r3, #8
 80045bc:	2100      	movs	r1, #0
 80045be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045c2:	6866      	ldr	r6, [r4, #4]
 80045c4:	60a6      	str	r6, [r4, #8]
 80045c6:	2e00      	cmp	r6, #0
 80045c8:	bfa2      	ittt	ge
 80045ca:	6821      	ldrge	r1, [r4, #0]
 80045cc:	f021 0104 	bicge.w	r1, r1, #4
 80045d0:	6021      	strge	r1, [r4, #0]
 80045d2:	b90d      	cbnz	r5, 80045d8 <_printf_i+0x110>
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	d04b      	beq.n	8004670 <_printf_i+0x1a8>
 80045d8:	4616      	mov	r6, r2
 80045da:	fbb5 f1f3 	udiv	r1, r5, r3
 80045de:	fb03 5711 	mls	r7, r3, r1, r5
 80045e2:	5dc7      	ldrb	r7, [r0, r7]
 80045e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045e8:	462f      	mov	r7, r5
 80045ea:	42bb      	cmp	r3, r7
 80045ec:	460d      	mov	r5, r1
 80045ee:	d9f4      	bls.n	80045da <_printf_i+0x112>
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d10b      	bne.n	800460c <_printf_i+0x144>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	07df      	lsls	r7, r3, #31
 80045f8:	d508      	bpl.n	800460c <_printf_i+0x144>
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	6861      	ldr	r1, [r4, #4]
 80045fe:	4299      	cmp	r1, r3
 8004600:	bfde      	ittt	le
 8004602:	2330      	movle	r3, #48	@ 0x30
 8004604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004608:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800460c:	1b92      	subs	r2, r2, r6
 800460e:	6122      	str	r2, [r4, #16]
 8004610:	f8cd a000 	str.w	sl, [sp]
 8004614:	464b      	mov	r3, r9
 8004616:	aa03      	add	r2, sp, #12
 8004618:	4621      	mov	r1, r4
 800461a:	4640      	mov	r0, r8
 800461c:	f7ff fee6 	bl	80043ec <_printf_common>
 8004620:	3001      	adds	r0, #1
 8004622:	d14a      	bne.n	80046ba <_printf_i+0x1f2>
 8004624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004628:	b004      	add	sp, #16
 800462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	4833      	ldr	r0, [pc, #204]	@ (8004704 <_printf_i+0x23c>)
 8004638:	2778      	movs	r7, #120	@ 0x78
 800463a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6831      	ldr	r1, [r6, #0]
 8004642:	061f      	lsls	r7, r3, #24
 8004644:	f851 5b04 	ldr.w	r5, [r1], #4
 8004648:	d402      	bmi.n	8004650 <_printf_i+0x188>
 800464a:	065f      	lsls	r7, r3, #25
 800464c:	bf48      	it	mi
 800464e:	b2ad      	uxthmi	r5, r5
 8004650:	6031      	str	r1, [r6, #0]
 8004652:	07d9      	lsls	r1, r3, #31
 8004654:	bf44      	itt	mi
 8004656:	f043 0320 	orrmi.w	r3, r3, #32
 800465a:	6023      	strmi	r3, [r4, #0]
 800465c:	b11d      	cbz	r5, 8004666 <_printf_i+0x19e>
 800465e:	2310      	movs	r3, #16
 8004660:	e7ac      	b.n	80045bc <_printf_i+0xf4>
 8004662:	4827      	ldr	r0, [pc, #156]	@ (8004700 <_printf_i+0x238>)
 8004664:	e7e9      	b.n	800463a <_printf_i+0x172>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	e7f6      	b.n	800465e <_printf_i+0x196>
 8004670:	4616      	mov	r6, r2
 8004672:	e7bd      	b.n	80045f0 <_printf_i+0x128>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	6825      	ldr	r5, [r4, #0]
 8004678:	6961      	ldr	r1, [r4, #20]
 800467a:	1d18      	adds	r0, r3, #4
 800467c:	6030      	str	r0, [r6, #0]
 800467e:	062e      	lsls	r6, r5, #24
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	d501      	bpl.n	8004688 <_printf_i+0x1c0>
 8004684:	6019      	str	r1, [r3, #0]
 8004686:	e002      	b.n	800468e <_printf_i+0x1c6>
 8004688:	0668      	lsls	r0, r5, #25
 800468a:	d5fb      	bpl.n	8004684 <_printf_i+0x1bc>
 800468c:	8019      	strh	r1, [r3, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	4616      	mov	r6, r2
 8004694:	e7bc      	b.n	8004610 <_printf_i+0x148>
 8004696:	6833      	ldr	r3, [r6, #0]
 8004698:	1d1a      	adds	r2, r3, #4
 800469a:	6032      	str	r2, [r6, #0]
 800469c:	681e      	ldr	r6, [r3, #0]
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	2100      	movs	r1, #0
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7fb fd9c 	bl	80001e0 <memchr>
 80046a8:	b108      	cbz	r0, 80046ae <_printf_i+0x1e6>
 80046aa:	1b80      	subs	r0, r0, r6
 80046ac:	6060      	str	r0, [r4, #4]
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	2300      	movs	r3, #0
 80046b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b8:	e7aa      	b.n	8004610 <_printf_i+0x148>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d0ad      	beq.n	8004624 <_printf_i+0x15c>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079b      	lsls	r3, r3, #30
 80046cc:	d413      	bmi.n	80046f6 <_printf_i+0x22e>
 80046ce:	68e0      	ldr	r0, [r4, #12]
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	4298      	cmp	r0, r3
 80046d4:	bfb8      	it	lt
 80046d6:	4618      	movlt	r0, r3
 80046d8:	e7a6      	b.n	8004628 <_printf_i+0x160>
 80046da:	2301      	movs	r3, #1
 80046dc:	4632      	mov	r2, r6
 80046de:	4649      	mov	r1, r9
 80046e0:	4640      	mov	r0, r8
 80046e2:	47d0      	blx	sl
 80046e4:	3001      	adds	r0, #1
 80046e6:	d09d      	beq.n	8004624 <_printf_i+0x15c>
 80046e8:	3501      	adds	r5, #1
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	9903      	ldr	r1, [sp, #12]
 80046ee:	1a5b      	subs	r3, r3, r1
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dcf2      	bgt.n	80046da <_printf_i+0x212>
 80046f4:	e7eb      	b.n	80046ce <_printf_i+0x206>
 80046f6:	2500      	movs	r5, #0
 80046f8:	f104 0619 	add.w	r6, r4, #25
 80046fc:	e7f5      	b.n	80046ea <_printf_i+0x222>
 80046fe:	bf00      	nop
 8004700:	08005045 	.word	0x08005045
 8004704:	08005056 	.word	0x08005056

08004708 <__sflush_r>:
 8004708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	0716      	lsls	r6, r2, #28
 8004712:	4605      	mov	r5, r0
 8004714:	460c      	mov	r4, r1
 8004716:	d454      	bmi.n	80047c2 <__sflush_r+0xba>
 8004718:	684b      	ldr	r3, [r1, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	dc02      	bgt.n	8004724 <__sflush_r+0x1c>
 800471e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	dd48      	ble.n	80047b6 <__sflush_r+0xae>
 8004724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004726:	2e00      	cmp	r6, #0
 8004728:	d045      	beq.n	80047b6 <__sflush_r+0xae>
 800472a:	2300      	movs	r3, #0
 800472c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004730:	682f      	ldr	r7, [r5, #0]
 8004732:	6a21      	ldr	r1, [r4, #32]
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	d030      	beq.n	800479a <__sflush_r+0x92>
 8004738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	0759      	lsls	r1, r3, #29
 800473e:	d505      	bpl.n	800474c <__sflush_r+0x44>
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004746:	b10b      	cbz	r3, 800474c <__sflush_r+0x44>
 8004748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	2300      	movs	r3, #0
 800474e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004750:	6a21      	ldr	r1, [r4, #32]
 8004752:	4628      	mov	r0, r5
 8004754:	47b0      	blx	r6
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	d106      	bne.n	800476a <__sflush_r+0x62>
 800475c:	6829      	ldr	r1, [r5, #0]
 800475e:	291d      	cmp	r1, #29
 8004760:	d82b      	bhi.n	80047ba <__sflush_r+0xb2>
 8004762:	4a2a      	ldr	r2, [pc, #168]	@ (800480c <__sflush_r+0x104>)
 8004764:	410a      	asrs	r2, r1
 8004766:	07d6      	lsls	r6, r2, #31
 8004768:	d427      	bmi.n	80047ba <__sflush_r+0xb2>
 800476a:	2200      	movs	r2, #0
 800476c:	6062      	str	r2, [r4, #4]
 800476e:	04d9      	lsls	r1, r3, #19
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	6022      	str	r2, [r4, #0]
 8004774:	d504      	bpl.n	8004780 <__sflush_r+0x78>
 8004776:	1c42      	adds	r2, r0, #1
 8004778:	d101      	bne.n	800477e <__sflush_r+0x76>
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	b903      	cbnz	r3, 8004780 <__sflush_r+0x78>
 800477e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004782:	602f      	str	r7, [r5, #0]
 8004784:	b1b9      	cbz	r1, 80047b6 <__sflush_r+0xae>
 8004786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800478a:	4299      	cmp	r1, r3
 800478c:	d002      	beq.n	8004794 <__sflush_r+0x8c>
 800478e:	4628      	mov	r0, r5
 8004790:	f7ff fb48 	bl	8003e24 <_free_r>
 8004794:	2300      	movs	r3, #0
 8004796:	6363      	str	r3, [r4, #52]	@ 0x34
 8004798:	e00d      	b.n	80047b6 <__sflush_r+0xae>
 800479a:	2301      	movs	r3, #1
 800479c:	4628      	mov	r0, r5
 800479e:	47b0      	blx	r6
 80047a0:	4602      	mov	r2, r0
 80047a2:	1c50      	adds	r0, r2, #1
 80047a4:	d1c9      	bne.n	800473a <__sflush_r+0x32>
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0c6      	beq.n	800473a <__sflush_r+0x32>
 80047ac:	2b1d      	cmp	r3, #29
 80047ae:	d001      	beq.n	80047b4 <__sflush_r+0xac>
 80047b0:	2b16      	cmp	r3, #22
 80047b2:	d11e      	bne.n	80047f2 <__sflush_r+0xea>
 80047b4:	602f      	str	r7, [r5, #0]
 80047b6:	2000      	movs	r0, #0
 80047b8:	e022      	b.n	8004800 <__sflush_r+0xf8>
 80047ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047be:	b21b      	sxth	r3, r3
 80047c0:	e01b      	b.n	80047fa <__sflush_r+0xf2>
 80047c2:	690f      	ldr	r7, [r1, #16]
 80047c4:	2f00      	cmp	r7, #0
 80047c6:	d0f6      	beq.n	80047b6 <__sflush_r+0xae>
 80047c8:	0793      	lsls	r3, r2, #30
 80047ca:	680e      	ldr	r6, [r1, #0]
 80047cc:	bf08      	it	eq
 80047ce:	694b      	ldreq	r3, [r1, #20]
 80047d0:	600f      	str	r7, [r1, #0]
 80047d2:	bf18      	it	ne
 80047d4:	2300      	movne	r3, #0
 80047d6:	eba6 0807 	sub.w	r8, r6, r7
 80047da:	608b      	str	r3, [r1, #8]
 80047dc:	f1b8 0f00 	cmp.w	r8, #0
 80047e0:	dde9      	ble.n	80047b6 <__sflush_r+0xae>
 80047e2:	6a21      	ldr	r1, [r4, #32]
 80047e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047e6:	4643      	mov	r3, r8
 80047e8:	463a      	mov	r2, r7
 80047ea:	4628      	mov	r0, r5
 80047ec:	47b0      	blx	r6
 80047ee:	2800      	cmp	r0, #0
 80047f0:	dc08      	bgt.n	8004804 <__sflush_r+0xfc>
 80047f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004804:	4407      	add	r7, r0
 8004806:	eba8 0800 	sub.w	r8, r8, r0
 800480a:	e7e7      	b.n	80047dc <__sflush_r+0xd4>
 800480c:	dfbffffe 	.word	0xdfbffffe

08004810 <_fflush_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4605      	mov	r5, r0
 8004816:	460c      	mov	r4, r1
 8004818:	b913      	cbnz	r3, 8004820 <_fflush_r+0x10>
 800481a:	2500      	movs	r5, #0
 800481c:	4628      	mov	r0, r5
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	b118      	cbz	r0, 800482a <_fflush_r+0x1a>
 8004822:	6a03      	ldr	r3, [r0, #32]
 8004824:	b90b      	cbnz	r3, 800482a <_fflush_r+0x1a>
 8004826:	f7ff fa03 	bl	8003c30 <__sinit>
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f3      	beq.n	800481a <_fflush_r+0xa>
 8004832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004834:	07d0      	lsls	r0, r2, #31
 8004836:	d404      	bmi.n	8004842 <_fflush_r+0x32>
 8004838:	0599      	lsls	r1, r3, #22
 800483a:	d402      	bmi.n	8004842 <_fflush_r+0x32>
 800483c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800483e:	f7ff fae0 	bl	8003e02 <__retarget_lock_acquire_recursive>
 8004842:	4628      	mov	r0, r5
 8004844:	4621      	mov	r1, r4
 8004846:	f7ff ff5f 	bl	8004708 <__sflush_r>
 800484a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800484c:	07da      	lsls	r2, r3, #31
 800484e:	4605      	mov	r5, r0
 8004850:	d4e4      	bmi.n	800481c <_fflush_r+0xc>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	059b      	lsls	r3, r3, #22
 8004856:	d4e1      	bmi.n	800481c <_fflush_r+0xc>
 8004858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800485a:	f7ff fad3 	bl	8003e04 <__retarget_lock_release_recursive>
 800485e:	e7dd      	b.n	800481c <_fflush_r+0xc>

08004860 <__sread>:
 8004860:	b510      	push	{r4, lr}
 8004862:	460c      	mov	r4, r1
 8004864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004868:	f000 f9c0 	bl	8004bec <_read_r>
 800486c:	2800      	cmp	r0, #0
 800486e:	bfab      	itete	ge
 8004870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004872:	89a3      	ldrhlt	r3, [r4, #12]
 8004874:	181b      	addge	r3, r3, r0
 8004876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800487a:	bfac      	ite	ge
 800487c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800487e:	81a3      	strhlt	r3, [r4, #12]
 8004880:	bd10      	pop	{r4, pc}

08004882 <__swrite>:
 8004882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004886:	461f      	mov	r7, r3
 8004888:	898b      	ldrh	r3, [r1, #12]
 800488a:	05db      	lsls	r3, r3, #23
 800488c:	4605      	mov	r5, r0
 800488e:	460c      	mov	r4, r1
 8004890:	4616      	mov	r6, r2
 8004892:	d505      	bpl.n	80048a0 <__swrite+0x1e>
 8004894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004898:	2302      	movs	r3, #2
 800489a:	2200      	movs	r2, #0
 800489c:	f000 f994 	bl	8004bc8 <_lseek_r>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	4628      	mov	r0, r5
 80048b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	f000 b9ab 	b.w	8004c10 <_write_r>

080048ba <__sseek>:
 80048ba:	b510      	push	{r4, lr}
 80048bc:	460c      	mov	r4, r1
 80048be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c2:	f000 f981 	bl	8004bc8 <_lseek_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	bf15      	itete	ne
 80048cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048d6:	81a3      	strheq	r3, [r4, #12]
 80048d8:	bf18      	it	ne
 80048da:	81a3      	strhne	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__sclose>:
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 b93f 	b.w	8004b64 <_close_r>

080048e6 <_realloc_r>:
 80048e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ea:	4680      	mov	r8, r0
 80048ec:	4615      	mov	r5, r2
 80048ee:	460c      	mov	r4, r1
 80048f0:	b921      	cbnz	r1, 80048fc <_realloc_r+0x16>
 80048f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	4611      	mov	r1, r2
 80048f8:	f7ff b84e 	b.w	8003998 <_malloc_r>
 80048fc:	b92a      	cbnz	r2, 800490a <_realloc_r+0x24>
 80048fe:	f7ff fa91 	bl	8003e24 <_free_r>
 8004902:	2400      	movs	r4, #0
 8004904:	4620      	mov	r0, r4
 8004906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490a:	f000 f993 	bl	8004c34 <_malloc_usable_size_r>
 800490e:	4285      	cmp	r5, r0
 8004910:	4606      	mov	r6, r0
 8004912:	d802      	bhi.n	800491a <_realloc_r+0x34>
 8004914:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004918:	d8f4      	bhi.n	8004904 <_realloc_r+0x1e>
 800491a:	4629      	mov	r1, r5
 800491c:	4640      	mov	r0, r8
 800491e:	f7ff f83b 	bl	8003998 <_malloc_r>
 8004922:	4607      	mov	r7, r0
 8004924:	2800      	cmp	r0, #0
 8004926:	d0ec      	beq.n	8004902 <_realloc_r+0x1c>
 8004928:	42b5      	cmp	r5, r6
 800492a:	462a      	mov	r2, r5
 800492c:	4621      	mov	r1, r4
 800492e:	bf28      	it	cs
 8004930:	4632      	movcs	r2, r6
 8004932:	f7ff fa68 	bl	8003e06 <memcpy>
 8004936:	4621      	mov	r1, r4
 8004938:	4640      	mov	r0, r8
 800493a:	f7ff fa73 	bl	8003e24 <_free_r>
 800493e:	463c      	mov	r4, r7
 8004940:	e7e0      	b.n	8004904 <_realloc_r+0x1e>

08004942 <__swbuf_r>:
 8004942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004944:	460e      	mov	r6, r1
 8004946:	4614      	mov	r4, r2
 8004948:	4605      	mov	r5, r0
 800494a:	b118      	cbz	r0, 8004954 <__swbuf_r+0x12>
 800494c:	6a03      	ldr	r3, [r0, #32]
 800494e:	b90b      	cbnz	r3, 8004954 <__swbuf_r+0x12>
 8004950:	f7ff f96e 	bl	8003c30 <__sinit>
 8004954:	69a3      	ldr	r3, [r4, #24]
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	071a      	lsls	r2, r3, #28
 800495c:	d501      	bpl.n	8004962 <__swbuf_r+0x20>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	b943      	cbnz	r3, 8004974 <__swbuf_r+0x32>
 8004962:	4621      	mov	r1, r4
 8004964:	4628      	mov	r0, r5
 8004966:	f000 f82b 	bl	80049c0 <__swsetup_r>
 800496a:	b118      	cbz	r0, 8004974 <__swbuf_r+0x32>
 800496c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004970:	4638      	mov	r0, r7
 8004972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	6922      	ldr	r2, [r4, #16]
 8004978:	1a98      	subs	r0, r3, r2
 800497a:	6963      	ldr	r3, [r4, #20]
 800497c:	b2f6      	uxtb	r6, r6
 800497e:	4283      	cmp	r3, r0
 8004980:	4637      	mov	r7, r6
 8004982:	dc05      	bgt.n	8004990 <__swbuf_r+0x4e>
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f7ff ff42 	bl	8004810 <_fflush_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d1ed      	bne.n	800496c <__swbuf_r+0x2a>
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	3b01      	subs	r3, #1
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	701e      	strb	r6, [r3, #0]
 800499e:	6962      	ldr	r2, [r4, #20]
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d004      	beq.n	80049b0 <__swbuf_r+0x6e>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	07db      	lsls	r3, r3, #31
 80049aa:	d5e1      	bpl.n	8004970 <__swbuf_r+0x2e>
 80049ac:	2e0a      	cmp	r6, #10
 80049ae:	d1df      	bne.n	8004970 <__swbuf_r+0x2e>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f7ff ff2c 	bl	8004810 <_fflush_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d0d9      	beq.n	8004970 <__swbuf_r+0x2e>
 80049bc:	e7d6      	b.n	800496c <__swbuf_r+0x2a>
	...

080049c0 <__swsetup_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <__swsetup_r+0xa8>)
 80049c4:	4605      	mov	r5, r0
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	460c      	mov	r4, r1
 80049ca:	b118      	cbz	r0, 80049d4 <__swsetup_r+0x14>
 80049cc:	6a03      	ldr	r3, [r0, #32]
 80049ce:	b90b      	cbnz	r3, 80049d4 <__swsetup_r+0x14>
 80049d0:	f7ff f92e 	bl	8003c30 <__sinit>
 80049d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d8:	0719      	lsls	r1, r3, #28
 80049da:	d422      	bmi.n	8004a22 <__swsetup_r+0x62>
 80049dc:	06da      	lsls	r2, r3, #27
 80049de:	d407      	bmi.n	80049f0 <__swsetup_r+0x30>
 80049e0:	2209      	movs	r2, #9
 80049e2:	602a      	str	r2, [r5, #0]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049ee:	e033      	b.n	8004a58 <__swsetup_r+0x98>
 80049f0:	0758      	lsls	r0, r3, #29
 80049f2:	d512      	bpl.n	8004a1a <__swsetup_r+0x5a>
 80049f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f6:	b141      	cbz	r1, 8004a0a <__swsetup_r+0x4a>
 80049f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049fc:	4299      	cmp	r1, r3
 80049fe:	d002      	beq.n	8004a06 <__swsetup_r+0x46>
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff fa0f 	bl	8003e24 <_free_r>
 8004a06:	2300      	movs	r3, #0
 8004a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	2300      	movs	r3, #0
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f043 0308 	orr.w	r3, r3, #8
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	b94b      	cbnz	r3, 8004a3a <__swsetup_r+0x7a>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a30:	d003      	beq.n	8004a3a <__swsetup_r+0x7a>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f83f 	bl	8004ab8 <__smakebuf_r>
 8004a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3e:	f013 0201 	ands.w	r2, r3, #1
 8004a42:	d00a      	beq.n	8004a5a <__swsetup_r+0x9a>
 8004a44:	2200      	movs	r2, #0
 8004a46:	60a2      	str	r2, [r4, #8]
 8004a48:	6962      	ldr	r2, [r4, #20]
 8004a4a:	4252      	negs	r2, r2
 8004a4c:	61a2      	str	r2, [r4, #24]
 8004a4e:	6922      	ldr	r2, [r4, #16]
 8004a50:	b942      	cbnz	r2, 8004a64 <__swsetup_r+0xa4>
 8004a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a56:	d1c5      	bne.n	80049e4 <__swsetup_r+0x24>
 8004a58:	bd38      	pop	{r3, r4, r5, pc}
 8004a5a:	0799      	lsls	r1, r3, #30
 8004a5c:	bf58      	it	pl
 8004a5e:	6962      	ldrpl	r2, [r4, #20]
 8004a60:	60a2      	str	r2, [r4, #8]
 8004a62:	e7f4      	b.n	8004a4e <__swsetup_r+0x8e>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e7f7      	b.n	8004a58 <__swsetup_r+0x98>
 8004a68:	2000015c 	.word	0x2000015c

08004a6c <__swhatbuf_r>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	2900      	cmp	r1, #0
 8004a76:	b096      	sub	sp, #88	@ 0x58
 8004a78:	4615      	mov	r5, r2
 8004a7a:	461e      	mov	r6, r3
 8004a7c:	da0d      	bge.n	8004a9a <__swhatbuf_r+0x2e>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a84:	f04f 0100 	mov.w	r1, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2340      	movne	r3, #64	@ 0x40
 8004a8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a90:	2000      	movs	r0, #0
 8004a92:	6031      	str	r1, [r6, #0]
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	b016      	add	sp, #88	@ 0x58
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	466a      	mov	r2, sp
 8004a9c:	f000 f872 	bl	8004b84 <_fstat_r>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	dbec      	blt.n	8004a7e <__swhatbuf_r+0x12>
 8004aa4:	9901      	ldr	r1, [sp, #4]
 8004aa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004aaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004aae:	4259      	negs	r1, r3
 8004ab0:	4159      	adcs	r1, r3
 8004ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ab6:	e7eb      	b.n	8004a90 <__swhatbuf_r+0x24>

08004ab8 <__smakebuf_r>:
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004abc:	079d      	lsls	r5, r3, #30
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	d507      	bpl.n	8004ad4 <__smakebuf_r+0x1c>
 8004ac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2301      	movs	r3, #1
 8004ace:	6163      	str	r3, [r4, #20]
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	ab01      	add	r3, sp, #4
 8004ad6:	466a      	mov	r2, sp
 8004ad8:	f7ff ffc8 	bl	8004a6c <__swhatbuf_r>
 8004adc:	9f00      	ldr	r7, [sp, #0]
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7fe ff58 	bl	8003998 <_malloc_r>
 8004ae8:	b948      	cbnz	r0, 8004afe <__smakebuf_r+0x46>
 8004aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aee:	059a      	lsls	r2, r3, #22
 8004af0:	d4ee      	bmi.n	8004ad0 <__smakebuf_r+0x18>
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	f043 0302 	orr.w	r3, r3, #2
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	e7e2      	b.n	8004ac4 <__smakebuf_r+0xc>
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	6020      	str	r0, [r4, #0]
 8004b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b06:	81a3      	strh	r3, [r4, #12]
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b0e:	b15b      	cbz	r3, 8004b28 <__smakebuf_r+0x70>
 8004b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 f847 	bl	8004ba8 <_isatty_r>
 8004b1a:	b128      	cbz	r0, 8004b28 <__smakebuf_r+0x70>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	81a3      	strh	r3, [r4, #12]
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	431d      	orrs	r5, r3
 8004b2c:	81a5      	strh	r5, [r4, #12]
 8004b2e:	e7cf      	b.n	8004ad0 <__smakebuf_r+0x18>

08004b30 <memmove>:
 8004b30:	4288      	cmp	r0, r1
 8004b32:	b510      	push	{r4, lr}
 8004b34:	eb01 0402 	add.w	r4, r1, r2
 8004b38:	d902      	bls.n	8004b40 <memmove+0x10>
 8004b3a:	4284      	cmp	r4, r0
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	d807      	bhi.n	8004b50 <memmove+0x20>
 8004b40:	1e43      	subs	r3, r0, #1
 8004b42:	42a1      	cmp	r1, r4
 8004b44:	d008      	beq.n	8004b58 <memmove+0x28>
 8004b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4e:	e7f8      	b.n	8004b42 <memmove+0x12>
 8004b50:	4402      	add	r2, r0
 8004b52:	4601      	mov	r1, r0
 8004b54:	428a      	cmp	r2, r1
 8004b56:	d100      	bne.n	8004b5a <memmove+0x2a>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b62:	e7f7      	b.n	8004b54 <memmove+0x24>

08004b64 <_close_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d06      	ldr	r5, [pc, #24]	@ (8004b80 <_close_r+0x1c>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fc fe30 	bl	80017d4 <_close>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_close_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_close_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200004b8 	.word	0x200004b8

08004b84 <_fstat_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	@ (8004ba4 <_fstat_r+0x20>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	f7fc fe2b 	bl	80017ec <_fstat>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	d102      	bne.n	8004ba0 <_fstat_r+0x1c>
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	b103      	cbz	r3, 8004ba0 <_fstat_r+0x1c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200004b8 	.word	0x200004b8

08004ba8 <_isatty_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	@ (8004bc4 <_isatty_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fc fe2a 	bl	800180c <_isatty>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_isatty_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_isatty_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	200004b8 	.word	0x200004b8

08004bc8 <_lseek_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d07      	ldr	r5, [pc, #28]	@ (8004be8 <_lseek_r+0x20>)
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fc fe23 	bl	8001822 <_lseek>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_lseek_r+0x1e>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_lseek_r+0x1e>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200004b8 	.word	0x200004b8

08004bec <_read_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d07      	ldr	r5, [pc, #28]	@ (8004c0c <_read_r+0x20>)
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7fc fda0 	bl	8001740 <_read>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_read_r+0x1e>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_read_r+0x1e>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	200004b8 	.word	0x200004b8

08004c10 <_write_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d07      	ldr	r5, [pc, #28]	@ (8004c30 <_write_r+0x20>)
 8004c14:	4604      	mov	r4, r0
 8004c16:	4608      	mov	r0, r1
 8004c18:	4611      	mov	r1, r2
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	602a      	str	r2, [r5, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f7fc fa24 	bl	800106c <_write>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_write_r+0x1e>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_write_r+0x1e>
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	200004b8 	.word	0x200004b8

08004c34 <_malloc_usable_size_r>:
 8004c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c38:	1f18      	subs	r0, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfbc      	itt	lt
 8004c3e:	580b      	ldrlt	r3, [r1, r0]
 8004c40:	18c0      	addlt	r0, r0, r3
 8004c42:	4770      	bx	lr

08004c44 <_init>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr

08004c50 <_fini>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr
