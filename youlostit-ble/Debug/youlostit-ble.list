
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800310c  0800310c  0000518c  2**0
                  CONTENTS
  4 .ARM          00000000  0800310c  0800310c  0000518c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800310c  0800310c  0000518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800310c  0800310c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003110  08003110  00004110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08003114  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000018c  080032a0  0000518c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080032a0  0000547c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000518c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f58  00000000  00000000  000051bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a60  00000000  00000000  0000e114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a6  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ec3  00000000  00000000  00010b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009610  00000000  00000000  000379c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0bf3  00000000  00000000  00040fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  00131c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0013429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000018c 	.word	0x2000018c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003090 	.word	0x08003090

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000190 	.word	0x20000190
 80001c4:	08003090 	.word	0x08003090

080001c8 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler
 
 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80001ce:	2006      	movs	r0, #6
 80001d0:	f002 fe04 	bl	8002ddc <malloc>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b70      	ldr	r3, [pc, #448]	@ (800039c <ble_init+0x1d4>)
 80001da:	601a      	str	r2, [r3, #0]
	 int res;
 
	 while(!dataAvailable);
 80001dc:	bf00      	nop
 80001de:	4b70      	ldr	r3, [pc, #448]	@ (80003a0 <ble_init+0x1d8>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0fb      	beq.n	80001de <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80001e6:	4b6d      	ldr	r3, [pc, #436]	@ (800039c <ble_init+0x1d4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2106      	movs	r1, #6
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f905 	bl	80003fc <fetchBleEvent>
 80001f2:	6078      	str	r0, [r7, #4]
 
	 if(res==BLE_OK){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d111      	bne.n	800021e <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80001fa:	4b68      	ldr	r3, [pc, #416]	@ (800039c <ble_init+0x1d4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2206      	movs	r2, #6
 8000200:	4968      	ldr	r1, [pc, #416]	@ (80003a4 <ble_init+0x1dc>)
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f984 	bl	8000510 <checkEventResp>
 8000208:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d106      	bne.n	800021e <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 8000210:	4b65      	ldr	r3, [pc, #404]	@ (80003a8 <ble_init+0x1e0>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b63      	ldr	r3, [pc, #396]	@ (80003a8 <ble_init+0x1e0>)
 800021c:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 800021e:	200a      	movs	r0, #10
 8000220:	f000 fede 	bl	8000fe0 <HAL_Delay>
	 free(rxEvent);
 8000224:	4b5d      	ldr	r3, [pc, #372]	@ (800039c <ble_init+0x1d4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f002 fddf 	bl	8002dec <free>
 
	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2307      	movs	r3, #7
 8000234:	4a5d      	ldr	r2, [pc, #372]	@ (80003ac <ble_init+0x1e4>)
 8000236:	2104      	movs	r1, #4
 8000238:	485d      	ldr	r0, [pc, #372]	@ (80003b0 <ble_init+0x1e8>)
 800023a:	f000 faa1 	bl	8000780 <BLE_command>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d106      	bne.n	8000252 <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 8000244:	4b58      	ldr	r3, [pc, #352]	@ (80003a8 <ble_init+0x1e0>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b56      	ldr	r3, [pc, #344]	@ (80003a8 <ble_init+0x1e0>)
 8000250:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000252:	4b52      	ldr	r3, [pc, #328]	@ (800039c <ble_init+0x1d4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fdc8 	bl	8002dec <free>
 
	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 800025c:	2303      	movs	r3, #3
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2307      	movs	r3, #7
 8000262:	4a54      	ldr	r2, [pc, #336]	@ (80003b4 <ble_init+0x1ec>)
 8000264:	2107      	movs	r1, #7
 8000266:	4854      	ldr	r0, [pc, #336]	@ (80003b8 <ble_init+0x1f0>)
 8000268:	f000 fa8a 	bl	8000780 <BLE_command>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d11b      	bne.n	80002aa <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 8000272:	4b4d      	ldr	r3, [pc, #308]	@ (80003a8 <ble_init+0x1e0>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b4a      	ldr	r3, [pc, #296]	@ (80003a8 <ble_init+0x1e0>)
 800027e:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000280:	4b46      	ldr	r3, [pc, #280]	@ (800039c <ble_init+0x1d4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3307      	adds	r3, #7
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	4b4c      	ldr	r3, [pc, #304]	@ (80003bc <ble_init+0x1f4>)
 800028c:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 800028e:	4b43      	ldr	r3, [pc, #268]	@ (800039c <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3309      	adds	r3, #9
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b49      	ldr	r3, [pc, #292]	@ (80003c0 <ble_init+0x1f8>)
 800029a:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 800029c:	4b3f      	ldr	r3, [pc, #252]	@ (800039c <ble_init+0x1d4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	330b      	adds	r3, #11
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b47      	ldr	r3, [pc, #284]	@ (80003c4 <ble_init+0x1fc>)
 80002a8:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80002aa:	4b3c      	ldr	r3, [pc, #240]	@ (800039c <ble_init+0x1d4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fd9c 	bl	8002dec <free>
 
	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80002b4:	4b44      	ldr	r3, [pc, #272]	@ (80003c8 <ble_init+0x200>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2307      	movs	r3, #7
 80002ba:	2200      	movs	r2, #0
 80002bc:	4940      	ldr	r1, [pc, #256]	@ (80003c0 <ble_init+0x1f8>)
 80002be:	483f      	ldr	r0, [pc, #252]	@ (80003bc <ble_init+0x1f4>)
 80002c0:	f000 fb24 	bl	800090c <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 80002c4:	4b38      	ldr	r3, [pc, #224]	@ (80003a8 <ble_init+0x1e0>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4b36      	ldr	r3, [pc, #216]	@ (80003a8 <ble_init+0x1e0>)
 80002d0:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 80002d2:	4b32      	ldr	r3, [pc, #200]	@ (800039c <ble_init+0x1d4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fd88 	bl	8002dec <free>
 
	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80002dc:	2300      	movs	r3, #0
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2307      	movs	r3, #7
 80002e2:	4a3a      	ldr	r2, [pc, #232]	@ (80003cc <ble_init+0x204>)
 80002e4:	2110      	movs	r1, #16
 80002e6:	483a      	ldr	r0, [pc, #232]	@ (80003d0 <ble_init+0x208>)
 80002e8:	f000 fa4a 	bl	8000780 <BLE_command>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d106      	bne.n	8000300 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	@ (80003a8 <ble_init+0x1e0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b2a      	ldr	r3, [pc, #168]	@ (80003a8 <ble_init+0x1e0>)
 80002fe:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <ble_init+0x1d4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fd71 	bl	8002dec <free>
 
	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800030a:	2300      	movs	r3, #0
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2307      	movs	r3, #7
 8000310:	4a30      	ldr	r2, [pc, #192]	@ (80003d4 <ble_init+0x20c>)
 8000312:	2106      	movs	r1, #6
 8000314:	4830      	ldr	r0, [pc, #192]	@ (80003d8 <ble_init+0x210>)
 8000316:	f000 fa33 	bl	8000780 <BLE_command>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d106      	bne.n	800032e <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 8000320:	4b21      	ldr	r3, [pc, #132]	@ (80003a8 <ble_init+0x1e0>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b1f      	ldr	r3, [pc, #124]	@ (80003a8 <ble_init+0x1e0>)
 800032c:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800032e:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <ble_init+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fd5a 	bl	8002dec <free>
 
	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000338:	2300      	movs	r3, #0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2307      	movs	r3, #7
 800033e:	4a27      	ldr	r2, [pc, #156]	@ (80003dc <ble_init+0x214>)
 8000340:	2124      	movs	r1, #36	@ 0x24
 8000342:	4827      	ldr	r0, [pc, #156]	@ (80003e0 <ble_init+0x218>)
 8000344:	f000 fa1c 	bl	8000780 <BLE_command>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d106      	bne.n	800035c <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 800034e:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <ble_init+0x1e0>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <ble_init+0x1e0>)
 800035a:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <ble_init+0x1d4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fd43 	bl	8002dec <free>
 
	 //This will start the advertisment,
	 setConnectable();
 8000366:	f000 f98b 	bl	8000680 <setConnectable>
 
	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800036a:	2207      	movs	r2, #7
 800036c:	491d      	ldr	r1, [pc, #116]	@ (80003e4 <ble_init+0x21c>)
 800036e:	481e      	ldr	r0, [pc, #120]	@ (80003e8 <ble_init+0x220>)
 8000370:	f000 fa52 	bl	8000818 <addService>
 
	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000374:	2310      	movs	r3, #16
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2314      	movs	r3, #20
 800037a:	4a1a      	ldr	r2, [pc, #104]	@ (80003e4 <ble_init+0x21c>)
 800037c:	491b      	ldr	r1, [pc, #108]	@ (80003ec <ble_init+0x224>)
 800037e:	481c      	ldr	r0, [pc, #112]	@ (80003f0 <ble_init+0x228>)
 8000380:	f000 fa82 	bl	8000888 <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000384:	2304      	movs	r3, #4
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2314      	movs	r3, #20
 800038a:	4a16      	ldr	r2, [pc, #88]	@ (80003e4 <ble_init+0x21c>)
 800038c:	4919      	ldr	r1, [pc, #100]	@ (80003f4 <ble_init+0x22c>)
 800038e:	481a      	ldr	r0, [pc, #104]	@ (80003f8 <ble_init+0x230>)
 8000390:	f000 fa7a 	bl	8000888 <addCharacteristic>
 
	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 8000394:	bf00      	nop
 }
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200002c0 	.word	0x200002c0
 80003a0:	200002c4 	.word	0x200002c4
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200002be 	.word	0x200002be
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000008 	.word	0x20000008
 80003b4:	2000001c 	.word	0x2000001c
 80003b8:	20000014 	.word	0x20000014
 80003bc:	200001a8 	.word	0x200001a8
 80003c0:	200001ac 	.word	0x200001ac
 80003c4:	200001b0 	.word	0x200001b0
 80003c8:	200000f4 	.word	0x200000f4
 80003cc:	20000034 	.word	0x20000034
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000044 	.word	0x20000044
 80003d8:	2000003c 	.word	0x2000003c
 80003dc:	20000070 	.word	0x20000070
 80003e0:	2000004c 	.word	0x2000004c
 80003e4:	200002b4 	.word	0x200002b4
 80003e8:	200000fc 	.word	0x200000fc
 80003ec:	200002bc 	.word	0x200002bc
 80003f0:	2000011c 	.word	0x2000011c
 80003f4:	200002b8 	.word	0x200002b8
 80003f8:	2000010c 	.word	0x2000010c

080003fc <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }
 
 int fetchBleEvent(uint8_t *container, int size){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	@ 0x30
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
 
   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000406:	4a3d      	ldr	r2, [pc, #244]	@ (80004fc <fetchBleEvent+0x100>)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];
 
   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000416:	2140      	movs	r1, #64	@ 0x40
 8000418:	4839      	ldr	r0, [pc, #228]	@ (8000500 <fetchBleEvent+0x104>)
 800041a:	f001 f8c1 	bl	80015a0 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d065      	beq.n	80004f0 <fetchBleEvent+0xf4>
 
   HAL_Delay(5);
 8000424:	2005      	movs	r0, #5
 8000426:	f000 fddb 	bl	8000fe0 <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000430:	4834      	ldr	r0, [pc, #208]	@ (8000504 <fetchBleEvent+0x108>)
 8000432:	f001 f8cd 	bl	80015d0 <HAL_GPIO_WritePin>
 
   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000436:	f107 0210 	add.w	r2, r7, #16
 800043a:	f107 0118 	add.w	r1, r7, #24
 800043e:	2301      	movs	r3, #1
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2305      	movs	r3, #5
 8000444:	4830      	ldr	r0, [pc, #192]	@ (8000508 <fetchBleEvent+0x10c>)
 8000446:	f002 f943 	bl	80026d0 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000450:	482c      	ldr	r0, [pc, #176]	@ (8000504 <fetchBleEvent+0x108>)
 8000452:	f001 f8bd 	bl	80015d0 <HAL_GPIO_WritePin>
   HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fdc2 	bl	8000fe0 <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	4828      	ldr	r0, [pc, #160]	@ (8000504 <fetchBleEvent+0x108>)
 8000464:	f001 f8b4 	bl	80015d0 <HAL_GPIO_WritePin>
 
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000468:	f107 0210 	add.w	r2, r7, #16
 800046c:	f107 0118 	add.w	r1, r7, #24
 8000470:	2301      	movs	r3, #1
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2305      	movs	r3, #5
 8000476:	4824      	ldr	r0, [pc, #144]	@ (8000508 <fetchBleEvent+0x10c>)
 8000478:	f002 f92a 	bl	80026d0 <HAL_SPI_TransmitReceive>
 
   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 800047c:	7cfb      	ldrb	r3, [r7, #19]
 800047e:	461a      	mov	r2, r3
 8000480:	7d3b      	ldrb	r3, [r7, #20]
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	4313      	orrs	r3, r2
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000488:	23ff      	movs	r3, #255	@ 0xff
 800048a:	73fb      	strb	r3, [r7, #15]
 
   if(dataSize>size){
 800048c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	dd01      	ble.n	8000498 <fetchBleEvent+0x9c>
	   dataSize=size;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	627b      	str	r3, [r7, #36]	@ 0x24
   }
 
   if(dataSize>0){
 8000498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800049a:	2b00      	cmp	r3, #0
 800049c:	dd1f      	ble.n	80004de <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	e00d      	b.n	80004c0 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	441a      	add	r2, r3
 80004aa:	f107 010f 	add.w	r1, r7, #15
 80004ae:	2301      	movs	r3, #1
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4814      	ldr	r0, [pc, #80]	@ (8000508 <fetchBleEvent+0x10c>)
 80004b6:	f002 f90b 	bl	80026d0 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 80004ba:	6a3b      	ldr	r3, [r7, #32]
 80004bc:	3301      	adds	r3, #1
 80004be:	623b      	str	r3, [r7, #32]
 80004c0:	6a3a      	ldr	r2, [r7, #32]
 80004c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbed      	blt.n	80004a4 <fetchBleEvent+0xa8>
 
		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ce:	480d      	ldr	r0, [pc, #52]	@ (8000504 <fetchBleEvent+0x108>)
 80004d0:	f001 f87e 	bl	80015d0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }
 
   //let's stop the SPI2
   dataAvailable=0;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <fetchBleEvent+0x110>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	e00a      	b.n	80004f4 <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <fetchBleEvent+0x108>)
 80004e6:	f001 f873 	bl	80015d0 <HAL_GPIO_WritePin>
		 return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ee:	e001      	b.n	80004f4 <fetchBleEvent+0xf8>
   }else{
   return -2;
 80004f0:	f06f 0301 	mvn.w	r3, #1
   }
 }
 80004f4:	4618      	mov	r0, r3
 80004f6:	3728      	adds	r7, #40	@ 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080030a8 	.word	0x080030a8
 8000500:	48001000 	.word	0x48001000
 8000504:	48000c00 	.word	0x48000c00
 8000508:	200002c8 	.word	0x200002c8
 800050c:	200002c4 	.word	0x200002c4

08000510 <checkEventResp>:
 
 
 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	 int j=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 
	 for(j=0;j<size;j++){
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00f      	b.n	8000546 <checkEventResp+0x36>
 
		 if(event[j]!=reference[j]){
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d002      	beq.n	8000540 <checkEventResp+0x30>
			 return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800053e:	e007      	b.n	8000550 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	3301      	adds	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	dbeb      	blt.n	8000526 <checkEventResp+0x16>
		 }
	 }
 
 return BLE_OK;
 800054e:	2300      	movs	r3, #0
 }
 8000550:	4618      	mov	r0, r3
 8000552:	371c      	adds	r7, #28
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <sendCommand>:
 
 void sendCommand(uint8_t *command,int size){
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
 
	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000566:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <sendCommand+0x88>)
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];
 
	   int result;
 
	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057c:	481a      	ldr	r0, [pc, #104]	@ (80005e8 <sendCommand+0x8c>)
 800057e:	f001 f827 	bl	80015d0 <HAL_GPIO_WritePin>
 
	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000582:	f107 0208 	add.w	r2, r7, #8
 8000586:	f107 0110 	add.w	r1, r7, #16
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2305      	movs	r3, #5
 8000590:	4816      	ldr	r0, [pc, #88]	@ (80005ec <sendCommand+0x90>)
 8000592:	f002 f89d 	bl	80026d0 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000596:	7abb      	ldrb	r3, [r7, #10]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	7a7a      	ldrb	r2, [r7, #9]
 800059c:	4313      	orrs	r3, r2
 800059e:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	db09      	blt.n	80005bc <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2301      	movs	r3, #1
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	480e      	ldr	r0, [pc, #56]	@ (80005ec <sendCommand+0x90>)
 80005b2:	f001 ff18 	bl	80023e6 <HAL_SPI_Transmit>
		 result=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
 80005ba:	e002      	b.n	80005c2 <sendCommand+0x66>
	   }else{
		 result=-1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c0:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <sendCommand+0x8c>)
 80005ca:	f001 f801 	bl	80015d0 <HAL_GPIO_WritePin>
	   dataAvailable=0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <sendCommand+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1cd      	bne.n	8000576 <sendCommand+0x1a>
 
 }
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080030b0 	.word	0x080030b0
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	200002c8 	.word	0x200002c8
 80005f0:	200002c4 	.word	0x200002c4

080005f4 <catchBLE>:
 
 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80005fe:	217f      	movs	r1, #127	@ 0x7f
 8000600:	481a      	ldr	r0, [pc, #104]	@ (800066c <catchBLE+0x78>)
 8000602:	f7ff fefb 	bl	80003fc <fetchBleEvent>
 8000606:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d12a      	bne.n	8000664 <catchBLE+0x70>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800060e:	2203      	movs	r2, #3
 8000610:	4917      	ldr	r1, [pc, #92]	@ (8000670 <catchBLE+0x7c>)
 8000612:	4816      	ldr	r0, [pc, #88]	@ (800066c <catchBLE+0x78>)
 8000614:	f7ff ff7c 	bl	8000510 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 8000618:	2205      	movs	r2, #5
 800061a:	4916      	ldr	r1, [pc, #88]	@ (8000674 <catchBLE+0x80>)
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <catchBLE+0x78>)
 800061e:	f7ff ff77 	bl	8000510 <checkEventResp>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <catchBLE+0x78>)
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	b21a      	sxth	r2, r3
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <catchBLE+0x84>)
 8000630:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <catchBLE+0x78>)
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	b21a      	sxth	r2, r3
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <catchBLE+0x84>)
 800063a:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 5)){
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <catchBLE+0x88>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2205      	movs	r2, #5
 8000642:	4619      	mov	r1, r3
 8000644:	4809      	ldr	r0, [pc, #36]	@ (800066c <catchBLE+0x78>)
 8000646:	f7ff ff63 	bl	8000510 <checkEventResp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <catchBLE+0x70>
			 *(connectionHandler) = buffer[5];
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <catchBLE+0x78>)
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <catchBLE+0x84>)
 8000658:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <catchBLE+0x78>)
 800065c:	799b      	ldrb	r3, [r3, #6]
 800065e:	b21a      	sxth	r2, r3
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <catchBLE+0x84>)
 8000662:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200001b4 	.word	0x200001b4
 8000670:	200000e8 	.word	0x200000e8
 8000674:	200000ec 	.word	0x200000ec
 8000678:	2000012c 	.word	0x2000012c
 800067c:	200000f1 	.word	0x200000f1

08000680 <setConnectable>:
 
 void setConnectable(){
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
		uint8_t* rxEvent;
		//Start advertising
		uint8_t *localname;
		int res;
		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000686:	200c      	movs	r0, #12
 8000688:	f002 fba8 	bl	8002ddc <malloc>
 800068c:	4603      	mov	r3, r0
 800068e:	60fb      	str	r3, [r7, #12]
		memcpy(localname,deviceName,sizeof(deviceName));
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4a36      	ldr	r2, [pc, #216]	@ (800076c <setConnectable+0xec>)
 8000694:	6810      	ldr	r0, [r2, #0]
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	8891      	ldrh	r1, [r2, #4]
 800069a:	7992      	ldrb	r2, [r2, #6]
 800069c:	8099      	strh	r1, [r3, #4]
 800069e:	719a      	strb	r2, [r3, #6]
		localname[sizeof(deviceName)+1]=0x00;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3308      	adds	r3, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+2]=0x00;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3309      	adds	r3, #9
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+3]=0x00;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	330a      	adds	r3, #10
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)+4]=0x00;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	330b      	adds	r3, #11
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
		localname[sizeof(deviceName)]=0x00;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3307      	adds	r3, #7
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
 
 
		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 80006c8:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <setConnectable+0xf0>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	72da      	strb	r2, [r3, #11]
		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 80006ce:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <setConnectable+0xf0>)
 80006d0:	2215      	movs	r2, #21
 80006d2:	70da      	strb	r2, [r3, #3]
 
		uint8_t *discoverableCommand;
		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 80006d4:	2019      	movs	r0, #25
 80006d6:	f002 fb81 	bl	8002ddc <malloc>
 80006da:	4603      	mov	r3, r0
 80006dc:	60bb      	str	r3, [r7, #8]
		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <setConnectable+0xf0>)
 80006e2:	461c      	mov	r4, r3
 80006e4:	4613      	mov	r3, r2
 80006e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006e8:	6020      	str	r0, [r4, #0]
 80006ea:	6061      	str	r1, [r4, #4]
 80006ec:	60a2      	str	r2, [r4, #8]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	7323      	strb	r3, [r4, #12]
		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	330d      	adds	r3, #13
 80006f6:	220c      	movs	r2, #12
 80006f8:	68f9      	ldr	r1, [r7, #12]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fc70 	bl	8002fe0 <memcpy>
 
		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000700:	2119      	movs	r1, #25
 8000702:	68b8      	ldr	r0, [r7, #8]
 8000704:	f7ff ff2a 	bl	800055c <sendCommand>
		rxEvent=(uint8_t*)malloc(7);
 8000708:	2007      	movs	r0, #7
 800070a:	f002 fb67 	bl	8002ddc <malloc>
 800070e:	4603      	mov	r3, r0
 8000710:	607b      	str	r3, [r7, #4]
		while(!dataAvailable);
 8000712:	bf00      	nop
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <setConnectable+0xf4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0fb      	beq.n	8000714 <setConnectable+0x94>
		res=fetchBleEvent(rxEvent,7);
 800071c:	2107      	movs	r1, #7
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff fe6c 	bl	80003fc <fetchBleEvent>
 8000724:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10f      	bne.n	800074c <setConnectable+0xcc>
		res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 800072c:	2207      	movs	r2, #7
 800072e:	4912      	ldr	r1, [pc, #72]	@ (8000778 <setConnectable+0xf8>)
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff feed 	bl	8000510 <checkEventResp>
 8000736:	6038      	str	r0, [r7, #0]
		if(res==BLE_OK){
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d106      	bne.n	800074c <setConnectable+0xcc>
			stackInitCompleteFlag|=0x80;
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <setConnectable+0xfc>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <setConnectable+0xfc>)
 800074a:	801a      	strh	r2, [r3, #0]
		}
		}
 
		free(rxEvent);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f002 fb4d 	bl	8002dec <free>
		free(discoverableCommand);
 8000752:	68b8      	ldr	r0, [r7, #8]
 8000754:	f002 fb4a 	bl	8002dec <free>
		free(localname);
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f002 fb47 	bl	8002dec <free>
		HAL_Delay(10);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 fc3e 	bl	8000fe0 <HAL_Delay>
 }
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	200000f4 	.word	0x200000f4
 8000770:	20000078 	.word	0x20000078
 8000774:	200002c4 	.word	0x200002c4
 8000778:	20000088 	.word	0x20000088
 800077c:	200002be 	.word	0x200002be

08000780 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	603b      	str	r3, [r7, #0]
		int response;
 
		sendCommand(command,size);
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff fee3 	bl	800055c <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	005a      	lsls	r2, r3, #1
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fb1c 	bl	8002ddc <malloc>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <BLE_command+0x90>)
 80007aa:	601a      	str	r2, [r3, #0]
 
		long contatore=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007b0:	e007      	b.n	80007c2 <BLE_command+0x42>
			contatore++;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3301      	adds	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80007be:	4293      	cmp	r3, r2
 80007c0:	dc07      	bgt.n	80007d2 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80007c2:	2140      	movs	r1, #64	@ 0x40
 80007c4:	4813      	ldr	r0, [pc, #76]	@ (8000814 <BLE_command+0x94>)
 80007c6:	f000 feeb 	bl	80015a0 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f0      	beq.n	80007b2 <BLE_command+0x32>
 80007d0:	e000      	b.n	80007d4 <BLE_command+0x54>
				break;
 80007d2:	bf00      	nop
			}
		}
 
 
		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <BLE_command+0x90>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	005a      	lsls	r2, r3, #1
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4619      	mov	r1, r3
 80007e2:	f7ff fe0b 	bl	80003fc <fetchBleEvent>
 80007e6:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d107      	bne.n	80007fe <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BLE_command+0x90>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fe8a 	bl	8000510 <checkEventResp>
 80007fc:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f000 fbee 	bl	8000fe0 <HAL_Delay>
 
 
	 return response;
 8000804:	697b      	ldr	r3, [r7, #20]
 }
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200002c0 	.word	0x200002c0
 8000814:	48001000 	.word	0x48001000

08000818 <addService>:
 
 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 
 
	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <addService+0x60>)
 8000826:	2210      	movs	r2, #16
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fbd8 	bl	8002fe0 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <addService+0x64>)
 8000836:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 8000838:	2301      	movs	r3, #1
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2307      	movs	r3, #7
 800083e:	4a10      	ldr	r2, [pc, #64]	@ (8000880 <addService+0x68>)
 8000840:	2117      	movs	r1, #23
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <addService+0x64>)
 8000844:	f7ff ff9c 	bl	8000780 <BLE_command>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <addService+0x4c>
			handle[0]=rxEvent[7];
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <addService+0x6c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	79da      	ldrb	r2, [r3, #7]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <addService+0x6c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	7a12      	ldrb	r2, [r2, #8]
 8000862:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <addService+0x6c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fabf 	bl	8002dec <free>
 }
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000095 	.word	0x20000095
 800087c:	20000090 	.word	0x20000090
 8000880:	200000a8 	.word	0x200000a8
 8000884:	200002c0 	.word	0x200002c0

08000888 <addCharacteristic>:
 
 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <addCharacteristic+0x74>)
 8000898:	2210      	movs	r2, #16
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fb9f 	bl	8002fe0 <memcpy>
 
	 ADD_CUSTOM_CHAR[4]= handleService[0];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <addCharacteristic+0x78>)
 80008a8:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	785a      	ldrb	r2, [r3, #1]
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <addCharacteristic+0x78>)
 80008b0:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 80008b2:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <addCharacteristic+0x78>)
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 80008b8:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <addCharacteristic+0x78>)
 80008ba:	7e3b      	ldrb	r3, [r7, #24]
 80008bc:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 80008be:	2301      	movs	r3, #1
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2307      	movs	r3, #7
 80008c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <addCharacteristic+0x7c>)
 80008c6:	211e      	movs	r1, #30
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <addCharacteristic+0x78>)
 80008ca:	f7ff ff59 	bl	8000780 <BLE_command>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10a      	bne.n	80008ea <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <addCharacteristic+0x80>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	79da      	ldrb	r2, [r3, #7]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <addCharacteristic+0x80>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	7a12      	ldrb	r2, [r2, #8]
 80008e8:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <addCharacteristic+0x80>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fa7c 	bl	8002dec <free>
 }
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000b7 	.word	0x200000b7
 8000900:	200000b0 	.word	0x200000b0
 8000904:	200000d0 	.word	0x200000d0
 8000908:	200002c0 	.word	0x200002c0

0800090c <updateCharValue>:
 
 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af02      	add	r7, sp, #8
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3306      	adds	r3, #6
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <updateCharValue+0x9c>)
 8000924:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <updateCharValue+0x9c>)
 800092c:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <updateCharValue+0x9c>)
 8000934:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <updateCharValue+0x9c>)
 800093c:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	785a      	ldrb	r2, [r3, #1]
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <updateCharValue+0x9c>)
 8000944:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <updateCharValue+0x9c>)
 800094c:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <updateCharValue+0x9c>)
 8000954:	725a      	strb	r2, [r3, #9]
 
	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	330a      	adds	r3, #10
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fa3e 	bl	8002ddc <malloc>
 8000960:	4603      	mov	r3, r0
 8000962:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000964:	220a      	movs	r2, #10
 8000966:	4910      	ldr	r1, [pc, #64]	@ (80009a8 <updateCharValue+0x9c>)
 8000968:	6978      	ldr	r0, [r7, #20]
 800096a:	f002 fb39 	bl	8002fe0 <memcpy>
	 memcpy(commandComplete+10,data,size);
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	330a      	adds	r3, #10
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	6a39      	ldr	r1, [r7, #32]
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fb32 	bl	8002fe0 <memcpy>
 
	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f103 010a 	add.w	r1, r3, #10
 8000982:	2300      	movs	r3, #0
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2307      	movs	r3, #7
 8000988:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <updateCharValue+0xa0>)
 800098a:	6978      	ldr	r0, [r7, #20]
 800098c:	f7ff fef8 	bl	8000780 <BLE_command>
 
	 free(commandComplete);
 8000990:	6978      	ldr	r0, [r7, #20]
 8000992:	f002 fa2b 	bl	8002dec <free>
	 free(rxEvent);
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <updateCharValue+0xa4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fa26 	bl	8002dec <free>
 }
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	200000d0 	.word	0x200000d0
 80009b0:	200002c0 	.word	0x200002c0

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 fa9c 	bl	8000ef6 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f849 	bl	8000a54 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 f8cb 	bl	8000b5c <MX_GPIO_Init>
  MX_SPI3_Init();
 80009c6:	f000 f88b 	bl	8000ae0 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f000 fdfc 	bl	80015d0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f000 fb01 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e8:	f000 fdf2 	bl	80015d0 <HAL_GPIO_WritePin>

  ble_init();
 80009ec:	f7ff fbec 	bl	80001c8 <ble_init>

  HAL_Delay(10);
 80009f0:	200a      	movs	r0, #10
 80009f2:	f000 faf5 	bl	8000fe0 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	75fb      	strb	r3, [r7, #23]

  while (1)
  {
	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80009fa:	7dfb      	ldrb	r3, [r7, #23]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d109      	bne.n	8000a14 <main+0x60>
 8000a00:	2140      	movs	r1, #64	@ 0x40
 8000a02:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <main+0x90>)
 8000a04:	f000 fdcc 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <main+0x60>
	    catchBLE();
 8000a0e:	f7ff fdf1 	bl	80005f4 <catchBLE>
 8000a12:	e016      	b.n	8000a42 <main+0x8e>
	  }else{
		  HAL_Delay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a18:	f000 fae2 	bl	8000fe0 <HAL_Delay>
		  // Send a string to the NORDIC UART service, remember to not include the newline
		  unsigned char test_str[] = "youlostit BLE test";
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <main+0x94>)
 8000a1e:	1d3c      	adds	r4, r7, #4
 8000a20:	461d      	mov	r5, r3
 8000a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	8022      	strh	r2, [r4, #0]
 8000a2c:	3402      	adds	r4, #2
 8000a2e:	0c1b      	lsrs	r3, r3, #16
 8000a30:	7023      	strb	r3, [r4, #0]
		  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2312      	movs	r3, #18
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4904      	ldr	r1, [pc, #16]	@ (8000a4c <main+0x98>)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <main+0x9c>)
 8000a3e:	f7ff ff65 	bl	800090c <updateCharValue>
	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000a42:	e7da      	b.n	80009fa <main+0x46>
 8000a44:	48001000 	.word	0x48001000
 8000a48:	080030b8 	.word	0x080030b8
 8000a4c:	200002bc 	.word	0x200002bc
 8000a50:	200002b4 	.word	0x200002b4

08000a54 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	@ 0x58
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2244      	movs	r2, #68	@ 0x44
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fa78 	bl	8002f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a7a:	f000 fdf3 	bl	8001664 <HAL_PWREx_ControlVoltageScaling>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a84:	f000 f902 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000a94:	2370      	movs	r3, #112	@ 0x70
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fe35 	bl	8001710 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f8ee 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f9fd 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ad4:	f000 f8da 	bl	8000c8c <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3758      	adds	r7, #88	@ 0x58
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <MX_SPI3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000afa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000afe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_SPI3_Init+0x74>)
 8000b40:	f001 fbae 	bl	80022a0 <HAL_SPI_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 f89f 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200002c8 	.word	0x200002c8
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	4b43      	ldr	r3, [pc, #268]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a42      	ldr	r2, [pc, #264]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b40      	ldr	r3, [pc, #256]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a36      	ldr	r2, [pc, #216]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a30      	ldr	r2, [pc, #192]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b28      	ldr	r3, [pc, #160]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2120      	movs	r1, #32
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf2:	f000 fced 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfc:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000bfe:	f000 fce7 	bl	80015d0 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f000 fce0 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000c10:	2340      	movs	r3, #64	@ 0x40
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4818      	ldr	r0, [pc, #96]	@ (8000c88 <MX_GPIO_Init+0x12c>)
 8000c26:	f000 fb11 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8000c2a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c46:	f000 fb01 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000c64:	f000 faf2 	bl	800124c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2017      	movs	r0, #23
 8000c6e:	f000 fab6 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c72:	2017      	movs	r0, #23
 8000c74:	f000 facf 	bl	8001216 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	@ 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48001000 	.word	0x48001000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d32:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d44:	2306      	movs	r3, #6
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_SPI_MspInit+0x84>)
 8000d50:	f000 fa7c 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40003c00 	.word	0x40003c00
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f8ef 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <EXTI9_5_IRQHandler+0x14>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8000dd2:	2040      	movs	r0, #64	@ 0x40
 8000dd4:	f000 fc14 	bl	8001600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200002c4 	.word	0x200002c4

08000de0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <_sbrk+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x16>
		heap_end = &end;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <_sbrk+0x50>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <_sbrk+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <_sbrk+0x50>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <_sbrk+0x50>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	466a      	mov	r2, sp
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d907      	bls.n	8000e1a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e0a:	f002 f8bd 	bl	8002f88 <__errno>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	220c      	movs	r2, #12
 8000e12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e18:	e006      	b.n	8000e28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <_sbrk+0x50>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a03      	ldr	r2, [pc, #12]	@ (8000e30 <_sbrk+0x50>)
 8000e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000032c 	.word	0x2000032c
 8000e34:	20000480 	.word	0x20000480

08000e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <SystemInit+0x64>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <SystemInit+0x64>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <SystemInit+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <SystemInit+0x68>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <SystemInit+0x68>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <SystemInit+0x68>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <SystemInit+0x68>)
 8000e64:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e68:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <SystemInit+0x68>)
 8000e70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <SystemInit+0x68>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <SystemInit+0x68>)
 8000e7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <SystemInit+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <SystemInit+0x64>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff ffc6 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f002 f85f 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ed6:	f7ff fd6d 	bl	80009b4 <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000ee8:	08003114 	.word	0x08003114
  ldr r2, =_sbss
 8000eec:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000ef0:	2000047c 	.word	0x2000047c

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>

08000ef6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f961 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f80e 	bl	8000f28 <HAL_InitTick>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	e001      	b.n	8000f1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f18:	f7ff febe 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <HAL_InitTick+0x6c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_InitTick+0x70>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f96d 	bl	8001232 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10f      	bne.n	8000f7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d809      	bhi.n	8000f78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f6c:	f000 f937 	bl	80011de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f70:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_InitTick+0x74>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e004      	b.n	8000f88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e001      	b.n	8000f88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000138 	.word	0x20000138
 8000f98:	20000130 	.word	0x20000130
 8000f9c:	20000134 	.word	0x20000134

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000138 	.word	0x20000138
 8000fc4:	20000330 	.word	0x20000330

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000330 	.word	0x20000330

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000138 	.word	0x20000138

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	@ (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	@ (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	@ (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	@ 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e17f      	b.n	800155c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8171 	beq.w	8001556 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d118      	bne.n	800132c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d017      	beq.n	8001368 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	6939      	ldr	r1, [r7, #16]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80ac 	beq.w	8001556 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b5f      	ldr	r3, [pc, #380]	@ (800157c <HAL_GPIO_Init+0x330>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	4a5e      	ldr	r2, [pc, #376]	@ (800157c <HAL_GPIO_Init+0x330>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	@ 0x60
 800140a:	4b5c      	ldr	r3, [pc, #368]	@ (800157c <HAL_GPIO_Init+0x330>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001416:	4a5a      	ldr	r2, [pc, #360]	@ (8001580 <HAL_GPIO_Init+0x334>)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	3302      	adds	r3, #2
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x242>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4f      	ldr	r2, [pc, #316]	@ (8001584 <HAL_GPIO_Init+0x338>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x23e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4e      	ldr	r2, [pc, #312]	@ (8001588 <HAL_GPIO_Init+0x33c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x23a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4d      	ldr	r2, [pc, #308]	@ (800158c <HAL_GPIO_Init+0x340>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x236>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4c      	ldr	r2, [pc, #304]	@ (8001590 <HAL_GPIO_Init+0x344>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x232>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4b      	ldr	r2, [pc, #300]	@ (8001594 <HAL_GPIO_Init+0x348>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x22e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_GPIO_Init+0x34c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x22a>
 8001472:	2306      	movs	r3, #6
 8001474:	e00c      	b.n	8001490 <HAL_GPIO_Init+0x244>
 8001476:	2307      	movs	r3, #7
 8001478:	e00a      	b.n	8001490 <HAL_GPIO_Init+0x244>
 800147a:	2305      	movs	r3, #5
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x244>
 800147e:	2304      	movs	r3, #4
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x244>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x244>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x244>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x244>
 800148e:	2300      	movs	r3, #0
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a0:	4937      	ldr	r1, [pc, #220]	@ (8001580 <HAL_GPIO_Init+0x334>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ae:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <HAL_GPIO_Init+0x350>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d2:	4a32      	ldr	r2, [pc, #200]	@ (800159c <HAL_GPIO_Init+0x350>)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014d8:	4b30      	ldr	r3, [pc, #192]	@ (800159c <HAL_GPIO_Init+0x350>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <HAL_GPIO_Init+0x350>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <HAL_GPIO_Init+0x350>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001526:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_GPIO_Init+0x350>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_GPIO_Init+0x350>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001550:	4a12      	ldr	r2, [pc, #72]	@ (800159c <HAL_GPIO_Init+0x350>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	f47f ae78 	bne.w	800125c <HAL_GPIO_Init+0x10>
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	48001800 	.word	0x48001800
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f806 	bl	8001630 <HAL_GPIO_EXTI_Callback>
  }
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_PWREx_GetVoltageRange+0x18>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40007000 	.word	0x40007000

08001664 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001672:	d130      	bne.n	80016d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800167c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001680:	d038      	beq.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800168a:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001690:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2232      	movs	r2, #50	@ 0x32
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a8:	e002      	b.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016bc:	d102      	bne.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f2      	bne.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016d0:	d110      	bne.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e00f      	b.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e2:	d007      	beq.n	80016f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016e4:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016ec:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40007000 	.word	0x40007000
 8001708:	20000130 	.word	0x20000130
 800170c:	431bde83 	.word	0x431bde83

08001710 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e3ca      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b97      	ldr	r3, [pc, #604]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	4b94      	ldr	r3, [pc, #592]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80e4 	beq.w	800190c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_RCC_OscConfig+0x4a>
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	f040 808b 	bne.w	8001868 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b01      	cmp	r3, #1
 8001756:	f040 8087 	bne.w	8001868 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175a:	4b89      	ldr	r3, [pc, #548]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x62>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e3a2      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	4b82      	ldr	r3, [pc, #520]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_RCC_OscConfig+0x7c>
 8001782:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800178a:	e005      	b.n	8001798 <HAL_RCC_OscConfig+0x88>
 800178c:	4b7c      	ldr	r3, [pc, #496]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001798:	4293      	cmp	r3, r2
 800179a:	d223      	bcs.n	80017e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fd1d 	bl	80021e0 <RCC_SetFlashLatencyFromMSIRange>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e383      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a72      	ldr	r2, [pc, #456]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b70      	ldr	r3, [pc, #448]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	496d      	ldr	r1, [pc, #436]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4968      	ldr	r1, [pc, #416]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e025      	b.n	8001830 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4960      	ldr	r1, [pc, #384]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001802:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	495b      	ldr	r1, [pc, #364]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fcdd 	bl	80021e0 <RCC_SetFlashLatencyFromMSIRange>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e343      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001830:	f000 fc4a 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b52      	ldr	r3, [pc, #328]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	4950      	ldr	r1, [pc, #320]	@ (8001984 <HAL_RCC_OscConfig+0x274>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	4a4e      	ldr	r2, [pc, #312]	@ (8001988 <HAL_RCC_OscConfig+0x278>)
 800184e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001850:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fb67 	bl	8000f28 <HAL_InitTick>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d052      	beq.n	800190a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	e327      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d032      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001870:	4b43      	ldr	r3, [pc, #268]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a42      	ldr	r2, [pc, #264]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800187c:	f7ff fba4 	bl	8000fc8 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001884:	f7ff fba0 	bl	8000fc8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e310      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a2:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a36      	ldr	r2, [pc, #216]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b34      	ldr	r3, [pc, #208]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4931      	ldr	r1, [pc, #196]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	492c      	ldr	r1, [pc, #176]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e01a      	b.n	800190c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb71 	bl	8000fc8 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb6d 	bl	8000fc8 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e2dd      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018fc:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x1da>
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d074      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b08      	cmp	r3, #8
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x21a>
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d10e      	bne.n	8001942 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d10b      	bne.n	8001942 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d064      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d160      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e2ba      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x24a>
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e026      	b.n	80019a8 <HAL_RCC_OscConfig+0x298>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001962:	d115      	bne.n	8001990 <HAL_RCC_OscConfig+0x280>
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 800196a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a02      	ldr	r2, [pc, #8]	@ (8001980 <HAL_RCC_OscConfig+0x270>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e014      	b.n	80019a8 <HAL_RCC_OscConfig+0x298>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	080030cc 	.word	0x080030cc
 8001988:	20000130 	.word	0x20000130
 800198c:	20000134 	.word	0x20000134
 8001990:	4ba0      	ldr	r3, [pc, #640]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a9f      	ldr	r2, [pc, #636]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b9d      	ldr	r3, [pc, #628]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fb0a 	bl	8000fc8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fb06 	bl	8000fc8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e276      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b92      	ldr	r3, [pc, #584]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2a8>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff faf6 	bl	8000fc8 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff faf2 	bl	8000fc8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e262      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f2:	4b88      	ldr	r3, [pc, #544]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d0>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d060      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_OscConfig+0x310>
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d119      	bne.n	8001a4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d116      	bne.n	8001a4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a20:	4b7c      	ldr	r3, [pc, #496]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x328>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e23f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	4973      	ldr	r1, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e040      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d023      	beq.n	8001a9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a56:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff fab1 	bl	8000fc8 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff faad 	bl	8000fc8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e21d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7c:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b62      	ldr	r3, [pc, #392]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	495f      	ldr	r1, [pc, #380]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e018      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fa8d 	bl	8000fc8 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fa89 	bl	8000fc8 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1f9      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac4:	4b53      	ldr	r3, [pc, #332]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aea:	4a4a      	ldr	r2, [pc, #296]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa68 	bl	8000fc8 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fa64 	bl	8000fc8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1d4      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ef      	beq.n	8001afc <HAL_RCC_OscConfig+0x3ec>
 8001b1c:	e01b      	b.n	8001b56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b24:	4a3b      	ldr	r2, [pc, #236]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa4b 	bl	8000fc8 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fa47 	bl	8000fc8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1b7      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ef      	bne.n	8001b36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80a6 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	4a26      	ldr	r2, [pc, #152]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b80:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b90:	4b21      	ldr	r3, [pc, #132]	@ (8001c18 <HAL_RCC_OscConfig+0x508>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d118      	bne.n	8001bce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_RCC_OscConfig+0x508>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fa0e 	bl	8000fc8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb0:	f7ff fa0a 	bl	8000fc8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e17a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_RCC_OscConfig+0x508>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4d8>
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001be6:	e029      	b.n	8001c3c <HAL_RCC_OscConfig+0x52c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d115      	bne.n	8001c1c <HAL_RCC_OscConfig+0x50c>
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf6:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	4a03      	ldr	r2, [pc, #12]	@ (8001c14 <HAL_RCC_OscConfig+0x504>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x52c>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c22:	4a9b      	ldr	r2, [pc, #620]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c2c:	4b98      	ldr	r3, [pc, #608]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c32:	4a97      	ldr	r2, [pc, #604]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d016      	beq.n	8001c72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f9c0 	bl	8000fc8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f9bc 	bl	8000fc8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e12a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c62:	4b8b      	ldr	r3, [pc, #556]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ed      	beq.n	8001c4c <HAL_RCC_OscConfig+0x53c>
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c72:	f7ff f9a9 	bl	8000fc8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff f9a5 	bl	8000fc8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e113      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c90:	4b7f      	ldr	r3, [pc, #508]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ed      	bne.n	8001c7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	4a79      	ldr	r2, [pc, #484]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80fe 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	f040 80d0 	bne.w	8001e64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cc4:	4b72      	ldr	r3, [pc, #456]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d130      	bne.n	8001d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d127      	bne.n	8001d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d11f      	bne.n	8001d3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d04:	2a07      	cmp	r2, #7
 8001d06:	bf14      	ite	ne
 8001d08:	2201      	movne	r2, #1
 8001d0a:	2200      	moveq	r2, #0
 8001d0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d109      	bne.n	8001d3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	3b01      	subs	r3, #1
 8001d34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d06e      	beq.n	8001e18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b0c      	cmp	r3, #12
 8001d3e:	d069      	beq.n	8001e14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d40:	4b53      	ldr	r3, [pc, #332]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d4c:	4b50      	ldr	r3, [pc, #320]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0ad      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d68:	f7ff f92e 	bl	8000fc8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f92a 	bl	8000fc8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e09a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d82:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8e:	4b40      	ldr	r3, [pc, #256]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <HAL_RCC_OscConfig+0x784>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d9e:	3a01      	subs	r2, #1
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001da8:	0212      	lsls	r2, r2, #8
 8001daa:	4311      	orrs	r1, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001db0:	0852      	lsrs	r2, r2, #1
 8001db2:	3a01      	subs	r2, #1
 8001db4:	0552      	lsls	r2, r2, #21
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dbc:	0852      	lsrs	r2, r2, #1
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	0652      	lsls	r2, r2, #25
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dc8:	0912      	lsrs	r2, r2, #4
 8001dca:	0452      	lsls	r2, r2, #17
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	4930      	ldr	r1, [pc, #192]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dec:	f7ff f8ec 	bl	8000fc8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f8e8 	bl	8000fc8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e058      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e12:	e050      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e04f      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d148      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a16      	ldr	r2, [pc, #88]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e3c:	f7ff f8c4 	bl	8000fc8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f8c0 	bl	8000fc8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e030      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x734>
 8001e62:	e028      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d023      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_RCC_OscConfig+0x780>)
 8001e70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff f8a7 	bl	8000fc8 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7c:	e00c      	b.n	8001e98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f8a3 	bl	8000fc8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d905      	bls.n	8001e98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e013      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <HAL_RCC_OscConfig+0x7b0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ec      	bne.n	8001e7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_RCC_OscConfig+0x7b0>)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4905      	ldr	r1, [pc, #20]	@ (8001ec0 <HAL_RCC_OscConfig+0x7b0>)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_RCC_OscConfig+0x7b4>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	60cb      	str	r3, [r1, #12]
 8001eb0:	e001      	b.n	8001eb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	feeefffc 	.word	0xfeeefffc

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0e7      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b72      	ldr	r3, [pc, #456]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 0207 	bic.w	r2, r3, #7
 8001ef2:	4970      	ldr	r1, [pc, #448]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b6e      	ldr	r3, [pc, #440]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cf      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d010      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4b66      	ldr	r3, [pc, #408]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d908      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4960      	ldr	r1, [pc, #384]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d04c      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d121      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0a6      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f66:	4b54      	ldr	r3, [pc, #336]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d115      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e09a      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e08e      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e086      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4943      	ldr	r1, [pc, #268]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f80a 	bl	8000fc8 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff f806 	bl	8000fc8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e06e      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d208      	bcs.n	800200e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	492b      	ldr	r1, [pc, #172]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d210      	bcs.n	800203e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201c:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 0207 	bic.w	r2, r3, #7
 8002024:	4923      	ldr	r1, [pc, #140]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCC_ClockConfig+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e036      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4918      	ldr	r1, [pc, #96]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4910      	ldr	r1, [pc, #64]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800207c:	f000 f824 	bl	80020c8 <HAL_RCC_GetSysClockFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	490b      	ldr	r1, [pc, #44]	@ (80020bc <HAL_RCC_ClockConfig+0x1f4>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1fc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe ff41 	bl	8000f28 <HAL_InitTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020aa:	7afb      	ldrb	r3, [r7, #11]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	080030cc 	.word	0x080030cc
 80020c0:	20000130 	.word	0x20000130
 80020c4:	20000134 	.word	0x20000134

080020c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d6:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x34>
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d121      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d11e      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d102      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e004      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d101      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800214c:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x114>)
 800214e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d134      	bne.n	80021c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0xa6>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d003      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0xac>
 800216c:	e005      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800216e:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	e005      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002176:	617b      	str	r3, [r7, #20]
      break;
 8002178:	e002      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	fb03 f202 	mul.w	r2, r3, r2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	0e5b      	lsrs	r3, r3, #25
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	3301      	adds	r3, #1
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021c0:	69bb      	ldr	r3, [r7, #24]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	@ 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080030dc 	.word	0x080030dc
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	007a1200 	.word	0x007a1200

080021e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021f8:	f7ff fa26 	bl	8001648 <HAL_PWREx_GetVoltageRange>
 80021fc:	6178      	str	r0, [r7, #20]
 80021fe:	e014      	b.n	800222a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4a24      	ldr	r2, [pc, #144]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	@ 0x58
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002218:	f7ff fa16 	bl	8001648 <HAL_PWREx_GetVoltageRange>
 800221c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002230:	d10b      	bne.n	800224a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b80      	cmp	r3, #128	@ 0x80
 8002236:	d919      	bls.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2ba0      	cmp	r3, #160	@ 0xa0
 800223c:	d902      	bls.n	8002244 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800223e:	2302      	movs	r3, #2
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	e013      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e010      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b80      	cmp	r3, #128	@ 0x80
 800224e:	d902      	bls.n	8002256 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002250:	2303      	movs	r3, #3
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	e00a      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b80      	cmp	r3, #128	@ 0x80
 800225a:	d102      	bne.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800225c:	2302      	movs	r3, #2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e004      	b.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b70      	cmp	r3, #112	@ 0x70
 8002266:	d101      	bne.n	800226c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002268:	2301      	movs	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 0207 	bic.w	r2, r3, #7
 8002274:	4909      	ldr	r1, [pc, #36]	@ (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40022000 	.word	0x40022000

080022a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e095      	b.n	80023de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022c2:	d009      	beq.n	80022d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe fcf4 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800230e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002318:	d902      	bls.n	8002320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e002      	b.n	8002326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800232e:	d007      	beq.n	8002340 <HAL_SPI_Init+0xa0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002338:	d002      	beq.n	8002340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002382:	ea42 0103 	orr.w	r1, r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	f003 0204 	and.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_SPI_Transmit+0x22>
 8002404:	2302      	movs	r3, #2
 8002406:	e15f      	b.n	80026c8 <HAL_SPI_Transmit+0x2e2>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002410:	f7fe fdda 	bl	8000fc8 <HAL_GetTick>
 8002414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242a:	e148      	b.n	80026be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_SPI_Transmit+0x52>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800243c:	e13f      	b.n	80026be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002488:	d10f      	bne.n	80024aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d007      	beq.n	80024c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024d0:	d94f      	bls.n	8002572 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_SPI_Transmit+0xfa>
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d142      	bne.n	8002566 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002504:	e02f      	b.n	8002566 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d112      	bne.n	800253a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002538:	e015      	b.n	8002566 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800253a:	f7fe fd45 	bl	8000fc8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d803      	bhi.n	8002552 <HAL_SPI_Transmit+0x16c>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002550:	d102      	bne.n	8002558 <HAL_SPI_Transmit+0x172>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002564:	e0ab      	b.n	80026be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ca      	bne.n	8002506 <HAL_SPI_Transmit+0x120>
 8002570:	e080      	b.n	8002674 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_SPI_Transmit+0x19a>
 800257a:	8afb      	ldrh	r3, [r7, #22]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d174      	bne.n	800266a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d912      	bls.n	80025b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259a:	1c9a      	adds	r2, r3, #2
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b02      	subs	r3, #2
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025ae:	e05c      	b.n	800266a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025d6:	e048      	b.n	800266a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d12b      	bne.n	800263e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d912      	bls.n	8002616 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b02      	subs	r3, #2
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002614:	e029      	b.n	800266a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800263c:	e015      	b.n	800266a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800263e:	f7fe fcc3 	bl	8000fc8 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d803      	bhi.n	8002656 <HAL_SPI_Transmit+0x270>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002654:	d102      	bne.n	800265c <HAL_SPI_Transmit+0x276>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002668:	e029      	b.n	80026be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1b1      	bne.n	80025d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fb69 	bl	8002d50 <SPI_EndRxTxTransaction>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	e003      	b.n	80026be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026de:	2301      	movs	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_TransmitReceive+0x26>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e20a      	b.n	8002b0c <HAL_SPI_TransmitReceive+0x43c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026fe:	f7fe fc63 	bl	8000fc8 <HAL_GetTick>
 8002702:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800270a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800271a:	7efb      	ldrb	r3, [r7, #27]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d00e      	beq.n	800273e <HAL_SPI_TransmitReceive+0x6e>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002726:	d106      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x66>
 8002730:	7efb      	ldrb	r3, [r7, #27]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d003      	beq.n	800273e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800273c:	e1e0      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x80>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x80>
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002756:	e1d3      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b04      	cmp	r3, #4
 8002762:	d003      	beq.n	800276c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027ae:	d802      	bhi.n	80027b6 <HAL_SPI_TransmitReceive+0xe6>
 80027b0:	8a3b      	ldrh	r3, [r7, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d908      	bls.n	80027c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e007      	b.n	80027d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e2:	2b40      	cmp	r3, #64	@ 0x40
 80027e4:	d007      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027fe:	f240 8081 	bls.w	8002904 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x140>
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d16d      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	1c9a      	adds	r2, r3, #2
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002834:	e05a      	b.n	80028ec <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b02      	cmp	r3, #2
 8002842:	d11b      	bne.n	800287c <HAL_SPI_TransmitReceive+0x1ac>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_SPI_TransmitReceive+0x1ac>
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	2b01      	cmp	r3, #1
 8002852:	d113      	bne.n	800287c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d11c      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x1f4>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	b292      	uxth	r2, r2
 80028a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028c4:	f7fe fb80 	bl	8000fc8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d80b      	bhi.n	80028ec <HAL_SPI_TransmitReceive+0x21c>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028da:	d007      	beq.n	80028ec <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80028ea:	e109      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19f      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x166>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d199      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x166>
 8002902:	e0e3      	b.n	8002acc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <HAL_SPI_TransmitReceive+0x244>
 800290c:	8a7b      	ldrh	r3, [r7, #18]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 80cf 	bne.w	8002ab2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d912      	bls.n	8002944 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b02      	subs	r3, #2
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002942:	e0b6      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	7812      	ldrb	r2, [r2, #0]
 8002950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296a:	e0a2      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d134      	bne.n	80029e4 <HAL_SPI_TransmitReceive+0x314>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02f      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x314>
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	2b01      	cmp	r3, #1
 8002988:	d12c      	bne.n	80029e4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d912      	bls.n	80029ba <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	1c9a      	adds	r2, r3, #2
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b02      	subs	r3, #2
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029b8:	e012      	b.n	80029e0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	330c      	adds	r3, #12
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d148      	bne.n	8002a84 <HAL_SPI_TransmitReceive+0x3b4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d042      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d923      	bls.n	8002a52 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	b292      	uxth	r2, r2
 8002a16:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	1c9a      	adds	r2, r3, #2
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b02      	subs	r3, #2
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d81f      	bhi.n	8002a80 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	e016      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f103 020c 	add.w	r2, r3, #12
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a80:	2301      	movs	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a84:	f7fe faa0 	bl	8000fc8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d803      	bhi.n	8002a9c <HAL_SPI_TransmitReceive+0x3cc>
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a9a:	d102      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x3d2>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002ab0:	e026      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f47f af57 	bne.w	800296c <HAL_SPI_TransmitReceive+0x29c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f af50 	bne.w	800296c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f93d 	bl	8002d50 <SPI_EndRxTxTransaction>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af6:	e003      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3728      	adds	r7, #40	@ 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b24:	f7fe fa50 	bl	8000fc8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b34:	f7fe fa48 	bl	8000fc8 <HAL_GetTick>
 8002b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	015b      	lsls	r3, r3, #5
 8002b40:	0d1b      	lsrs	r3, r3, #20
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b4a:	e054      	b.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b52:	d050      	beq.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b54:	f7fe fa38 	bl	8000fc8 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d902      	bls.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d13d      	bne.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b82:	d111      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8c:	d004      	beq.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b96:	d107      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb0:	d10f      	bne.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e017      	b.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d19b      	bne.n	8002b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000130 	.word	0x20000130

08002c24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	@ 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c36:	f7fe f9c7 	bl	8000fc8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002c46:	f7fe f9bf 	bl	8000fc8 <HAL_GetTick>
 8002c4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c54:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00da      	lsls	r2, r3, #3
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	0d1b      	lsrs	r3, r3, #20
 8002c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c6c:	e060      	b.n	8002d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002c74:	d107      	bne.n	8002c86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c8c:	d050      	beq.n	8002d30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c8e:	f7fe f99b 	bl	8000fc8 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d902      	bls.n	8002ca4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d13d      	bne.n	8002d20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cbc:	d111      	bne.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc6:	d004      	beq.n	8002cd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd0:	d107      	bne.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cea:	d10f      	bne.n	8002d0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e010      	b.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d196      	bne.n	8002c6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3728      	adds	r7, #40	@ 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000130 	.word	0x20000130

08002d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ff5b 	bl	8002c24 <SPI_WaitFifoStateUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e027      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fec0 	bl	8002b14 <SPI_WaitFlagStateUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e014      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff34 	bl	8002c24 <SPI_WaitFifoStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <malloc>:
 8002ddc:	4b02      	ldr	r3, [pc, #8]	@ (8002de8 <malloc+0xc>)
 8002dde:	4601      	mov	r1, r0
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	f000 b82d 	b.w	8002e40 <_malloc_r>
 8002de6:	bf00      	nop
 8002de8:	2000013c 	.word	0x2000013c

08002dec <free>:
 8002dec:	4b02      	ldr	r3, [pc, #8]	@ (8002df8 <free+0xc>)
 8002dee:	4601      	mov	r1, r0
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	f000 b903 	b.w	8002ffc <_free_r>
 8002df6:	bf00      	nop
 8002df8:	2000013c 	.word	0x2000013c

08002dfc <sbrk_aligned>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8002e3c <sbrk_aligned+0x40>)
 8002e00:	460c      	mov	r4, r1
 8002e02:	6831      	ldr	r1, [r6, #0]
 8002e04:	4605      	mov	r5, r0
 8002e06:	b911      	cbnz	r1, 8002e0e <sbrk_aligned+0x12>
 8002e08:	f000 f8ae 	bl	8002f68 <_sbrk_r>
 8002e0c:	6030      	str	r0, [r6, #0]
 8002e0e:	4621      	mov	r1, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	f000 f8a9 	bl	8002f68 <_sbrk_r>
 8002e16:	1c43      	adds	r3, r0, #1
 8002e18:	d103      	bne.n	8002e22 <sbrk_aligned+0x26>
 8002e1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002e1e:	4620      	mov	r0, r4
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	1cc4      	adds	r4, r0, #3
 8002e24:	f024 0403 	bic.w	r4, r4, #3
 8002e28:	42a0      	cmp	r0, r4
 8002e2a:	d0f8      	beq.n	8002e1e <sbrk_aligned+0x22>
 8002e2c:	1a21      	subs	r1, r4, r0
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 f89a 	bl	8002f68 <_sbrk_r>
 8002e34:	3001      	adds	r0, #1
 8002e36:	d1f2      	bne.n	8002e1e <sbrk_aligned+0x22>
 8002e38:	e7ef      	b.n	8002e1a <sbrk_aligned+0x1e>
 8002e3a:	bf00      	nop
 8002e3c:	20000334 	.word	0x20000334

08002e40 <_malloc_r>:
 8002e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e44:	1ccd      	adds	r5, r1, #3
 8002e46:	f025 0503 	bic.w	r5, r5, #3
 8002e4a:	3508      	adds	r5, #8
 8002e4c:	2d0c      	cmp	r5, #12
 8002e4e:	bf38      	it	cc
 8002e50:	250c      	movcc	r5, #12
 8002e52:	2d00      	cmp	r5, #0
 8002e54:	4606      	mov	r6, r0
 8002e56:	db01      	blt.n	8002e5c <_malloc_r+0x1c>
 8002e58:	42a9      	cmp	r1, r5
 8002e5a:	d904      	bls.n	8002e66 <_malloc_r+0x26>
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	6033      	str	r3, [r6, #0]
 8002e60:	2000      	movs	r0, #0
 8002e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f3c <_malloc_r+0xfc>
 8002e6a:	f000 f869 	bl	8002f40 <__malloc_lock>
 8002e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e72:	461c      	mov	r4, r3
 8002e74:	bb44      	cbnz	r4, 8002ec8 <_malloc_r+0x88>
 8002e76:	4629      	mov	r1, r5
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f7ff ffbf 	bl	8002dfc <sbrk_aligned>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	4604      	mov	r4, r0
 8002e82:	d158      	bne.n	8002f36 <_malloc_r+0xf6>
 8002e84:	f8d8 4000 	ldr.w	r4, [r8]
 8002e88:	4627      	mov	r7, r4
 8002e8a:	2f00      	cmp	r7, #0
 8002e8c:	d143      	bne.n	8002f16 <_malloc_r+0xd6>
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	d04b      	beq.n	8002f2a <_malloc_r+0xea>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	4639      	mov	r1, r7
 8002e96:	4630      	mov	r0, r6
 8002e98:	eb04 0903 	add.w	r9, r4, r3
 8002e9c:	f000 f864 	bl	8002f68 <_sbrk_r>
 8002ea0:	4581      	cmp	r9, r0
 8002ea2:	d142      	bne.n	8002f2a <_malloc_r+0xea>
 8002ea4:	6821      	ldr	r1, [r4, #0]
 8002ea6:	1a6d      	subs	r5, r5, r1
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4630      	mov	r0, r6
 8002eac:	f7ff ffa6 	bl	8002dfc <sbrk_aligned>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	d03a      	beq.n	8002f2a <_malloc_r+0xea>
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	442b      	add	r3, r5
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	f8d8 3000 	ldr.w	r3, [r8]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	bb62      	cbnz	r2, 8002f1c <_malloc_r+0xdc>
 8002ec2:	f8c8 7000 	str.w	r7, [r8]
 8002ec6:	e00f      	b.n	8002ee8 <_malloc_r+0xa8>
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	1b52      	subs	r2, r2, r5
 8002ecc:	d420      	bmi.n	8002f10 <_malloc_r+0xd0>
 8002ece:	2a0b      	cmp	r2, #11
 8002ed0:	d917      	bls.n	8002f02 <_malloc_r+0xc2>
 8002ed2:	1961      	adds	r1, r4, r5
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	6025      	str	r5, [r4, #0]
 8002ed8:	bf18      	it	ne
 8002eda:	6059      	strne	r1, [r3, #4]
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	bf08      	it	eq
 8002ee0:	f8c8 1000 	streq.w	r1, [r8]
 8002ee4:	5162      	str	r2, [r4, r5]
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 f82f 	bl	8002f4c <__malloc_unlock>
 8002eee:	f104 000b 	add.w	r0, r4, #11
 8002ef2:	1d23      	adds	r3, r4, #4
 8002ef4:	f020 0007 	bic.w	r0, r0, #7
 8002ef8:	1ac2      	subs	r2, r0, r3
 8002efa:	bf1c      	itt	ne
 8002efc:	1a1b      	subne	r3, r3, r0
 8002efe:	50a3      	strne	r3, [r4, r2]
 8002f00:	e7af      	b.n	8002e62 <_malloc_r+0x22>
 8002f02:	6862      	ldr	r2, [r4, #4]
 8002f04:	42a3      	cmp	r3, r4
 8002f06:	bf0c      	ite	eq
 8002f08:	f8c8 2000 	streq.w	r2, [r8]
 8002f0c:	605a      	strne	r2, [r3, #4]
 8002f0e:	e7eb      	b.n	8002ee8 <_malloc_r+0xa8>
 8002f10:	4623      	mov	r3, r4
 8002f12:	6864      	ldr	r4, [r4, #4]
 8002f14:	e7ae      	b.n	8002e74 <_malloc_r+0x34>
 8002f16:	463c      	mov	r4, r7
 8002f18:	687f      	ldr	r7, [r7, #4]
 8002f1a:	e7b6      	b.n	8002e8a <_malloc_r+0x4a>
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	42a3      	cmp	r3, r4
 8002f22:	d1fb      	bne.n	8002f1c <_malloc_r+0xdc>
 8002f24:	2300      	movs	r3, #0
 8002f26:	6053      	str	r3, [r2, #4]
 8002f28:	e7de      	b.n	8002ee8 <_malloc_r+0xa8>
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	6033      	str	r3, [r6, #0]
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f000 f80c 	bl	8002f4c <__malloc_unlock>
 8002f34:	e794      	b.n	8002e60 <_malloc_r+0x20>
 8002f36:	6005      	str	r5, [r0, #0]
 8002f38:	e7d6      	b.n	8002ee8 <_malloc_r+0xa8>
 8002f3a:	bf00      	nop
 8002f3c:	20000338 	.word	0x20000338

08002f40 <__malloc_lock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	@ (8002f48 <__malloc_lock+0x8>)
 8002f42:	f000 b84b 	b.w	8002fdc <__retarget_lock_acquire_recursive>
 8002f46:	bf00      	nop
 8002f48:	20000474 	.word	0x20000474

08002f4c <__malloc_unlock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	@ (8002f54 <__malloc_unlock+0x8>)
 8002f4e:	f000 b846 	b.w	8002fde <__retarget_lock_release_recursive>
 8002f52:	bf00      	nop
 8002f54:	20000474 	.word	0x20000474

08002f58 <memset>:
 8002f58:	4402      	add	r2, r0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <memset+0xa>
 8002f60:	4770      	bx	lr
 8002f62:	f803 1b01 	strb.w	r1, [r3], #1
 8002f66:	e7f9      	b.n	8002f5c <memset+0x4>

08002f68 <_sbrk_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4d06      	ldr	r5, [pc, #24]	@ (8002f84 <_sbrk_r+0x1c>)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	f7fd ff34 	bl	8000de0 <_sbrk>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_sbrk_r+0x1a>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_sbrk_r+0x1a>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000478 	.word	0x20000478

08002f88 <__errno>:
 8002f88:	4b01      	ldr	r3, [pc, #4]	@ (8002f90 <__errno+0x8>)
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000013c 	.word	0x2000013c

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	@ (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f872 	bl	8003090 <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	0800310c 	.word	0x0800310c
 8002fd0:	0800310c 	.word	0x0800310c
 8002fd4:	0800310c 	.word	0x0800310c
 8002fd8:	08003110 	.word	0x08003110

08002fdc <__retarget_lock_acquire_recursive>:
 8002fdc:	4770      	bx	lr

08002fde <__retarget_lock_release_recursive>:
 8002fde:	4770      	bx	lr

08002fe0 <memcpy>:
 8002fe0:	440a      	add	r2, r1
 8002fe2:	4291      	cmp	r1, r2
 8002fe4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002fe8:	d100      	bne.n	8002fec <memcpy+0xc>
 8002fea:	4770      	bx	lr
 8002fec:	b510      	push	{r4, lr}
 8002fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff6:	4291      	cmp	r1, r2
 8002ff8:	d1f9      	bne.n	8002fee <memcpy+0xe>
 8002ffa:	bd10      	pop	{r4, pc}

08002ffc <_free_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	4605      	mov	r5, r0
 8003000:	2900      	cmp	r1, #0
 8003002:	d041      	beq.n	8003088 <_free_r+0x8c>
 8003004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003008:	1f0c      	subs	r4, r1, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfb8      	it	lt
 800300e:	18e4      	addlt	r4, r4, r3
 8003010:	f7ff ff96 	bl	8002f40 <__malloc_lock>
 8003014:	4a1d      	ldr	r2, [pc, #116]	@ (800308c <_free_r+0x90>)
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	b933      	cbnz	r3, 8003028 <_free_r+0x2c>
 800301a:	6063      	str	r3, [r4, #4]
 800301c:	6014      	str	r4, [r2, #0]
 800301e:	4628      	mov	r0, r5
 8003020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003024:	f7ff bf92 	b.w	8002f4c <__malloc_unlock>
 8003028:	42a3      	cmp	r3, r4
 800302a:	d908      	bls.n	800303e <_free_r+0x42>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	1821      	adds	r1, r4, r0
 8003030:	428b      	cmp	r3, r1
 8003032:	bf01      	itttt	eq
 8003034:	6819      	ldreq	r1, [r3, #0]
 8003036:	685b      	ldreq	r3, [r3, #4]
 8003038:	1809      	addeq	r1, r1, r0
 800303a:	6021      	streq	r1, [r4, #0]
 800303c:	e7ed      	b.n	800301a <_free_r+0x1e>
 800303e:	461a      	mov	r2, r3
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	b10b      	cbz	r3, 8003048 <_free_r+0x4c>
 8003044:	42a3      	cmp	r3, r4
 8003046:	d9fa      	bls.n	800303e <_free_r+0x42>
 8003048:	6811      	ldr	r1, [r2, #0]
 800304a:	1850      	adds	r0, r2, r1
 800304c:	42a0      	cmp	r0, r4
 800304e:	d10b      	bne.n	8003068 <_free_r+0x6c>
 8003050:	6820      	ldr	r0, [r4, #0]
 8003052:	4401      	add	r1, r0
 8003054:	1850      	adds	r0, r2, r1
 8003056:	4283      	cmp	r3, r0
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	d1e0      	bne.n	800301e <_free_r+0x22>
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	6053      	str	r3, [r2, #4]
 8003062:	4408      	add	r0, r1
 8003064:	6010      	str	r0, [r2, #0]
 8003066:	e7da      	b.n	800301e <_free_r+0x22>
 8003068:	d902      	bls.n	8003070 <_free_r+0x74>
 800306a:	230c      	movs	r3, #12
 800306c:	602b      	str	r3, [r5, #0]
 800306e:	e7d6      	b.n	800301e <_free_r+0x22>
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	1821      	adds	r1, r4, r0
 8003074:	428b      	cmp	r3, r1
 8003076:	bf04      	itt	eq
 8003078:	6819      	ldreq	r1, [r3, #0]
 800307a:	685b      	ldreq	r3, [r3, #4]
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	bf04      	itt	eq
 8003080:	1809      	addeq	r1, r1, r0
 8003082:	6021      	streq	r1, [r4, #0]
 8003084:	6054      	str	r4, [r2, #4]
 8003086:	e7ca      	b.n	800301e <_free_r+0x22>
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	20000338 	.word	0x20000338

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
