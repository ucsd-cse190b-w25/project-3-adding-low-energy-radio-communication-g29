/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for DS12345 PrivTag BLE application.
  *                   This application uses an I2C-connected accelerometer to
  *                   monitor movement. If no movement is detected for 1 minute,
  *                   the tag enters lost mode. In lost mode, the device becomes
  *                   connectable over Bluetooth Low Energy and every 10 seconds
  *                   sends a message over the BLE virtual UART in the format:
  *                     "PrivTag DS12345 has been missing for <N> seconds"
  *
  * Relevant documentation:
  *   - STMicro BlueNRG-MS datasheet Chapter 6
  *   - STMicro BlueNRG-MS ACI documentation
  *   - Bluetooth Core Specification V6
  *
  * Note: The project must integrate the I2C driver (for the accelerometer) and BLE
  * code. This file contains stub implementations for SystemClock_Config, MX_GPIO_Init,
  * and minimal definitions for the SPI handle and dataAvailable flag. Replace these
  * with your actual initialization code as needed.
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "lsm6dsl.h"
#include "ble.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* Private defines -----------------------------------------------------------*/
#define MOVEMENT_THRESHOLD    1200   // Maximum difference (in ADC units) to consider the device "static"
#define LOST_THRESHOLD        600    // ~600 samples (~1 minute if each sample ~100ms) to enter lost mode

/* Private variables ---------------------------------------------------------*/
uint32_t static_count = 0;           // Counts consecutive static samples
uint8_t lost_mode = 0;               // 0 = normal mode, 1 = lost mode

// Variables for accelerometer readings
int16_t prev_ax = 0, prev_ay = 0, prev_az = 0;
int16_t ax = 0, ay = 0, az = 0;

// BLE messaging timing variables
uint32_t lastMessageTick = 0;        // Timestamp when last BLE message was sent
uint32_t lostStartTick = 0;          // Timestamp when lost mode was entered

// Tag name
const char *tagName = "DS12345";

/* Stub definitions for external functions/variables required by BLE code */

/*
   The following functions are normally generated by CubeMX.
   Replace these stubs with the actual implementations.
*/
void SystemClock_Config(void)
{
  /* Stub: Configure the system clock as required */
}

void MX_GPIO_Init(void)
{
  /* Stub: Initialize all GPIO pins used by the application */
}

/*
   The BLE code references an SPI handle and a flag for data availability.
   These are defined as extern in ble.c. Provide minimal definitions here.
*/
SPI_HandleTypeDef hspi3;  // Replace with your actual SPI handle initialization
int dataAvailable = 0;    // This flag should be set by your BLE interrupt handler

/* Redefine the _write() function for printf() output via ITM */
int _write(int file, char *ptr, int len)
{
  for (int i = 0; i < len; i++)
  {
    ITM_SendChar(*ptr++);
  }
  return len;
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  // Note: If CubeMX initializes I2C, then MX_I2C2_Init() might be called here.
  // We use our custom I2C initialization.
  i2c_init();

  /* Initialize accelerometer */
  lsm6dsl_init();

  /* Initialize BLE module */
  ble_init();

  /* Initially, set BLE to non-discoverable (connections not allowed) */
  setDiscoverability(0);

  /* Get an initial accelerometer reading */
  lsm6dsl_read_xyz(&prev_ax, &prev_ay, &prev_az);

  /* Initialize BLE messaging timer */
  lastMessageTick = HAL_GetTick();

  printf("DS12345 PrivTag application started. Monitoring movement...\n");

  /* Infinite loop */
  while (1)
  {
    /* Read current accelerometer data */
    lsm6dsl_read_xyz(&ax, &ay, &az);

    /* Compute absolute differences between successive readings */
    int diff_x = (ax >= prev_ax) ? (ax - prev_ax) : (prev_ax - ax);
    int diff_y = (ay >= prev_ay) ? (ay - prev_ay) : (prev_ay - ay);
    int diff_z = (az >= prev_az) ? (az - prev_az) : (prev_az - az);

    /* Check if device is static (all axis differences are below threshold) */
    if ((diff_x < MOVEMENT_THRESHOLD) &&
        (diff_y < MOVEMENT_THRESHOLD) &&
        (diff_z < MOVEMENT_THRESHOLD))
    {
      static_count++;
    }
    else
    {
      /* Movement detected: reset static count and exit lost mode if necessary */
      static_count = 0;
      if (lost_mode)
      {
        lost_mode = 0;
        setDiscoverability(0); // Make device non-discoverable again
        printf("Movement detected. Exiting lost mode.\n");
      }
    }

    /* Update previous readings for next iteration */
    prev_ax = ax;
    prev_ay = ay;
    prev_az = az;

    /* If static count exceeds threshold and not already lost, enter lost mode */
    if ((static_count >= LOST_THRESHOLD) && (!lost_mode))
    {
      lost_mode = 1;
      lostStartTick = HAL_GetTick();
      setConnectable(); // Allow BLE connections
      printf("No movement detected for 1 minute. Entering lost mode...\n");
    }

    /* In lost mode, every 10 seconds send a BLE message with tag name and lost duration */
    if (lost_mode)
    {
      uint32_t currentTick = HAL_GetTick();
      if ((currentTick - lastMessageTick) >= 10000) // 10 seconds
      {
        uint32_t lostSeconds = (currentTick - lostStartTick) / 1000;
        char message[64];
        snprintf(message, sizeof(message), "PrivTag %s has been missing for %lu seconds", tagName, lostSeconds);

        /* Send the message over BLE using the virtual UART.
           Assumes that the Nordic UART service has been set up and that
           updateCharValue() sends a notification to the connected smartphone.
        */
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(message), (uint8_t*)message);

        printf("Sent BLE message: %s\n", message);
        lastMessageTick = currentTick;
      }
    }

    /* Delay between samples (approx. 100 ms) */
    HAL_Delay(100);
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* User can add his own implementation to report the error state */
  while(1)
  {
  }
}

/* USER CODE BEGIN 4 */
/* Additional user code can be added here */
/* USER CODE END 4 */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
