/* Preprocessor defines to disable duplicate definitions in ble.c */
#define NO_BLE_MAIN       // Disable main() in ble.c
#define NO_BLE_HSPI3      // Disable hspi3 definition in ble.c
#define NO_BLE_LOST_MODE  // Disable lost_mode definition in ble.c
#define NO_BLE_WRITE      // Disable _write() definition in ble.c

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for DS12345 PrivTag with BLE
  ******************************************************************************
  * @attention
  *
  * This application uses an I2C-connected LSM6DSL accelerometer to detect motion.
  * If no movement is detected for one minute, the tag enters lost mode.
  * In lost mode the BLE module becomes connectable and every 10 seconds sends a BLE
  * message over the virtual UART:
  * "PrivTag DS12345 missing for <N> seconds"
  *
  * The tag name is DS12345. (Remember to mention these last 5 digits in your README.)
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "ble.h"      // BLE functions (with conflicts disabled via above defines)
#include "i2c.h"      // I2C driver
#include "lsm6dsl.h"  // Accelerometer driver

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

/* Global declaration of SPI handle.
   With NO_BLE_HSPI3 defined, ble.c will not define hspi3,
   so we define it here for use in SPI initialization. */
SPI_HandleTypeDef hspi3;

/* Timing and movement detection constants */
#define MOVEMENT_THRESHOLD   1200     // Maximum change in accelerometer reading to be considered "static"
#define LOST_MODE_TIMEOUT    60000    // 1 minute (in ms) with no movement triggers lost mode
#define BLE_MESSAGE_INTERVAL 10000    // 10 seconds (in ms) between BLE messages when lost

/* BLE service handles (declared in ble.h) */
extern uint8_t NORDIC_UART_SERVICE_HANDLE[2];
extern uint8_t READ_CHAR_HANDLE[2];

/* Global variables for lost mode detection */
uint32_t staticDuration = 0;       // Accumulated static time in ms
uint32_t lostStartTime = 0;        // Tick count when lost mode was entered
uint32_t lastBLEMessageTime = 0;   // Last time a BLE message was sent
uint32_t lastSampleTime = 0;       // Last time we sampled the accelerometer

/* Variables for accelerometer readings */
int16_t prev_x = 0, prev_y = 0, prev_z = 0;
int16_t x = 0, y = 0, z = 0;
uint8_t lost_mode = 0;             // 0: normal (moving), 1: lost (static)

/* USER CODE BEGIN 0 */
/* Implement _write() for printf output.
   With NO_BLE_WRITE defined, ble.c will not define _write(). */
int _write(int file, char *ptr, int len)
{
  for (int i = 0; i < len; i++) {
    ITM_SendChar(*ptr++);
  }
  return len;
}
/* USER CODE END 0 */

/* Function prototypes generated by CubeMX */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Initialization */
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_SPI3_Init();

  /* --- BLE Initialization --- */
  /* Reset BLE module */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_RESET);
  HAL_Delay(10);
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
  ble_init();
  HAL_Delay(10);

  /* Initially, keep BLE non-discoverable */
  setDiscoverability(0);

  /* --- I2C and Accelerometer Initialization --- */
  i2c_init();
  lsm6dsl_init();

  /* Get initial accelerometer reading */
  lsm6dsl_read_xyz(&prev_x, &prev_y, &prev_z);
  lastSampleTime = HAL_GetTick();

  /* Print startup message */
  printf("DS12345 PrivTag started. Monitoring movement...\n");

  /* Main loop */
  while (1)
  {
    uint32_t now = HAL_GetTick();

    /* Sample accelerometer roughly every 100 ms */
    if (now - lastSampleTime >= 100)
    {
      lastSampleTime = now;
      lsm6dsl_read_xyz(&x, &y, &z);

      /* Compute absolute differences between current and previous readings */
      int diff_x = (x >= prev_x) ? (x - prev_x) : (prev_x - x);
      int diff_y = (y >= prev_y) ? (y - prev_y) : (prev_y - y);
      int diff_z = (z >= prev_z) ? (z - prev_z) : (prev_z - z);

      /* Check if movement is below threshold */
      if (diff_x < MOVEMENT_THRESHOLD && diff_y < MOVEMENT_THRESHOLD && diff_z < MOVEMENT_THRESHOLD)
      {
        staticDuration += 100;  // Accumulate 100 ms per static sample
      }
      else
      {
        staticDuration = 0;     // Reset if movement detected
        if (lost_mode)
        {
          /* Exit lost mode if movement resumes */
          lost_mode = 0;
          setDiscoverability(0);  // Make BLE non-discoverable again
          printf("Movement detected. Exiting lost mode.\n");
        }
      }

      /* Update previous readings */
      prev_x = x;
      prev_y = y;
      prev_z = z;

      /* Check if static duration reaches timeout (1 minute) */
      if (!lost_mode && staticDuration >= LOST_MODE_TIMEOUT)
      {
        lost_mode = 1;
        lostStartTime = now;
        lastBLEMessageTime = now;
        setConnectable();  // Allow BLE connections now that tag is "lost"
        printf("Lost mode activated.\n");
      }
    }

    /* If in lost mode, send a BLE message every 10 seconds */
    if (lost_mode)
    {
      if (now - lastBLEMessageTime >= BLE_MESSAGE_INTERVAL)
      {
        lastBLEMessageTime = now;
        uint32_t lostSeconds = (now - lostStartTime) / 1000;
        char msg[64];
        snprintf(msg, sizeof(msg), "PrivTag DS12345 missing for %lu seconds", lostSeconds);
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(msg), (uint8_t *)msg);
        printf("BLE msg sent: %s\n", msg);
      }
    }

    /* Process BLE events if available */
    if (HAL_GPIO_ReadPin(BLE_INT_GPIO_Port, BLE_INT_Pin))
    {
      catchBLE();
    }

    HAL_Delay(50);
  }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* SPI3 Initialization Function */
static void MX_SPI3_Init(void)
{
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /* Configure BLE_INT_Pin as interrupt input */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);

  /* Configure GPIO pins for LED1 and BLE_RESET */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin | BLE_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIO_LED1_GPIO_Port, &GPIO_InitStruct);

  /* Configure BLE_CS_Pin as output */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);

  /* Set initial output levels */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);

  /* NVIC configuration for BLE_INT interrupt */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
}

/* Error Handler */
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}
