/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for DS12345 PrivTag BLE application.
  *                   This application monitors an I2C-connected accelerometer.
  *                   If no movement is detected for 1 minute, the tag enters lost mode.
  *                   In lost mode, the tag:
  *                      - Calls setConnectable() to enable BLE advertising,
  *                      - Sends every 10 seconds a BLE message over the virtual UART in the format:
  *                           "PrivTag DS12345 has been missing for <N> seconds"
  *                      - Blinks LED1 (GPIO_LED1) every 500 ms.
  *                   If movement is detected, lost mode is immediately exited and BLE is set back
  *                   to non-discoverable.
  *
  * Relevant documentation:
  *   - BlueNRG-MS datasheet (Chapter 6, Operating Modes)
  *   - BlueNRG-MS ACI documentation
  *   - Bluetooth Core Specification V6
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "lsm6dsl.h"
#include "ble.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* Private defines -----------------------------------------------------------*/
#define MOVEMENT_THRESHOLD    1200   // Maximum difference in accelerometer readings to consider "static"
#define LOST_THRESHOLD        600    // Number of consecutive static samples (~1 minute, if each sample â‰ˆ100ms)

/* Private variables ---------------------------------------------------------*/
uint32_t static_count = 0;           // Counts consecutive static samples
uint8_t lost_mode = 0;               // 0 = normal mode, 1 = lost mode

// Variables for accelerometer readings
int16_t prev_ax = 0, prev_ay = 0, prev_az = 0;
int16_t ax = 0, ay = 0, az = 0;

// BLE messaging timing variables
uint32_t lastMessageTick = 0;        // Timestamp when last BLE message was sent
uint32_t lostStartTick = 0;          // Timestamp when lost mode was entered

// LED blinking timing variables
uint32_t lastLEDToggleTick = 0;      // Timestamp for last LED toggle

// Tag name (DS12345)
const char *tagName = "DS12345";

/* Stub implementations for functions normally provided by CubeMX.
   Replace these with your actual initialization functions if not already generated. */
void SystemClock_Config(void)
{
  /* Stub: Configure the system clock as required */
}

void MX_GPIO_Init(void)
{
  /* Stub: Initialize all GPIO pins used by the application.
     For example, initialize GPIO_LED1 as output. */
  // Assuming LED1 is defined as GPIO_LED1_Pin on GPIOA.
}

/* External variables required by BLE code. These must be defined somewhere in your project. */
SPI_HandleTypeDef hspi3;  // Ensure hspi3 is properly initialized elsewhere
int dataAvailable = 0;    // This flag should be managed by your BLE interrupt handler

/* Redefine _write() for printf() output via ITM */
int _write(int file, char *ptr, int len)
{
  for (int i = 0; i < len; i++)
  {
    ITM_SendChar(*ptr++);
  }
  return len;
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Configuration ------------------------------------------------------*/

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

  /* Initialize peripherals from our drivers */
  i2c_init();
  lsm6dsl_init();
  ble_init();

  /* Initially, set BLE to non-discoverable (no connections allowed) */
  setDiscoverability(0);

  /* Get an initial accelerometer reading */
  lsm6dsl_read_xyz(&prev_ax, &prev_ay, &prev_az);

  /* Initialize timing variables */
  lastMessageTick = HAL_GetTick();
  lastLEDToggleTick = HAL_GetTick();

  printf("DS12345 PrivTag application started. Monitoring movement...\n");

  /* Main loop */
  while (1)
  {
    /* Read current accelerometer data */
    lsm6dsl_read_xyz(&ax, &ay, &az);

    /* Compute absolute differences between successive readings */
    int diff_x = (ax >= prev_ax) ? (ax - prev_ax) : (prev_ax - ax);
    int diff_y = (ay >= prev_ay) ? (ay - prev_ay) : (prev_ay - ay);
    int diff_z = (az >= prev_az) ? (az - prev_az) : (prev_az - az);

    /* Check if device is "static" (all axis differences are below threshold) */
    if ((diff_x < MOVEMENT_THRESHOLD) &&
        (diff_y < MOVEMENT_THRESHOLD) &&
        (diff_z < MOVEMENT_THRESHOLD))
    {
      static_count++;
    }
    else
    {
      /* Movement detected: reset static count and exit lost mode if active */
      static_count = 0;
      if (lost_mode)
      {
        lost_mode = 0;
        setDiscoverability(0);  // Disable BLE advertising
        printf("Movement detected. Exiting lost mode.\n");
        // Ensure LED is turned off when exiting lost mode.
        HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
      }
    }

    /* Update previous accelerometer readings */
    prev_ax = ax;
    prev_ay = ay;
    prev_az = az;

    /* Check if device should enter lost mode */
    if ((static_count >= LOST_THRESHOLD) && (!lost_mode))
    {
      lost_mode = 1;
      lostStartTick = HAL_GetTick();
      /* Call setConnectable() to start BLE advertising/connectability */
      setConnectable();
      printf("No movement detected for 1 minute. Entering lost mode...\n");
    }

    /* If in lost mode, perform BLE messaging and LED blinking */
    if (lost_mode)
    {
      uint32_t currentTick = HAL_GetTick();

      /* Every 10 seconds, reassert connectability and send a BLE message */
      if ((currentTick - lastMessageTick) >= 10000) // 10 seconds
      {
        /* Attempt to re-enable connectability */
        setConnectable();

        uint32_t lostSeconds = (currentTick - lostStartTick) / 1000;
        char message[64];
        snprintf(message, sizeof(message), "PrivTag %s has been missing for %lu seconds", tagName, lostSeconds);

        /* Send BLE message using virtual UART (Nordic UART service) */
        updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, strlen(message), (uint8_t*)message);

        printf("Sent BLE message: %s\n", message);
        lastMessageTick = currentTick;
      }

      /* Blink LED1 every 500ms */
      if ((currentTick - lastLEDToggleTick) >= 500)
      {
        HAL_GPIO_TogglePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin);
        lastLEDToggleTick = currentTick;
      }
    }

    /* Delay between samples (~100 ms) */
    HAL_Delay(100);
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  while(1)
  {
    // Stay here in case of error.
  }
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
